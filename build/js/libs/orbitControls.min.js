THREE.OrbitControls=function(e,t,n){this.object=e,this.domElement=void 0!==t?t:document,this.localElement=void 0!==n?n:document,this.enabled=!0,this.target=new THREE.Vector3,this.center=this.target,this.noZoom=!1,this.zoomSpeed=1,this.minDistance=0,this.maxDistance=1/0,this.noRotate=!1,this.rotateSpeed=1,this.noPan=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.noKeys=!1,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40};var o=this,a=new THREE.Vector2,i=new THREE.Vector2,s=new THREE.Vector2,c=new THREE.Vector2,r=new THREE.Vector2,h=new THREE.Vector2,l=new THREE.Vector2,d=new THREE.Vector2,u=new THREE.Vector2,E=0,m=0,p=1,f=new THREE.Vector3,b=new THREE.Vector3,T={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},y=T.NONE,v={type:"change"};function O(){return 2*Math.PI/60/60*o.autoRotateSpeed}function g(){return Math.pow(.95,o.zoomSpeed)}function R(e){if(!1!==o.enabled){e.preventDefault();var t=o.domElement===document?o.domElement.body:o.domElement;if(y===T.ROTATE){if(!0===o.noRotate)return;i.set(e.clientX,e.clientY),s.subVectors(i,a),o.rotateLeft(2*Math.PI*s.x/t.clientWidth*o.rotateSpeed),o.rotateUp(2*Math.PI*s.y/t.clientHeight*o.rotateSpeed),a.copy(i)}else if(y===T.DOLLY){if(!0===o.noZoom)return;d.set(e.clientX,e.clientY),u.subVectors(d,l),u.y>0?o.dollyIn():o.dollyOut(),l.copy(d)}else if(y===T.PAN){if(!0===o.noPan)return;r.set(e.clientX,e.clientY),h.subVectors(r,c),o.pan(h),c.copy(r)}o.update()}}function H(){!1!==o.enabled&&(o.domElement.removeEventListener("mousemove",R,!1),o.domElement.removeEventListener("mouseup",H,!1),y=T.NONE)}function L(e){if(!1!==o.enabled&&!0!==o.noZoom){var t=0;e.wheelDelta?t=e.wheelDelta:e.detail&&(t=-e.detail),t>0?o.dollyOut():o.dollyIn()}}this.rotateLeft=function(e){void 0===e&&(e=O()),m-=e},this.rotateUp=function(e){void 0===e&&(e=O()),E-=e},this.panLeft=function(e){var t=new THREE.Vector3,n=this.object.matrix.elements;t.set(n[0],n[1],n[2]),t.multiplyScalar(-e),f.add(t)},this.panUp=function(e){var t=new THREE.Vector3,n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),f.add(t)},this.pan=function(e){var t=o.domElement===document?o.domElement.body:o.domElement;if(void 0!==o.object.fov){var n=o.object.position.clone().sub(o.target).length();n*=Math.tan(o.object.fov/2*Math.PI/180),o.panLeft(2*e.x*n/t.clientHeight),o.panUp(2*e.y*n/t.clientHeight)}else void 0!==o.object.top?(o.panLeft(e.x*(o.object.right-o.object.left)/t.clientWidth),o.panUp(e.y*(o.object.top-o.object.bottom)/t.clientHeight)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(e){void 0===e&&(e=g()),p/=e},this.dollyOut=function(e){void 0===e&&(e=g()),p*=e},this.update=function(){var e=this.object.position,t=e.clone().sub(this.target),n=Math.atan2(t.x,t.z),o=Math.atan2(Math.sqrt(t.x*t.x+t.z*t.z),t.y);this.autoRotate&&this.rotateLeft(O()),n+=m,o+=E,o=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,o)),o=Math.max(1e-6,Math.min(Math.PI-1e-6,o));var a=t.length()*p;a=Math.max(this.minDistance,Math.min(this.maxDistance,a)),this.target.add(f),t.x=a*Math.sin(o)*Math.sin(n),t.y=a*Math.cos(o),t.z=a*Math.sin(o)*Math.cos(n),e.copy(this.target).add(t),this.object.lookAt(this.target),m=0,E=0,p=1,f.set(0,0,0),b.distanceTo(this.object.position)>0&&(this.dispatchEvent(v),b.copy(this.object.position))},this.domElement.addEventListener("contextmenu",function(e){e.preventDefault()},!1),this.localElement.addEventListener("mousedown",function(e){if(!1!==o.enabled){if(e.preventDefault(),0===e.button){if(!0===o.noRotate)return;y=T.ROTATE,a.set(e.clientX,e.clientY)}else if(1===e.button){if(!0===o.noZoom)return;y=T.DOLLY,l.set(e.clientX,e.clientY)}else if(2===e.button){if(!0===o.noPan)return;y=T.PAN,c.set(e.clientX,e.clientY)}o.domElement.addEventListener("mousemove",R,!1),o.domElement.addEventListener("mouseup",H,!1)}},!1),this.domElement.addEventListener("mousewheel",L,!1),this.domElement.addEventListener("DOMMouseScroll",L,!1),this.domElement.addEventListener("keydown",function(e){if(!1!==o.enabled&&!0!==o.noKeys&&!0!==o.noPan){var t=!1;switch(e.keyCode){case o.keys.UP:o.pan(new THREE.Vector2(0,o.keyPanSpeed)),t=!0;break;case o.keys.BOTTOM:o.pan(new THREE.Vector2(0,-o.keyPanSpeed)),t=!0;break;case o.keys.LEFT:o.pan(new THREE.Vector2(o.keyPanSpeed,0)),t=!0;break;case o.keys.RIGHT:o.pan(new THREE.Vector2(-o.keyPanSpeed,0)),t=!0}t&&o.update()}},!1),this.localElement.addEventListener("touchstart",function(e){if(!1!==o.enabled)switch(e.touches.length){case 1:if(!0===o.noRotate)return;y=T.TOUCH_ROTATE,a.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!0===o.noZoom)return;y=T.TOUCH_DOLLY;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);l.set(0,i);break;case 3:if(!0===o.noPan)return;y=T.TOUCH_PAN,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:y=T.NONE}},!1),this.domElement.addEventListener("touchend",function(){!1!==o.enabled&&(y=T.NONE)},!1),this.domElement.addEventListener("touchmove",function(e){if(!1!==o.enabled){e.preventDefault(),e.stopPropagation();var t=o.domElement===document?o.domElement.body:o.domElement;switch(e.touches.length){case 1:if(!0===o.noRotate)return;if(y!==T.TOUCH_ROTATE)return;i.set(e.touches[0].pageX,e.touches[0].pageY),s.subVectors(i,a),o.rotateLeft(2*Math.PI*s.x/t.clientWidth*o.rotateSpeed),o.rotateUp(2*Math.PI*s.y/t.clientHeight*o.rotateSpeed),a.copy(i);break;case 2:if(!0===o.noZoom)return;if(y!==T.TOUCH_DOLLY)return;var n=e.touches[0].pageX-e.touches[1].pageX,E=e.touches[0].pageY-e.touches[1].pageY,m=Math.sqrt(n*n+E*E);d.set(0,m),u.subVectors(d,l),u.y>0?o.dollyOut():o.dollyIn(),l.copy(d);break;case 3:if(!0===o.noPan)return;if(y!==T.TOUCH_PAN)return;r.set(e.touches[0].pageX,e.touches[0].pageY),h.subVectors(r,c),o.pan(h),c.copy(r);break;default:y=T.NONE}}},!1)},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvb3JiaXRDb250cm9scy5qcyJdLCJuYW1lcyI6WyJUSFJFRSIsIk9yYml0Q29udHJvbHMiLCJvYmplY3QiLCJkb21FbGVtZW50IiwibG9jYWxFbGVtZW50IiwidGhpcyIsInVuZGVmaW5lZCIsImRvY3VtZW50IiwiZW5hYmxlZCIsInRhcmdldCIsIlZlY3RvcjMiLCJjZW50ZXIiLCJub1pvb20iLCJ6b29tU3BlZWQiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwiSW5maW5pdHkiLCJub1JvdGF0ZSIsInJvdGF0ZVNwZWVkIiwibm9QYW4iLCJrZXlQYW5TcGVlZCIsImF1dG9Sb3RhdGUiLCJhdXRvUm90YXRlU3BlZWQiLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsIk1hdGgiLCJQSSIsIm5vS2V5cyIsImtleXMiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkJPVFRPTSIsInNjb3BlIiwicm90YXRlU3RhcnQiLCJWZWN0b3IyIiwicm90YXRlRW5kIiwicm90YXRlRGVsdGEiLCJwYW5TdGFydCIsInBhbkVuZCIsInBhbkRlbHRhIiwiZG9sbHlTdGFydCIsImRvbGx5RW5kIiwiZG9sbHlEZWx0YSIsInBoaURlbHRhIiwidGhldGFEZWx0YSIsInNjYWxlIiwicGFuIiwibGFzdFBvc2l0aW9uIiwiU1RBVEUiLCJOT05FIiwiUk9UQVRFIiwiRE9MTFkiLCJQQU4iLCJUT1VDSF9ST1RBVEUiLCJUT1VDSF9ET0xMWSIsIlRPVUNIX1BBTiIsInN0YXRlIiwiY2hhbmdlRXZlbnQiLCJ0eXBlIiwiZ2V0QXV0b1JvdGF0aW9uQW5nbGUiLCJnZXRab29tU2NhbGUiLCJwb3ciLCJvbk1vdXNlTW92ZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJlbGVtZW50IiwiYm9keSIsInNldCIsImNsaWVudFgiLCJjbGllbnRZIiwic3ViVmVjdG9ycyIsInJvdGF0ZUxlZnQiLCJ4IiwiY2xpZW50V2lkdGgiLCJyb3RhdGVVcCIsInkiLCJjbGllbnRIZWlnaHQiLCJjb3B5IiwiZG9sbHlJbiIsImRvbGx5T3V0IiwidXBkYXRlIiwib25Nb3VzZVVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VXaGVlbCIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRldGFpbCIsImFuZ2xlIiwicGFuTGVmdCIsImRpc3RhbmNlIiwicGFuT2Zmc2V0IiwidGUiLCJtYXRyaXgiLCJlbGVtZW50cyIsIm11bHRpcGx5U2NhbGFyIiwiYWRkIiwicGFuVXAiLCJmb3YiLCJ0YXJnZXREaXN0YW5jZSIsInBvc2l0aW9uIiwiY2xvbmUiLCJzdWIiLCJsZW5ndGgiLCJ0YW4iLCJ0b3AiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJjb25zb2xlIiwid2FybiIsImRvbGx5U2NhbGUiLCJvZmZzZXQiLCJ0aGV0YSIsImF0YW4yIiwieiIsInBoaSIsInNxcnQiLCJtYXgiLCJtaW4iLCJyYWRpdXMiLCJzaW4iLCJjb3MiLCJsb29rQXQiLCJkaXN0YW5jZVRvIiwiZGlzcGF0Y2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJidXR0b24iLCJuZWVkVXBkYXRlIiwia2V5Q29kZSIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiZHgiLCJkeSIsInN0b3BQcm9wYWdhdGlvbiIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIkV2ZW50RGlzcGF0Y2hlciJdLCJtYXBwaW5ncyI6IkFBMEJBQSxNQUFNQyxjQUFnQixTQUFXQyxFQUFRQyxFQUFZQyxHQUVuREMsS0FBS0gsT0FBU0EsRUFDZEcsS0FBS0YsZ0JBQThCRyxJQUFmSCxFQUE2QkEsRUFBYUksU0FDOURGLEtBQUtELGtCQUFrQ0UsSUFBakJGLEVBQStCQSxFQUFlRyxTQUtwRUYsS0FBS0csU0FBVSxFQUlmSCxLQUFLSSxPQUFTLElBQUlULE1BQU1VLFFBRXhCTCxLQUFLTSxPQUFTTixLQUFLSSxPQUluQkosS0FBS08sUUFBUyxFQUNkUCxLQUFLUSxVQUFZLEVBRWpCUixLQUFLUyxZQUFjLEVBQ25CVCxLQUFLVSxZQUFjQyxFQUFB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QyxTQXNCc0MsSUFJNURsRCxNQUFNQyxjQUFjdUksVUFBWUMsT0FBT0MsT0FBUTFJLE1BQU0ySSxnQkFBZ0JIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgcWlhbyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9xaWFvXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3IgZXJpY2g2NjYgLyBodHRwOi8vZXJpY2hhaW5lcy5jb21cclxuICogQGF1dGhvciBtcmZsaXggLyBodHRwOi8vZmVsaXhuaWtsYXMuZGVcclxuICpcclxuICogcmVsZWFzZWQgdW5kZXIgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbi8qZ2xvYmFsIFRIUkVFLCBjb25zb2xlICovXHJcblxyXG4vLyBUaGlzIHNldCBvZiBjb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy4gSXQgbWFpbnRhaW5zXHJcbi8vIHRoZSBcInVwXCIgZGlyZWN0aW9uIGFzICtZLCB1bmxpa2UgdGhlIFRyYWNrYmFsbENvbnRyb2xzLiBUb3VjaCBvbiB0YWJsZXQgYW5kIHBob25lcyBpc1xyXG4vLyBzdXBwb3J0ZWQuXHJcbi8vXHJcbi8vICAgIE9yYml0IC0gbGVmdCBtb3VzZSAvIHRvdWNoOiBvbmUgZmluZ2VyIG1vdmVcclxuLy8gICAgWm9vbSAtIG1pZGRsZSBtb3VzZSwgb3IgbW91c2V3aGVlbCAvIHRvdWNoOiB0d28gZmluZ2VyIHNwcmVhZCBvciBzcXVpc2hcclxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogdGhyZWUgZmludGVyIHN3aXBlXHJcbi8vXHJcbi8vIFRoaXMgaXMgYSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciAobW9zdCkgVHJhY2tiYWxsQ29udHJvbHMgdXNlZCBpbiBleGFtcGxlcy5cclxuLy8gVGhhdCBpcywgaW5jbHVkZSB0aGlzIGpzIGZpbGUgYW5kIHdoZXJldmVyIHlvdSBzZWU6XHJcbi8vICAgIFx0Y29udHJvbHMgPSBuZXcgVEhSRUUuVHJhY2tiYWxsQ29udHJvbHMoIGNhbWVyYSApO1xyXG4vLyAgICAgIGNvbnRyb2xzLnRhcmdldC56ID0gMTUwO1xyXG4vLyBTaW1wbGUgc3Vic3RpdHV0ZSBcIk9yYml0Q29udHJvbHNcIiBhbmQgdGhlIGNvbnRyb2wgc2hvdWxkIHdvcmsgYXMtaXMuXHJcblxyXG5USFJFRS5PcmJpdENvbnRyb2xzID0gZnVuY3Rpb24gKCBvYmplY3QsIGRvbUVsZW1lbnQsIGxvY2FsRWxlbWVudCApIHtcclxuXHJcbiAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcbiAgdGhpcy5kb21FbGVtZW50ID0gKCBkb21FbGVtZW50ICE9PSB1bmRlZmluZWQgKSA/IGRvbUVsZW1lbnQgOiBkb2N1bWVudDtcclxuICB0aGlzLmxvY2FsRWxlbWVudCA9ICggbG9jYWxFbGVtZW50ICE9PSB1bmRlZmluZWQgKSA/IGxvY2FsRWxlbWVudCA6IGRvY3VtZW50O1xyXG5cclxuICAvLyBBUElcclxuXHJcbiAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpcyBjb250cm9sXHJcbiAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgLy8gXCJ0YXJnZXRcIiBzZXRzIHRoZSBsb2NhdGlvbiBvZiBmb2N1cywgd2hlcmUgdGhlIGNvbnRyb2wgb3JiaXRzIGFyb3VuZFxyXG4gIC8vIGFuZCB3aGVyZSBpdCBwYW5zIHdpdGggcmVzcGVjdCB0by5cclxuICB0aGlzLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgLy8gY2VudGVyIGlzIG9sZCwgZGVwcmVjYXRlZDsgdXNlIFwidGFyZ2V0XCIgaW5zdGVhZFxyXG4gIHRoaXMuY2VudGVyID0gdGhpcy50YXJnZXQ7XHJcblxyXG4gIC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3JcclxuICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxyXG4gIHRoaXMubm9ab29tID0gZmFsc2U7XHJcbiAgdGhpcy56b29tU3BlZWQgPSAxLjA7XHJcbiAgLy8gTGltaXRzIHRvIGhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiBhbmQgb3V0XHJcbiAgdGhpcy5taW5EaXN0YW5jZSA9IDA7XHJcbiAgdGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xyXG5cclxuICAvLyBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIHRoaXMubm9Sb3RhdGUgPSBmYWxzZTtcclxuICB0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xyXG5cclxuICAvLyBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIHRoaXMubm9QYW4gPSBmYWxzZTtcclxuICB0aGlzLmtleVBhblNwZWVkID0gNy4wO1x0Ly8gcGl4ZWxzIG1vdmVkIHBlciBhcnJvdyBrZXkgcHVzaFxyXG5cclxuICAvLyBTZXQgdG8gdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHJvdGF0ZSBhcm91bmQgdGhlIHRhcmdldFxyXG4gIHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xyXG4gIHRoaXMuYXV0b1JvdGF0ZVNwZWVkID0gMi4wOyAvLyAzMCBzZWNvbmRzIHBlciByb3VuZCB3aGVuIGZwcyBpcyA2MFxyXG5cclxuICAvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICAvLyBSYW5nZSBpcyAwIHRvIE1hdGguUEkgcmFkaWFucy5cclxuICB0aGlzLm1pblBvbGFyQW5nbGUgPSAwOyAvLyByYWRpYW5zXHJcbiAgdGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5cclxuICAvLyBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHVzZSBvZiB0aGUga2V5c1xyXG4gIHRoaXMubm9LZXlzID0gZmFsc2U7XHJcbiAgLy8gVGhlIGZvdXIgYXJyb3cga2V5c1xyXG4gIHRoaXMua2V5cyA9IHsgTEVGVDogMzcsIFVQOiAzOCwgUklHSFQ6IDM5LCBCT1RUT006IDQwIH07XHJcblxyXG4gIC8vLy8vLy8vLy8vL1xyXG4gIC8vIGludGVybmFsc1xyXG5cclxuICB2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuICB2YXIgRVBTID0gMC4wMDAwMDE7XHJcblxyXG4gIHZhciByb3RhdGVTdGFydCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcbiAgdmFyIHJvdGF0ZUVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcbiAgdmFyIHJvdGF0ZURlbHRhID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuXHJcbiAgdmFyIHBhblN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICB2YXIgcGFuRW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICB2YXIgcGFuRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG5cclxuICB2YXIgZG9sbHlTdGFydCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcbiAgdmFyIGRvbGx5RW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICB2YXIgZG9sbHlEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcblxyXG4gIHZhciBwaGlEZWx0YSA9IDA7XHJcbiAgdmFyIHRoZXRhRGVsdGEgPSAwO1xyXG4gIHZhciBzY2FsZSA9IDE7XHJcbiAgdmFyIHBhbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG4gIHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuICB2YXIgU1RBVEUgPSB7IE5PTkUgOiAtMSwgUk9UQVRFIDogMCwgRE9MTFkgOiAxLCBQQU4gOiAyLCBUT1VDSF9ST1RBVEUgOiAzLCBUT1VDSF9ET0xMWSA6IDQsIFRPVUNIX1BBTiA6IDUgfTtcclxuICB2YXIgc3RhdGUgPSBTVEFURS5OT05FO1xyXG5cclxuICAvLyBldmVudHNcclxuXHJcbiAgdmFyIGNoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xyXG5cclxuXHJcbiAgdGhpcy5yb3RhdGVMZWZ0ID0gZnVuY3Rpb24gKCBhbmdsZSApIHtcclxuXHJcbiAgICBpZiAoIGFuZ2xlID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG4gICAgICBhbmdsZSA9IGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRoZXRhRGVsdGEgLT0gYW5nbGU7XHJcblxyXG4gIH07XHJcblxyXG4gIHRoaXMucm90YXRlVXAgPSBmdW5jdGlvbiAoIGFuZ2xlICkge1xyXG5cclxuICAgIGlmICggYW5nbGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgIGFuZ2xlID0gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcGhpRGVsdGEgLT0gYW5nbGU7XHJcblxyXG4gIH07XHJcblxyXG4gIC8vIHBhc3MgaW4gZGlzdGFuY2UgaW4gd29ybGQgc3BhY2UgdG8gbW92ZSBsZWZ0XHJcbiAgdGhpcy5wYW5MZWZ0ID0gZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcclxuXHJcbiAgICB2YXIgcGFuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHZhciB0ZSA9IHRoaXMub2JqZWN0Lm1hdHJpeC5lbGVtZW50cztcclxuICAgIC8vIGdldCBYIGNvbHVtbiBvZiBtYXRyaXhcclxuICAgIHBhbk9mZnNldC5zZXQoIHRlWzBdLCB0ZVsxXSwgdGVbMl0gKTtcclxuICAgIHBhbk9mZnNldC5tdWx0aXBseVNjYWxhcigtZGlzdGFuY2UpO1xyXG5cclxuICAgIHBhbi5hZGQoIHBhbk9mZnNldCApO1xyXG5cclxuICB9O1xyXG5cclxuICAvLyBwYXNzIGluIGRpc3RhbmNlIGluIHdvcmxkIHNwYWNlIHRvIG1vdmUgdXBcclxuICB0aGlzLnBhblVwID0gZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcclxuXHJcbiAgICB2YXIgcGFuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHZhciB0ZSA9IHRoaXMub2JqZWN0Lm1hdHJpeC5lbGVtZW50cztcclxuICAgIC8vIGdldCBZIGNvbHVtbiBvZiBtYXRyaXhcclxuICAgIHBhbk9mZnNldC5zZXQoIHRlWzRdLCB0ZVs1XSwgdGVbNl0gKTtcclxuICAgIHBhbk9mZnNldC5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSk7XHJcblxyXG4gICAgcGFuLmFkZCggcGFuT2Zmc2V0ICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gbWFpbiBlbnRyeSBwb2ludDsgcGFzcyBpbiBWZWN0b3IyIG9mIGNoYW5nZSBkZXNpcmVkIGluIHBpeGVsIHNwYWNlLFxyXG4gIC8vIHJpZ2h0IGFuZCBkb3duIGFyZSBwb3NpdGl2ZVxyXG4gIHRoaXMucGFuID0gZnVuY3Rpb24gKCBkZWx0YSApIHtcclxuXHJcbiAgICB2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcclxuXHJcbiAgICBpZiAoIHNjb3BlLm9iamVjdC5mb3YgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgIC8vIHBlcnNwZWN0aXZlXHJcbiAgICAgIHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcclxuICAgICAgdmFyIG9mZnNldCA9IHBvc2l0aW9uLmNsb25lKCkuc3ViKCBzY29wZS50YXJnZXQgKTtcclxuICAgICAgdmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xyXG5cclxuICAgICAgLy8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXHJcbiAgICAgIHRhcmdldERpc3RhbmNlICo9IE1hdGgudGFuKCAoc2NvcGUub2JqZWN0LmZvdi8yKSAqIE1hdGguUEkgLyAxODAuMCApO1xyXG4gICAgICAvLyB3ZSBhY3R1YWxseSBkb24ndCB1c2Ugc2NyZWVuV2lkdGgsIHNpbmNlIHBlcnNwZWN0aXZlIGNhbWVyYSBpcyBmaXhlZCB0byBzY3JlZW4gaGVpZ2h0XHJcbiAgICAgIHNjb3BlLnBhbkxlZnQoIDIgKiBkZWx0YS54ICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCApO1xyXG4gICAgICBzY29wZS5wYW5VcCggMiAqIGRlbHRhLnkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XHJcblxyXG4gICAgfSBlbHNlIGlmICggc2NvcGUub2JqZWN0LnRvcCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuICAgICAgLy8gb3J0aG9ncmFwaGljXHJcbiAgICAgIHNjb3BlLnBhbkxlZnQoIGRlbHRhLnggKiAoc2NvcGUub2JqZWN0LnJpZ2h0IC0gc2NvcGUub2JqZWN0LmxlZnQpIC8gZWxlbWVudC5jbGllbnRXaWR0aCApO1xyXG4gICAgICBzY29wZS5wYW5VcCggZGVsdGEueSAqIChzY29wZS5vYmplY3QudG9wIC0gc2NvcGUub2JqZWN0LmJvdHRvbSkgLyBlbGVtZW50LmNsaWVudEhlaWdodCApO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgb3IgcGVyc3BlY3RpdmUgLSB3YXJuIHVzZXJcclxuICAgICAgY29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gcGFuIGRpc2FibGVkLicgKTtcclxuXHJcbiAgICB9XHJcblxyXG4gIH07XHJcblxyXG4gIHRoaXMuZG9sbHlJbiA9IGZ1bmN0aW9uICggZG9sbHlTY2FsZSApIHtcclxuXHJcbiAgICBpZiAoIGRvbGx5U2NhbGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgIGRvbGx5U2NhbGUgPSBnZXRab29tU2NhbGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUgLz0gZG9sbHlTY2FsZTtcclxuXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kb2xseU91dCA9IGZ1bmN0aW9uICggZG9sbHlTY2FsZSApIHtcclxuXHJcbiAgICBpZiAoIGRvbGx5U2NhbGUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgIGRvbGx5U2NhbGUgPSBnZXRab29tU2NhbGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUgKj0gZG9sbHlTY2FsZTtcclxuXHJcbiAgfTtcclxuXHJcbiAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5vYmplY3QucG9zaXRpb247XHJcbiAgICB2YXIgb2Zmc2V0ID0gcG9zaXRpb24uY2xvbmUoKS5zdWIoIHRoaXMudGFyZ2V0ICk7XHJcblxyXG4gICAgLy8gYW5nbGUgZnJvbSB6LWF4aXMgYXJvdW5kIHktYXhpc1xyXG5cclxuICAgIHZhciB0aGV0YSA9IE1hdGguYXRhbjIoIG9mZnNldC54LCBvZmZzZXQueiApO1xyXG5cclxuICAgIC8vIGFuZ2xlIGZyb20geS1heGlzXHJcblxyXG4gICAgdmFyIHBoaSA9IE1hdGguYXRhbjIoIE1hdGguc3FydCggb2Zmc2V0LnggKiBvZmZzZXQueCArIG9mZnNldC56ICogb2Zmc2V0LnogKSwgb2Zmc2V0LnkgKTtcclxuXHJcbiAgICBpZiAoIHRoaXMuYXV0b1JvdGF0ZSApIHtcclxuXHJcbiAgICAgIHRoaXMucm90YXRlTGVmdCggZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB0aGV0YSArPSB0aGV0YURlbHRhO1xyXG4gICAgcGhpICs9IHBoaURlbHRhO1xyXG5cclxuICAgIC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXHJcbiAgICBwaGkgPSBNYXRoLm1heCggdGhpcy5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggdGhpcy5tYXhQb2xhckFuZ2xlLCBwaGkgKSApO1xyXG5cclxuICAgIC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWUgRVBTIGFuZCBQSS1FUFNcclxuICAgIHBoaSA9IE1hdGgubWF4KCBFUFMsIE1hdGgubWluKCBNYXRoLlBJIC0gRVBTLCBwaGkgKSApO1xyXG5cclxuICAgIHZhciByYWRpdXMgPSBvZmZzZXQubGVuZ3RoKCkgKiBzY2FsZTtcclxuXHJcbiAgICAvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gICAgcmFkaXVzID0gTWF0aC5tYXgoIHRoaXMubWluRGlzdGFuY2UsIE1hdGgubWluKCB0aGlzLm1heERpc3RhbmNlLCByYWRpdXMgKSApO1xyXG5cclxuICAgIC8vIG1vdmUgdGFyZ2V0IHRvIHBhbm5lZCBsb2NhdGlvblxyXG4gICAgdGhpcy50YXJnZXQuYWRkKCBwYW4gKTtcclxuXHJcbiAgICBvZmZzZXQueCA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGkgKSAqIE1hdGguc2luKCB0aGV0YSApO1xyXG4gICAgb2Zmc2V0LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggcGhpICk7XHJcbiAgICBvZmZzZXQueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGkgKSAqIE1hdGguY29zKCB0aGV0YSApO1xyXG5cclxuICAgIHBvc2l0aW9uLmNvcHkoIHRoaXMudGFyZ2V0ICkuYWRkKCBvZmZzZXQgKTtcclxuXHJcbiAgICB0aGlzLm9iamVjdC5sb29rQXQoIHRoaXMudGFyZ2V0ICk7XHJcblxyXG4gICAgdGhldGFEZWx0YSA9IDA7XHJcbiAgICBwaGlEZWx0YSA9IDA7XHJcbiAgICBzY2FsZSA9IDE7XHJcbiAgICBwYW4uc2V0KDAsMCwwKTtcclxuXHJcbiAgICBpZiAoIGxhc3RQb3NpdGlvbi5kaXN0YW5jZVRvKCB0aGlzLm9iamVjdC5wb3NpdGlvbiApID4gMCApIHtcclxuXHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCggY2hhbmdlRXZlbnQgKTtcclxuXHJcbiAgICAgIGxhc3RQb3NpdGlvbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgfTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkge1xyXG5cclxuICAgIHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xyXG5cclxuICAgIHJldHVybiBNYXRoLnBvdyggMC45NSwgc2NvcGUuem9vbVNwZWVkICk7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25Nb3VzZURvd24oIGV2ZW50ICkge1xyXG5cclxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfVxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZiAoIGV2ZW50LmJ1dHRvbiA9PT0gMCApIHtcclxuICAgICAgaWYgKCBzY29wZS5ub1JvdGF0ZSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICBzdGF0ZSA9IFNUQVRFLlJPVEFURTtcclxuXHJcbiAgICAgIHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoIGV2ZW50LmJ1dHRvbiA9PT0gMSApIHtcclxuICAgICAgaWYgKCBzY29wZS5ub1pvb20gPT09IHRydWUgKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgc3RhdGUgPSBTVEFURS5ET0xMWTtcclxuXHJcbiAgICAgIGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XHJcblxyXG4gICAgfSBlbHNlIGlmICggZXZlbnQuYnV0dG9uID09PSAyICkge1xyXG4gICAgICBpZiAoIHNjb3BlLm5vUGFuID09PSB0cnVlICkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgIHN0YXRlID0gU1RBVEUuUEFOO1xyXG5cclxuICAgICAgcGFuU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdyZWdnbWFuIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2dyZWdnbWFuL3RocmVlLmpzL2NvbW1pdC9mZGU5Zjk5MTdkNmQ4MzgxZjA2YmYyMmNkZmY3NjYwMjlkMTc2MWJlXHJcbiAgICBzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcclxuICAgIHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlICk7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoIGV2ZW50ICkge1xyXG5cclxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XHJcblxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICB2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcclxuXHJcbiAgICBpZiAoIHN0YXRlID09PSBTVEFURS5ST1RBVEUgKSB7XHJcblxyXG4gICAgICBpZiAoIHNjb3BlLm5vUm90YXRlID09PSB0cnVlICkgcmV0dXJuO1xyXG5cclxuICAgICAgcm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xyXG4gICAgICByb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICk7XHJcblxyXG4gICAgICAvLyByb3RhdGluZyBhY3Jvc3Mgd2hvbGUgc2NyZWVuIGdvZXMgMzYwIGRlZ3JlZXMgYXJvdW5kXHJcbiAgICAgIHNjb3BlLnJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xyXG4gICAgICAvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcclxuICAgICAgc2NvcGUucm90YXRlVXAoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogc2NvcGUucm90YXRlU3BlZWQgKTtcclxuXHJcbiAgICAgIHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xyXG5cclxuICAgIH0gZWxzZSBpZiAoIHN0YXRlID09PSBTVEFURS5ET0xMWSApIHtcclxuXHJcbiAgICAgIGlmICggc2NvcGUubm9ab29tID09PSB0cnVlICkgcmV0dXJuO1xyXG5cclxuICAgICAgZG9sbHlFbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XHJcbiAgICAgIGRvbGx5RGVsdGEuc3ViVmVjdG9ycyggZG9sbHlFbmQsIGRvbGx5U3RhcnQgKTtcclxuXHJcbiAgICAgIGlmICggZG9sbHlEZWx0YS55ID4gMCApIHtcclxuXHJcbiAgICAgICAgc2NvcGUuZG9sbHlJbigpO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgc2NvcGUuZG9sbHlPdXQoKTtcclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcclxuXHJcbiAgICB9IGVsc2UgaWYgKCBzdGF0ZSA9PT0gU1RBVEUuUEFOICkge1xyXG5cclxuICAgICAgaWYgKCBzY29wZS5ub1BhbiA9PT0gdHJ1ZSApIHJldHVybjtcclxuXHJcbiAgICAgIHBhbkVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcclxuICAgICAgcGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApO1xyXG5cclxuICAgICAgc2NvcGUucGFuKCBwYW5EZWx0YSApO1xyXG5cclxuICAgICAgcGFuU3RhcnQuY29weSggcGFuRW5kICk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdyZWdnbWFuIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2dyZWdnbWFuL3RocmVlLmpzL2NvbW1pdC9mZGU5Zjk5MTdkNmQ4MzgxZjA2YmYyMmNkZmY3NjYwMjlkMTc2MWJlXHJcbiAgICBzY29wZS51cGRhdGUoKTtcclxuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvbk1vdXNlVXAoIC8qIGV2ZW50ICovICkge1xyXG5cclxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XHJcblxyXG4gICAgLy8gR3JlZ2dtYW4gZml4OiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZ2dtYW4vdGhyZWUuanMvY29tbWl0L2ZkZTlmOTkxN2Q2ZDgzODFmMDZiZjIyY2RmZjc2NjAyOWQxNzYxYmVcclxuICAgIHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xyXG4gICAgc2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcclxuXHJcbiAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25Nb3VzZVdoZWVsKCBldmVudCApIHtcclxuXHJcbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLm5vWm9vbSA9PT0gdHJ1ZSApIHJldHVybjtcclxuXHJcbiAgICB2YXIgZGVsdGEgPSAwO1xyXG5cclxuICAgIGlmICggZXZlbnQud2hlZWxEZWx0YSApIHsgLy8gV2ViS2l0IC8gT3BlcmEgLyBFeHBsb3JlciA5XHJcblxyXG4gICAgICBkZWx0YSA9IGV2ZW50LndoZWVsRGVsdGE7XHJcblxyXG4gICAgfSBlbHNlIGlmICggZXZlbnQuZGV0YWlsICkgeyAvLyBGaXJlZm94XHJcblxyXG4gICAgICBkZWx0YSA9IC0gZXZlbnQuZGV0YWlsO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIGRlbHRhID4gMCApIHtcclxuXHJcbiAgICAgIHNjb3BlLmRvbGx5T3V0KCk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIHNjb3BlLmRvbGx5SW4oKTtcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcclxuXHJcbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgeyByZXR1cm47IH1cclxuICAgIGlmICggc2NvcGUubm9LZXlzID09PSB0cnVlICkgeyByZXR1cm47IH1cclxuICAgIGlmICggc2NvcGUubm9QYW4gPT09IHRydWUgKSB7IHJldHVybjsgfVxyXG5cclxuICAgIC8vIHBhbiBhIHBpeGVsIC0gSSBndWVzcyBmb3IgcHJlY2lzZSBwb3NpdGlvbmluZz9cclxuICAgIC8vIEdyZWdnbWFuIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2dyZWdnbWFuL3RocmVlLmpzL2NvbW1pdC9mZGU5Zjk5MTdkNmQ4MzgxZjA2YmYyMmNkZmY3NjYwMjlkMTc2MWJlXHJcbiAgICB2YXIgbmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgIHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XHJcblxyXG4gICAgICBjYXNlIHNjb3BlLmtleXMuVVA6XHJcbiAgICAgICAgc2NvcGUucGFuKCBuZXcgVEhSRUUuVmVjdG9yMiggMCwgc2NvcGUua2V5UGFuU3BlZWQgKSApO1xyXG4gICAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHNjb3BlLmtleXMuQk9UVE9NOlxyXG4gICAgICAgIHNjb3BlLnBhbiggbmV3IFRIUkVFLlZlY3RvcjIoIDAsIC1zY29wZS5rZXlQYW5TcGVlZCApICk7XHJcbiAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2Ugc2NvcGUua2V5cy5MRUZUOlxyXG4gICAgICAgIHNjb3BlLnBhbiggbmV3IFRIUkVFLlZlY3RvcjIoIHNjb3BlLmtleVBhblNwZWVkLCAwICkgKTtcclxuICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBzY29wZS5rZXlzLlJJR0hUOlxyXG4gICAgICAgIHNjb3BlLnBhbiggbmV3IFRIUkVFLlZlY3RvcjIoIC1zY29wZS5rZXlQYW5TcGVlZCwgMCApICk7XHJcbiAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR3JlZ2dtYW4gZml4OiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZ2dtYW4vdGhyZWUuanMvY29tbWl0L2ZkZTlmOTkxN2Q2ZDgzODFmMDZiZjIyY2RmZjc2NjAyOWQxNzYxYmVcclxuICAgIGlmICggbmVlZFVwZGF0ZSApIHtcclxuXHJcbiAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0KCBldmVudCApIHtcclxuXHJcbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgeyByZXR1cm47IH1cclxuXHJcbiAgICBzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcclxuXHJcbiAgICAgIGNhc2UgMTpcdC8vIG9uZS1maW5nZXJlZCB0b3VjaDogcm90YXRlXHJcbiAgICAgICAgaWYgKCBzY29wZS5ub1JvdGF0ZSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIHN0YXRlID0gU1RBVEUuVE9VQ0hfUk9UQVRFO1xyXG5cclxuICAgICAgICByb3RhdGVTdGFydC5zZXQoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCwgZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZICk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlIDI6XHQvLyB0d28tZmluZ2VyZWQgdG91Y2g6IGRvbGx5XHJcbiAgICAgICAgaWYgKCBzY29wZS5ub1pvb20gPT09IHRydWUgKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZO1xyXG5cclxuICAgICAgICB2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XHJcbiAgICAgICAgdmFyIGR5ID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZIC0gZXZlbnQudG91Y2hlc1sgMSBdLnBhZ2VZO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcclxuICAgICAgICBkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgMzogLy8gdGhyZWUtZmluZ2VyZWQgdG91Y2g6IHBhblxyXG4gICAgICAgIGlmICggc2NvcGUubm9QYW4gPT09IHRydWUgKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX1BBTjtcclxuXHJcbiAgICAgICAgcGFuU3RhcnQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdG91Y2htb3ZlKCBldmVudCApIHtcclxuXHJcbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgeyByZXR1cm47IH1cclxuXHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgdmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XHJcblxyXG4gICAgc3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XHJcblxyXG4gICAgICBjYXNlIDE6IC8vIG9uZS1maW5nZXJlZCB0b3VjaDogcm90YXRlXHJcbiAgICAgICAgaWYgKCBzY29wZS5ub1JvdGF0ZSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgaWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUk9UQVRFICkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgcm90YXRlRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcclxuICAgICAgICByb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICk7XHJcblxyXG4gICAgICAgIC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcclxuICAgICAgICBzY29wZS5yb3RhdGVMZWZ0KCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQgKTtcclxuICAgICAgICAvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcclxuICAgICAgICBzY29wZS5yb3RhdGVVcCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY29wZS5yb3RhdGVTcGVlZCApO1xyXG5cclxuICAgICAgICByb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgMjogLy8gdHdvLWZpbmdlcmVkIHRvdWNoOiBkb2xseVxyXG4gICAgICAgIGlmICggc2NvcGUubm9ab29tID09PSB0cnVlICkgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9ET0xMWSApIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcclxuICAgICAgICB2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xyXG5cclxuICAgICAgICBkb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XHJcbiAgICAgICAgZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xyXG5cclxuICAgICAgICBpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgc2NvcGUuZG9sbHlPdXQoKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICBzY29wZS5kb2xseUluKCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9sbHlTdGFydC5jb3B5KCBkb2xseUVuZCApO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXHJcbiAgICAgICAgaWYgKCBzY29wZS5ub1BhbiA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgaWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUEFOICkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgcGFuRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcclxuICAgICAgICBwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XHJcblxyXG4gICAgICAgIHNjb3BlLnBhbiggcGFuRGVsdGEgKTtcclxuXHJcbiAgICAgICAgcGFuU3RhcnQuY29weSggcGFuRW5kICk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdG91Y2hlbmQoIC8qIGV2ZW50ICovICkge1xyXG5cclxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfVxyXG5cclxuICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcclxuICB9XHJcblxyXG4gIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbiAoIGV2ZW50ICkgeyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9LCBmYWxzZSApO1xyXG4gIHRoaXMubG9jYWxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgZmFsc2UgKTtcclxuICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNld2hlZWwnLCBvbk1vdXNlV2hlZWwsIGZhbHNlICk7XHJcbiAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Nb3VzZVNjcm9sbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTsgLy8gZmlyZWZveFxyXG5cclxuICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCBvbktleURvd24sIGZhbHNlICk7XHJcblxyXG4gIHRoaXMubG9jYWxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydCwgZmFsc2UgKTtcclxuICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgdG91Y2hlbmQsIGZhbHNlICk7XHJcbiAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCB0b3VjaG1vdmUsIGZhbHNlICk7XHJcblxyXG59O1xyXG5cclxuVEhSRUUuT3JiaXRDb250cm9scy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlICk7Il0sImZpbGUiOiJsaWJzL29yYml0Q29udHJvbHMubWluLmpzIn0=
