THREE.OrbitControls=function(e,t,n){this.object=e,this.domElement=void 0!==t?t:document,this.localElement=void 0!==n?n:document,this.enabled=!0,this.target=new THREE.Vector3,this.center=this.target,this.noZoom=!1,this.zoomSpeed=1,this.minDistance=0,this.maxDistance=1/0,this.noRotate=!1,this.rotateSpeed=1,this.noPan=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.noKeys=!1,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40};var o=this,a=new THREE.Vector2,i=new THREE.Vector2,s=new THREE.Vector2,c=new THREE.Vector2,r=new THREE.Vector2,h=new THREE.Vector2,l=new THREE.Vector2,d=new THREE.Vector2,u=new THREE.Vector2,E=0,m=0,p=1,f=new THREE.Vector3,b=new THREE.Vector3,T={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},y=T.NONE,v={type:"change"};function O(){return 2*Math.PI/60/60*o.autoRotateSpeed}function g(){return Math.pow(.95,o.zoomSpeed)}function R(e){if(!1!==o.enabled){e.preventDefault();var t=o.domElement===document?o.domElement.body:o.domElement;if(y===T.ROTATE){if(!0===o.noRotate)return;i.set(e.clientX,e.clientY),s.subVectors(i,a),o.rotateLeft(2*Math.PI*s.x/t.clientWidth*o.rotateSpeed),o.rotateUp(2*Math.PI*s.y/t.clientHeight*o.rotateSpeed),a.copy(i)}else if(y===T.DOLLY){if(!0===o.noZoom)return;d.set(e.clientX,e.clientY),u.subVectors(d,l),u.y>0?o.dollyIn():o.dollyOut(),l.copy(d)}else if(y===T.PAN){if(!0===o.noPan)return;r.set(e.clientX,e.clientY),h.subVectors(r,c),o.pan(h),c.copy(r)}o.update()}}function H(){!1!==o.enabled&&(o.domElement.removeEventListener("mousemove",R,!1),o.domElement.removeEventListener("mouseup",H,!1),y=T.NONE)}function L(e){if(!1!==o.enabled&&!0!==o.noZoom){var t=0;e.wheelDelta?t=e.wheelDelta:e.detail&&(t=-e.detail),t>0?o.dollyOut():o.dollyIn()}}this.rotateLeft=function(e){void 0===e&&(e=O()),m-=e},this.rotateUp=function(e){void 0===e&&(e=O()),E-=e},this.panLeft=function(e){var t=new THREE.Vector3,n=this.object.matrix.elements;t.set(n[0],n[1],n[2]),t.multiplyScalar(-e),f.add(t)},this.panUp=function(e){var t=new THREE.Vector3,n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),f.add(t)},this.pan=function(e){var t=o.domElement===document?o.domElement.body:o.domElement;if(void 0!==o.object.fov){var n=o.object.position.clone().sub(o.target).length();n*=Math.tan(o.object.fov/2*Math.PI/180),o.panLeft(2*e.x*n/t.clientHeight),o.panUp(2*e.y*n/t.clientHeight)}else void 0!==o.object.top?(o.panLeft(e.x*(o.object.right-o.object.left)/t.clientWidth),o.panUp(e.y*(o.object.top-o.object.bottom)/t.clientHeight)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(e){void 0===e&&(e=g()),p/=e},this.dollyOut=function(e){void 0===e&&(e=g()),p*=e},this.update=function(){var e=this.object.position,t=e.clone().sub(this.target),n=Math.atan2(t.x,t.z),o=Math.atan2(Math.sqrt(t.x*t.x+t.z*t.z),t.y);this.autoRotate&&this.rotateLeft(O()),n+=m,o+=E,o=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,o)),o=Math.max(1e-6,Math.min(Math.PI-1e-6,o));var a=t.length()*p;a=Math.max(this.minDistance,Math.min(this.maxDistance,a)),this.target.add(f),t.x=a*Math.sin(o)*Math.sin(n),t.y=a*Math.cos(o),t.z=a*Math.sin(o)*Math.cos(n),e.copy(this.target).add(t),this.object.lookAt(this.target),m=0,E=0,p=1,f.set(0,0,0),b.distanceTo(this.object.position)>0&&(this.dispatchEvent(v),b.copy(this.object.position))},this.domElement.addEventListener("contextmenu",function(e){e.preventDefault()},!1),this.localElement.addEventListener("mousedown",function(e){if(!1!==o.enabled){if(e.preventDefault(),0===e.button){if(!0===o.noRotate)return;y=T.ROTATE,a.set(e.clientX,e.clientY)}else if(1===e.button){if(!0===o.noZoom)return;y=T.DOLLY,l.set(e.clientX,e.clientY)}else if(2===e.button){if(!0===o.noPan)return;y=T.PAN,c.set(e.clientX,e.clientY)}o.domElement.addEventListener("mousemove",R,!1),o.domElement.addEventListener("mouseup",H,!1)}},!1),this.domElement.addEventListener("mousewheel",L,!1),this.domElement.addEventListener("DOMMouseScroll",L,!1),this.domElement.addEventListener("keydown",function(e){if(!1!==o.enabled&&!0!==o.noKeys&&!0!==o.noPan){var t=!1;switch(e.keyCode){case o.keys.UP:o.pan(new THREE.Vector2(0,o.keyPanSpeed)),t=!0;break;case o.keys.BOTTOM:o.pan(new THREE.Vector2(0,-o.keyPanSpeed)),t=!0;break;case o.keys.LEFT:o.pan(new THREE.Vector2(o.keyPanSpeed,0)),t=!0;break;case o.keys.RIGHT:o.pan(new THREE.Vector2(-o.keyPanSpeed,0)),t=!0}t&&o.update()}},!1),this.localElement.addEventListener("touchstart",function(e){if(!1!==o.enabled)switch(e.touches.length){case 1:if(!0===o.noRotate)return;y=T.TOUCH_ROTATE,a.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!0===o.noZoom)return;y=T.TOUCH_DOLLY;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,i=Math.sqrt(t*t+n*n);l.set(0,i);break;case 3:if(!0===o.noPan)return;y=T.TOUCH_PAN,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:y=T.NONE}},!1),this.domElement.addEventListener("touchend",function(){!1!==o.enabled&&(y=T.NONE)},!1),this.domElement.addEventListener("touchmove",function(e){if(!1!==o.enabled){e.preventDefault(),e.stopPropagation();var t=o.domElement===document?o.domElement.body:o.domElement;switch(e.touches.length){case 1:if(!0===o.noRotate)return;if(y!==T.TOUCH_ROTATE)return;i.set(e.touches[0].pageX,e.touches[0].pageY),s.subVectors(i,a),o.rotateLeft(2*Math.PI*s.x/t.clientWidth*o.rotateSpeed),o.rotateUp(2*Math.PI*s.y/t.clientHeight*o.rotateSpeed),a.copy(i);break;case 2:if(!0===o.noZoom)return;if(y!==T.TOUCH_DOLLY)return;var n=e.touches[0].pageX-e.touches[1].pageX,E=e.touches[0].pageY-e.touches[1].pageY,m=Math.sqrt(n*n+E*E);d.set(0,m),u.subVectors(d,l),u.y>0?o.dollyOut():o.dollyIn(),l.copy(d);break;case 3:if(!0===o.noPan)return;if(y!==T.TOUCH_PAN)return;r.set(e.touches[0].pageX,e.touches[0].pageY),h.subVectors(r,c),o.pan(h),c.copy(r);break;default:y=T.NONE}}},!1)},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvb3JiaXRDb250cm9scy5qcyJdLCJuYW1lcyI6WyJUSFJFRSIsIk9yYml0Q29udHJvbHMiLCJvYmplY3QiLCJkb21FbGVtZW50IiwibG9jYWxFbGVtZW50IiwidGhpcyIsInVuZGVmaW5lZCIsImRvY3VtZW50IiwiZW5hYmxlZCIsInRhcmdldCIsIlZlY3RvcjMiLCJjZW50ZXIiLCJub1pvb20iLCJ6b29tU3BlZWQiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwiSW5maW5pdHkiLCJub1JvdGF0ZSIsInJvdGF0ZVNwZWVkIiwibm9QYW4iLCJrZXlQYW5TcGVlZCIsImF1dG9Sb3RhdGUiLCJhdXRvUm90YXRlU3BlZWQiLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsIk1hdGgiLCJQSSIsIm5vS2V5cyIsImtleXMiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkJPVFRPTSIsInNjb3BlIiwicm90YXRlU3RhcnQiLCJWZWN0b3IyIiwicm90YXRlRW5kIiwicm90YXRlRGVsdGEiLCJwYW5TdGFydCIsInBhbkVuZCIsInBhbkRlbHRhIiwiZG9sbHlTdGFydCIsImRvbGx5RW5kIiwiZG9sbHlEZWx0YSIsInBoaURlbHRhIiwidGhldGFEZWx0YSIsInNjYWxlIiwicGFuIiwibGFzdFBvc2l0aW9uIiwiU1RBVEUiLCJOT05FIiwiUk9UQVRFIiwiRE9MTFkiLCJQQU4iLCJUT1VDSF9ST1RBVEUiLCJUT1VDSF9ET0xMWSIsIlRPVUNIX1BBTiIsInN0YXRlIiwiY2hhbmdlRXZlbnQiLCJ0eXBlIiwiZ2V0QXV0b1JvdGF0aW9uQW5nbGUiLCJnZXRab29tU2NhbGUiLCJwb3ciLCJvbk1vdXNlTW92ZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJlbGVtZW50IiwiYm9keSIsInNldCIsImNsaWVudFgiLCJjbGllbnRZIiwic3ViVmVjdG9ycyIsInJvdGF0ZUxlZnQiLCJ4IiwiY2xpZW50V2lkdGgiLCJyb3RhdGVVcCIsInkiLCJjbGllbnRIZWlnaHQiLCJjb3B5IiwiZG9sbHlJbiIsImRvbGx5T3V0IiwidXBkYXRlIiwib25Nb3VzZVVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uTW91c2VXaGVlbCIsImRlbHRhIiwid2hlZWxEZWx0YSIsImRldGFpbCIsImFuZ2xlIiwicGFuTGVmdCIsImRpc3RhbmNlIiwicGFuT2Zmc2V0IiwidGUiLCJtYXRyaXgiLCJlbGVtZW50cyIsIm11bHRpcGx5U2NhbGFyIiwiYWRkIiwicGFuVXAiLCJmb3YiLCJ0YXJnZXREaXN0YW5jZSIsInBvc2l0aW9uIiwiY2xvbmUiLCJzdWIiLCJsZW5ndGgiLCJ0YW4iLCJ0b3AiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJjb25zb2xlIiwid2FybiIsImRvbGx5U2NhbGUiLCJvZmZzZXQiLCJ0aGV0YSIsImF0YW4yIiwieiIsInBoaSIsInNxcnQiLCJtYXgiLCJtaW4iLCJyYWRpdXMiLCJzaW4iLCJjb3MiLCJsb29rQXQiLCJkaXN0YW5jZVRvIiwiZGlzcGF0Y2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJidXR0b24iLCJuZWVkVXBkYXRlIiwia2V5Q29kZSIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiZHgiLCJkeSIsInN0b3BQcm9wYWdhdGlvbiIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIkV2ZW50RGlzcGF0Y2hlciJdLCJtYXBwaW5ncyI6IkFBMEJBQSxNQUFNQyxjQUFnQixTQUFXQyxFQUFRQyxFQUFZQyxHQUVuREMsS0FBS0gsT0FBU0EsRUFDZEcsS0FBS0YsZ0JBQThCRyxJQUFmSCxFQUE2QkEsRUFBYUksU0FDOURGLEtBQUtELGtCQUFrQ0UsSUFBakJGLEVBQStCQSxFQUFlRyxTQUtwRUYsS0FBS0csU0FBVSxFQUlmSCxLQUFLSSxPQUFTLElBQUlULE1BQU1VLFFBRXhCTCxLQUFLTSxPQUFTTixLQUFLSSxPQUluQkosS0FBS08sUUFBUyxFQUNkUCxLQUFLUSxVQUFZLEVBRWpCUixLQUFLUyxZQUFjLEVBQ25CVCxLQUFLVSxZQUFjQyxFQUFB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QyxTQXNCc0MsSUFJNURsRCxNQUFNQyxjQUFjdUksVUFBWUMsT0FBT0MsT0FBUTFJLE1BQU0ySSxnQkFBZ0JIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIHFpYW8gLyBodHRwczovL2dpdGh1Yi5jb20vcWlhb1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbVxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBlcmljaDY2NiAvIGh0dHA6Ly9lcmljaGFpbmVzLmNvbVxuICogQGF1dGhvciBtcmZsaXggLyBodHRwOi8vZmVsaXhuaWtsYXMuZGVcbiAqXG4gKiByZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZSAoTUlUKVxuICovXG4vKmdsb2JhbCBUSFJFRSwgY29uc29sZSAqL1xuXG4vLyBUaGlzIHNldCBvZiBjb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy4gSXQgbWFpbnRhaW5zXG4vLyB0aGUgXCJ1cFwiIGRpcmVjdGlvbiBhcyArWSwgdW5saWtlIHRoZSBUcmFja2JhbGxDb250cm9scy4gVG91Y2ggb24gdGFibGV0IGFuZCBwaG9uZXMgaXNcbi8vIHN1cHBvcnRlZC5cbi8vXG4vLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lIGZpbmdlciBtb3ZlXG4vLyAgICBab29tIC0gbWlkZGxlIG1vdXNlLCBvciBtb3VzZXdoZWVsIC8gdG91Y2g6IHR3byBmaW5nZXIgc3ByZWFkIG9yIHNxdWlzaFxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogdGhyZWUgZmludGVyIHN3aXBlXG4vL1xuLy8gVGhpcyBpcyBhIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIChtb3N0KSBUcmFja2JhbGxDb250cm9scyB1c2VkIGluIGV4YW1wbGVzLlxuLy8gVGhhdCBpcywgaW5jbHVkZSB0aGlzIGpzIGZpbGUgYW5kIHdoZXJldmVyIHlvdSBzZWU6XG4vLyAgICBcdGNvbnRyb2xzID0gbmV3IFRIUkVFLlRyYWNrYmFsbENvbnRyb2xzKCBjYW1lcmEgKTtcbi8vICAgICAgY29udHJvbHMudGFyZ2V0LnogPSAxNTA7XG4vLyBTaW1wbGUgc3Vic3RpdHV0ZSBcIk9yYml0Q29udHJvbHNcIiBhbmQgdGhlIGNvbnRyb2wgc2hvdWxkIHdvcmsgYXMtaXMuXG5cblRIUkVFLk9yYml0Q29udHJvbHMgPSBmdW5jdGlvbiAoIG9iamVjdCwgZG9tRWxlbWVudCwgbG9jYWxFbGVtZW50ICkge1xuXG4gIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICB0aGlzLmRvbUVsZW1lbnQgPSAoIGRvbUVsZW1lbnQgIT09IHVuZGVmaW5lZCApID8gZG9tRWxlbWVudCA6IGRvY3VtZW50O1xuICB0aGlzLmxvY2FsRWxlbWVudCA9ICggbG9jYWxFbGVtZW50ICE9PSB1bmRlZmluZWQgKSA/IGxvY2FsRWxlbWVudCA6IGRvY3VtZW50O1xuXG4gIC8vIEFQSVxuXG4gIC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxuICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG4gIC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBjb250cm9sIG9yYml0cyBhcm91bmRcbiAgLy8gYW5kIHdoZXJlIGl0IHBhbnMgd2l0aCByZXNwZWN0IHRvLlxuICB0aGlzLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gIC8vIGNlbnRlciBpcyBvbGQsIGRlcHJlY2F0ZWQ7IHVzZSBcInRhcmdldFwiIGluc3RlYWRcbiAgdGhpcy5jZW50ZXIgPSB0aGlzLnRhcmdldDtcblxuICAvLyBUaGlzIG9wdGlvbiBhY3R1YWxseSBlbmFibGVzIGRvbGx5aW5nIGluIGFuZCBvdXQ7IGxlZnQgYXMgXCJ6b29tXCIgZm9yXG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIHRoaXMubm9ab29tID0gZmFsc2U7XG4gIHRoaXMuem9vbVNwZWVkID0gMS4wO1xuICAvLyBMaW1pdHMgdG8gaG93IGZhciB5b3UgY2FuIGRvbGx5IGluIGFuZCBvdXRcbiAgdGhpcy5taW5EaXN0YW5jZSA9IDA7XG4gIHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcblxuICAvLyBTZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxuICB0aGlzLm5vUm90YXRlID0gZmFsc2U7XG4gIHRoaXMucm90YXRlU3BlZWQgPSAxLjA7XG5cbiAgLy8gU2V0IHRvIHRydWUgdG8gZGlzYWJsZSB0aGlzIGNvbnRyb2xcbiAgdGhpcy5ub1BhbiA9IGZhbHNlO1xuICB0aGlzLmtleVBhblNwZWVkID0gNy4wO1x0Ly8gcGl4ZWxzIG1vdmVkIHBlciBhcnJvdyBrZXkgcHVzaFxuXG4gIC8vIFNldCB0byB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0XG4gIHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuICB0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcblxuICAvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cbiAgLy8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXG4gIHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcbiAgdGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xuXG4gIC8vIFNldCB0byB0cnVlIHRvIGRpc2FibGUgdXNlIG9mIHRoZSBrZXlzXG4gIHRoaXMubm9LZXlzID0gZmFsc2U7XG4gIC8vIFRoZSBmb3VyIGFycm93IGtleXNcbiAgdGhpcy5rZXlzID0geyBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIEJPVFRPTTogNDAgfTtcblxuICAvLy8vLy8vLy8vLy9cbiAgLy8gaW50ZXJuYWxzXG5cbiAgdmFyIHNjb3BlID0gdGhpcztcblxuICB2YXIgRVBTID0gMC4wMDAwMDE7XG5cbiAgdmFyIHJvdGF0ZVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbiAgdmFyIHJvdGF0ZUVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gIHZhciByb3RhdGVEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgdmFyIHBhblN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbiAgdmFyIHBhbkVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gIHZhciBwYW5EZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgdmFyIGRvbGx5U3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICB2YXIgZG9sbHlFbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICB2YXIgZG9sbHlEZWx0YSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgdmFyIHBoaURlbHRhID0gMDtcbiAgdmFyIHRoZXRhRGVsdGEgPSAwO1xuICB2YXIgc2NhbGUgPSAxO1xuICB2YXIgcGFuID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuICB2YXIgbGFzdFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuICB2YXIgU1RBVEUgPSB7IE5PTkUgOiAtMSwgUk9UQVRFIDogMCwgRE9MTFkgOiAxLCBQQU4gOiAyLCBUT1VDSF9ST1RBVEUgOiAzLCBUT1VDSF9ET0xMWSA6IDQsIFRPVUNIX1BBTiA6IDUgfTtcbiAgdmFyIHN0YXRlID0gU1RBVEUuTk9ORTtcblxuICAvLyBldmVudHNcblxuICB2YXIgY2hhbmdlRXZlbnQgPSB7IHR5cGU6ICdjaGFuZ2UnIH07XG5cblxuICB0aGlzLnJvdGF0ZUxlZnQgPSBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG4gICAgaWYgKCBhbmdsZSA9PT0gdW5kZWZpbmVkICkge1xuXG4gICAgICBhbmdsZSA9IGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCk7XG5cbiAgICB9XG5cbiAgICB0aGV0YURlbHRhIC09IGFuZ2xlO1xuXG4gIH07XG5cbiAgdGhpcy5yb3RhdGVVcCA9IGZ1bmN0aW9uICggYW5nbGUgKSB7XG5cbiAgICBpZiAoIGFuZ2xlID09PSB1bmRlZmluZWQgKSB7XG5cbiAgICAgIGFuZ2xlID0gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKTtcblxuICAgIH1cblxuICAgIHBoaURlbHRhIC09IGFuZ2xlO1xuXG4gIH07XG5cbiAgLy8gcGFzcyBpbiBkaXN0YW5jZSBpbiB3b3JsZCBzcGFjZSB0byBtb3ZlIGxlZnRcbiAgdGhpcy5wYW5MZWZ0ID0gZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcblxuICAgIHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgIHZhciB0ZSA9IHRoaXMub2JqZWN0Lm1hdHJpeC5lbGVtZW50cztcbiAgICAvLyBnZXQgWCBjb2x1bW4gb2YgbWF0cml4XG4gICAgcGFuT2Zmc2V0LnNldCggdGVbMF0sIHRlWzFdLCB0ZVsyXSApO1xuICAgIHBhbk9mZnNldC5tdWx0aXBseVNjYWxhcigtZGlzdGFuY2UpO1xuXG4gICAgcGFuLmFkZCggcGFuT2Zmc2V0ICk7XG5cbiAgfTtcblxuICAvLyBwYXNzIGluIGRpc3RhbmNlIGluIHdvcmxkIHNwYWNlIHRvIG1vdmUgdXBcbiAgdGhpcy5wYW5VcCA9IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7XG5cbiAgICB2YXIgcGFuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICB2YXIgdGUgPSB0aGlzLm9iamVjdC5tYXRyaXguZWxlbWVudHM7XG4gICAgLy8gZ2V0IFkgY29sdW1uIG9mIG1hdHJpeFxuICAgIHBhbk9mZnNldC5zZXQoIHRlWzRdLCB0ZVs1XSwgdGVbNl0gKTtcbiAgICBwYW5PZmZzZXQubXVsdGlwbHlTY2FsYXIoZGlzdGFuY2UpO1xuXG4gICAgcGFuLmFkZCggcGFuT2Zmc2V0ICk7XG4gIH07XG5cbiAgLy8gbWFpbiBlbnRyeSBwb2ludDsgcGFzcyBpbiBWZWN0b3IyIG9mIGNoYW5nZSBkZXNpcmVkIGluIHBpeGVsIHNwYWNlLFxuICAvLyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcbiAgdGhpcy5wYW4gPSBmdW5jdGlvbiAoIGRlbHRhICkge1xuXG4gICAgdmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cbiAgICBpZiAoIHNjb3BlLm9iamVjdC5mb3YgIT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgLy8gcGVyc3BlY3RpdmVcbiAgICAgIHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcbiAgICAgIHZhciBvZmZzZXQgPSBwb3NpdGlvbi5jbG9uZSgpLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG4gICAgICB2YXIgdGFyZ2V0RGlzdGFuY2UgPSBvZmZzZXQubGVuZ3RoKCk7XG5cbiAgICAgIC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxuICAgICAgdGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oIChzY29wZS5vYmplY3QuZm92LzIpICogTWF0aC5QSSAvIDE4MC4wICk7XG4gICAgICAvLyB3ZSBhY3R1YWxseSBkb24ndCB1c2Ugc2NyZWVuV2lkdGgsIHNpbmNlIHBlcnNwZWN0aXZlIGNhbWVyYSBpcyBmaXhlZCB0byBzY3JlZW4gaGVpZ2h0XG4gICAgICBzY29wZS5wYW5MZWZ0KCAyICogZGVsdGEueCAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcbiAgICAgIHNjb3BlLnBhblVwKCAyICogZGVsdGEueSAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuICAgIH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC50b3AgIT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgLy8gb3J0aG9ncmFwaGljXG4gICAgICBzY29wZS5wYW5MZWZ0KCBkZWx0YS54ICogKHNjb3BlLm9iamVjdC5yaWdodCAtIHNjb3BlLm9iamVjdC5sZWZ0KSAvIGVsZW1lbnQuY2xpZW50V2lkdGggKTtcbiAgICAgIHNjb3BlLnBhblVwKCBkZWx0YS55ICogKHNjb3BlLm9iamVjdC50b3AgLSBzY29wZS5vYmplY3QuYm90dG9tKSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBjYW1lcmEgbmVpdGhlciBvcnRob2dyYXBoaWMgb3IgcGVyc3BlY3RpdmUgLSB3YXJuIHVzZXJcbiAgICAgIGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLmRvbGx5SW4gPSBmdW5jdGlvbiAoIGRvbGx5U2NhbGUgKSB7XG5cbiAgICBpZiAoIGRvbGx5U2NhbGUgPT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgZG9sbHlTY2FsZSA9IGdldFpvb21TY2FsZSgpO1xuXG4gICAgfVxuXG4gICAgc2NhbGUgLz0gZG9sbHlTY2FsZTtcblxuICB9O1xuXG4gIHRoaXMuZG9sbHlPdXQgPSBmdW5jdGlvbiAoIGRvbGx5U2NhbGUgKSB7XG5cbiAgICBpZiAoIGRvbGx5U2NhbGUgPT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgZG9sbHlTY2FsZSA9IGdldFpvb21TY2FsZSgpO1xuXG4gICAgfVxuXG4gICAgc2NhbGUgKj0gZG9sbHlTY2FsZTtcblxuICB9O1xuXG4gIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5vYmplY3QucG9zaXRpb247XG4gICAgdmFyIG9mZnNldCA9IHBvc2l0aW9uLmNsb25lKCkuc3ViKCB0aGlzLnRhcmdldCApO1xuXG4gICAgLy8gYW5nbGUgZnJvbSB6LWF4aXMgYXJvdW5kIHktYXhpc1xuXG4gICAgdmFyIHRoZXRhID0gTWF0aC5hdGFuMiggb2Zmc2V0LngsIG9mZnNldC56ICk7XG5cbiAgICAvLyBhbmdsZSBmcm9tIHktYXhpc1xuXG4gICAgdmFyIHBoaSA9IE1hdGguYXRhbjIoIE1hdGguc3FydCggb2Zmc2V0LnggKiBvZmZzZXQueCArIG9mZnNldC56ICogb2Zmc2V0LnogKSwgb2Zmc2V0LnkgKTtcblxuICAgIGlmICggdGhpcy5hdXRvUm90YXRlICkge1xuXG4gICAgICB0aGlzLnJvdGF0ZUxlZnQoIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkgKTtcblxuICAgIH1cblxuICAgIHRoZXRhICs9IHRoZXRhRGVsdGE7XG4gICAgcGhpICs9IHBoaURlbHRhO1xuXG4gICAgLy8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcbiAgICBwaGkgPSBNYXRoLm1heCggdGhpcy5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggdGhpcy5tYXhQb2xhckFuZ2xlLCBwaGkgKSApO1xuXG4gICAgLy8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZSBFUFMgYW5kIFBJLUVQU1xuICAgIHBoaSA9IE1hdGgubWF4KCBFUFMsIE1hdGgubWluKCBNYXRoLlBJIC0gRVBTLCBwaGkgKSApO1xuXG4gICAgdmFyIHJhZGl1cyA9IG9mZnNldC5sZW5ndGgoKSAqIHNjYWxlO1xuXG4gICAgLy8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcbiAgICByYWRpdXMgPSBNYXRoLm1heCggdGhpcy5taW5EaXN0YW5jZSwgTWF0aC5taW4oIHRoaXMubWF4RGlzdGFuY2UsIHJhZGl1cyApICk7XG5cbiAgICAvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cbiAgICB0aGlzLnRhcmdldC5hZGQoIHBhbiApO1xuXG4gICAgb2Zmc2V0LnggPSByYWRpdXMgKiBNYXRoLnNpbiggcGhpICkgKiBNYXRoLnNpbiggdGhldGEgKTtcbiAgICBvZmZzZXQueSA9IHJhZGl1cyAqIE1hdGguY29zKCBwaGkgKTtcbiAgICBvZmZzZXQueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGkgKSAqIE1hdGguY29zKCB0aGV0YSApO1xuXG4gICAgcG9zaXRpb24uY29weSggdGhpcy50YXJnZXQgKS5hZGQoIG9mZnNldCApO1xuXG4gICAgdGhpcy5vYmplY3QubG9va0F0KCB0aGlzLnRhcmdldCApO1xuXG4gICAgdGhldGFEZWx0YSA9IDA7XG4gICAgcGhpRGVsdGEgPSAwO1xuICAgIHNjYWxlID0gMTtcbiAgICBwYW4uc2V0KDAsMCwwKTtcblxuICAgIGlmICggbGFzdFBvc2l0aW9uLmRpc3RhbmNlVG8oIHRoaXMub2JqZWN0LnBvc2l0aW9uICkgPiAwICkge1xuXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoIGNoYW5nZUV2ZW50ICk7XG5cbiAgICAgIGxhc3RQb3NpdGlvbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xuXG4gICAgfVxuXG4gIH07XG5cblxuICBmdW5jdGlvbiBnZXRBdXRvUm90YXRpb25BbmdsZSgpIHtcblxuICAgIHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFpvb21TY2FsZSgpIHtcblxuICAgIHJldHVybiBNYXRoLnBvdyggMC45NSwgc2NvcGUuem9vbVNwZWVkICk7XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW91c2VEb3duKCBldmVudCApIHtcblxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoIGV2ZW50LmJ1dHRvbiA9PT0gMCApIHtcbiAgICAgIGlmICggc2NvcGUubm9Sb3RhdGUgPT09IHRydWUgKSB7IHJldHVybjsgfVxuXG4gICAgICBzdGF0ZSA9IFNUQVRFLlJPVEFURTtcblxuICAgICAgcm90YXRlU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cbiAgICB9IGVsc2UgaWYgKCBldmVudC5idXR0b24gPT09IDEgKSB7XG4gICAgICBpZiAoIHNjb3BlLm5vWm9vbSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XG5cbiAgICAgIHN0YXRlID0gU1RBVEUuRE9MTFk7XG5cbiAgICAgIGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cbiAgICB9IGVsc2UgaWYgKCBldmVudC5idXR0b24gPT09IDIgKSB7XG4gICAgICBpZiAoIHNjb3BlLm5vUGFuID09PSB0cnVlICkgeyByZXR1cm47IH1cblxuICAgICAgc3RhdGUgPSBTVEFURS5QQU47XG5cbiAgICAgIHBhblN0YXJ0LnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG4gICAgfVxuXG4gICAgLy8gR3JlZ2dtYW4gZml4OiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZ2dtYW4vdGhyZWUuanMvY29tbWl0L2ZkZTlmOTkxN2Q2ZDgzODFmMDZiZjIyY2RmZjc2NjAyOWQxNzYxYmVcbiAgICBzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcbiAgICBzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdXNlTW92ZSggZXZlbnQgKSB7XG5cbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG4gICAgaWYgKCBzdGF0ZSA9PT0gU1RBVEUuUk9UQVRFICkge1xuXG4gICAgICBpZiAoIHNjb3BlLm5vUm90YXRlID09PSB0cnVlICkgcmV0dXJuO1xuXG4gICAgICByb3RhdGVFbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG4gICAgICByb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICk7XG5cbiAgICAgIC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcbiAgICAgIHNjb3BlLnJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuICAgICAgLy8gcm90YXRpbmcgdXAgYW5kIGRvd24gYWxvbmcgd2hvbGUgc2NyZWVuIGF0dGVtcHRzIHRvIGdvIDM2MCwgYnV0IGxpbWl0ZWQgdG8gMTgwXG4gICAgICBzY29wZS5yb3RhdGVVcCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG4gICAgICByb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcblxuICAgIH0gZWxzZSBpZiAoIHN0YXRlID09PSBTVEFURS5ET0xMWSApIHtcblxuICAgICAgaWYgKCBzY29wZS5ub1pvb20gPT09IHRydWUgKSByZXR1cm47XG5cbiAgICAgIGRvbGx5RW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuICAgICAgZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG4gICAgICBpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cbiAgICAgICAgc2NvcGUuZG9sbHlJbigpO1xuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIHNjb3BlLmRvbGx5T3V0KCk7XG5cbiAgICAgIH1cblxuICAgICAgZG9sbHlTdGFydC5jb3B5KCBkb2xseUVuZCApO1xuXG4gICAgfSBlbHNlIGlmICggc3RhdGUgPT09IFNUQVRFLlBBTiApIHtcblxuICAgICAgaWYgKCBzY29wZS5ub1BhbiA9PT0gdHJ1ZSApIHJldHVybjtcblxuICAgICAgcGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuICAgICAgcGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApO1xuXG4gICAgICBzY29wZS5wYW4oIHBhbkRlbHRhICk7XG5cbiAgICAgIHBhblN0YXJ0LmNvcHkoIHBhbkVuZCApO1xuXG4gICAgfVxuXG4gICAgLy8gR3JlZ2dtYW4gZml4OiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZ2dtYW4vdGhyZWUuanMvY29tbWl0L2ZkZTlmOTkxN2Q2ZDgzODFmMDZiZjIyY2RmZjc2NjAyOWQxNzYxYmVcbiAgICBzY29wZS51cGRhdGUoKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3VzZVVwKCAvKiBldmVudCAqLyApIHtcblxuICAgIGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cbiAgICAvLyBHcmVnZ21hbiBmaXg6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVnZ21hbi90aHJlZS5qcy9jb21taXQvZmRlOWY5OTE3ZDZkODM4MWYwNmJmMjJjZGZmNzY2MDI5ZDE3NjFiZVxuICAgIHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuICAgIHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlICk7XG5cbiAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW91c2VXaGVlbCggZXZlbnQgKSB7XG5cbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLm5vWm9vbSA9PT0gdHJ1ZSApIHJldHVybjtcblxuICAgIHZhciBkZWx0YSA9IDA7XG5cbiAgICBpZiAoIGV2ZW50LndoZWVsRGVsdGEgKSB7IC8vIFdlYktpdCAvIE9wZXJhIC8gRXhwbG9yZXIgOVxuXG4gICAgICBkZWx0YSA9IGV2ZW50LndoZWVsRGVsdGE7XG5cbiAgICB9IGVsc2UgaWYgKCBldmVudC5kZXRhaWwgKSB7IC8vIEZpcmVmb3hcblxuICAgICAgZGVsdGEgPSAtIGV2ZW50LmRldGFpbDtcblxuICAgIH1cblxuICAgIGlmICggZGVsdGEgPiAwICkge1xuXG4gICAgICBzY29wZS5kb2xseU91dCgpO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgc2NvcGUuZG9sbHlJbigpO1xuXG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBvbktleURvd24oIGV2ZW50ICkge1xuXG4gICAgaWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHsgcmV0dXJuOyB9XG4gICAgaWYgKCBzY29wZS5ub0tleXMgPT09IHRydWUgKSB7IHJldHVybjsgfVxuICAgIGlmICggc2NvcGUubm9QYW4gPT09IHRydWUgKSB7IHJldHVybjsgfVxuXG4gICAgLy8gcGFuIGEgcGl4ZWwgLSBJIGd1ZXNzIGZvciBwcmVjaXNlIHBvc2l0aW9uaW5nP1xuICAgIC8vIEdyZWdnbWFuIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2dyZWdnbWFuL3RocmVlLmpzL2NvbW1pdC9mZGU5Zjk5MTdkNmQ4MzgxZjA2YmYyMmNkZmY3NjYwMjlkMTc2MWJlXG4gICAgdmFyIG5lZWRVcGRhdGUgPSBmYWxzZTtcblxuICAgIHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cbiAgICAgIGNhc2Ugc2NvcGUua2V5cy5VUDpcbiAgICAgICAgc2NvcGUucGFuKCBuZXcgVEhSRUUuVmVjdG9yMiggMCwgc2NvcGUua2V5UGFuU3BlZWQgKSApO1xuICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHNjb3BlLmtleXMuQk9UVE9NOlxuICAgICAgICBzY29wZS5wYW4oIG5ldyBUSFJFRS5WZWN0b3IyKCAwLCAtc2NvcGUua2V5UGFuU3BlZWQgKSApO1xuICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHNjb3BlLmtleXMuTEVGVDpcbiAgICAgICAgc2NvcGUucGFuKCBuZXcgVEhSRUUuVmVjdG9yMiggc2NvcGUua2V5UGFuU3BlZWQsIDAgKSApO1xuICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHNjb3BlLmtleXMuUklHSFQ6XG4gICAgICAgIHNjb3BlLnBhbiggbmV3IFRIUkVFLlZlY3RvcjIoIC1zY29wZS5rZXlQYW5TcGVlZCwgMCApICk7XG4gICAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBHcmVnZ21hbiBmaXg6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVnZ21hbi90aHJlZS5qcy9jb21taXQvZmRlOWY5OTE3ZDZkODM4MWYwNmJmMjJjZGZmNzY2MDI5ZDE3NjFiZVxuICAgIGlmICggbmVlZFVwZGF0ZSApIHtcblxuICAgICAgc2NvcGUudXBkYXRlKCk7XG5cbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnQoIGV2ZW50ICkge1xuXG4gICAgaWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHsgcmV0dXJuOyB9XG5cbiAgICBzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcblxuICAgICAgY2FzZSAxOlx0Ly8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcbiAgICAgICAgaWYgKCBzY29wZS5ub1JvdGF0ZSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ST1RBVEU7XG5cbiAgICAgICAgcm90YXRlU3RhcnQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlx0Ly8gdHdvLWZpbmdlcmVkIHRvdWNoOiBkb2xseVxuICAgICAgICBpZiAoIHNjb3BlLm5vWm9vbSA9PT0gdHJ1ZSApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgc3RhdGUgPSBTVEFURS5UT1VDSF9ET0xMWTtcblxuICAgICAgICB2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XG4gICAgICAgIHZhciBkeSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuICAgICAgICBkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzogLy8gdGhyZWUtZmluZ2VyZWQgdG91Y2g6IHBhblxuICAgICAgICBpZiAoIHNjb3BlLm5vUGFuID09PSB0cnVlICkgeyByZXR1cm47IH1cblxuICAgICAgICBzdGF0ZSA9IFNUQVRFLlRPVUNIX1BBTjtcblxuICAgICAgICBwYW5TdGFydC5zZXQoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCwgZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmUoIGV2ZW50ICkge1xuXG4gICAgaWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHsgcmV0dXJuOyB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cbiAgICBzd2l0Y2ggKCBldmVudC50b3VjaGVzLmxlbmd0aCApIHtcblxuICAgICAgY2FzZSAxOiAvLyBvbmUtZmluZ2VyZWQgdG91Y2g6IHJvdGF0ZVxuICAgICAgICBpZiAoIHNjb3BlLm5vUm90YXRlID09PSB0cnVlICkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUk9UQVRFICkgeyByZXR1cm47IH1cblxuICAgICAgICByb3RhdGVFbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuICAgICAgICByb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICk7XG5cbiAgICAgICAgLy8gcm90YXRpbmcgYWNyb3NzIHdob2xlIHNjcmVlbiBnb2VzIDM2MCBkZWdyZWVzIGFyb3VuZFxuICAgICAgICBzY29wZS5yb3RhdGVMZWZ0KCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQgKTtcbiAgICAgICAgLy8gcm90YXRpbmcgdXAgYW5kIGRvd24gYWxvbmcgd2hvbGUgc2NyZWVuIGF0dGVtcHRzIHRvIGdvIDM2MCwgYnV0IGxpbWl0ZWQgdG8gMTgwXG4gICAgICAgIHNjb3BlLnJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cbiAgICAgICAgcm90YXRlU3RhcnQuY29weSggcm90YXRlRW5kICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6IC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcbiAgICAgICAgaWYgKCBzY29wZS5ub1pvb20gPT09IHRydWUgKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9ET0xMWSApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdmFyIGR4ID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYIC0gZXZlbnQudG91Y2hlc1sgMSBdLnBhZ2VYO1xuICAgICAgICB2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcblxuICAgICAgICBkb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XG4gICAgICAgIGRvbGx5RGVsdGEuc3ViVmVjdG9ycyggZG9sbHlFbmQsIGRvbGx5U3RhcnQgKTtcblxuICAgICAgICBpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cbiAgICAgICAgICBzY29wZS5kb2xseU91dCgpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBzY29wZS5kb2xseUluKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzogLy8gdGhyZWUtZmluZ2VyZWQgdG91Y2g6IHBhblxuICAgICAgICBpZiAoIHNjb3BlLm5vUGFuID09PSB0cnVlICkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUEFOICkgeyByZXR1cm47IH1cblxuICAgICAgICBwYW5FbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuICAgICAgICBwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cbiAgICAgICAgc2NvcGUucGFuKCBwYW5EZWx0YSApO1xuXG4gICAgICAgIHBhblN0YXJ0LmNvcHkoIHBhbkVuZCApO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RhdGUgPSBTVEFURS5OT05FO1xuXG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZCggLyogZXZlbnQgKi8gKSB7XG5cbiAgICBpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgeyByZXR1cm47IH1cblxuICAgIHN0YXRlID0gU1RBVEUuTk9ORTtcbiAgfVxuXG4gIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbiAoIGV2ZW50ICkgeyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9LCBmYWxzZSApO1xuICB0aGlzLmxvY2FsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG4gIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcbiAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Nb3VzZVNjcm9sbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTsgLy8gZmlyZWZveFxuXG4gIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biwgZmFsc2UgKTtcblxuICB0aGlzLmxvY2FsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIHRvdWNoc3RhcnQsIGZhbHNlICk7XG4gIHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCB0b3VjaGVuZCwgZmFsc2UgKTtcbiAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCB0b3VjaG1vdmUsIGZhbHNlICk7XG5cbn07XG5cblRIUkVFLk9yYml0Q29udHJvbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApOyJdLCJmaWxlIjoibGlicy9vcmJpdENvbnRyb2xzLm1pbi5qcyJ9
