!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof module&&module.exports?module.exports=e():t.anime=e()}(this,()=>{const t={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:"normal",autoplay:!0,offset:0},e={duration:1e3,delay:0,easing:"easeOutElastic",elasticity:500,round:0},n=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skewX","skewY","perspective"];let r;function o(t,e){return t.indexOf(e)>-1}const a={arr:t=>Array.isArray(t),obj:t=>o(Object.prototype.toString.call(t),"Object"),pth:t=>a.obj(t)&&t.hasOwnProperty("totalLength"),svg:t=>t instanceof SVGElement,dom:t=>t.nodeType||a.svg(t),str:t=>"string"==typeof t,fnc:t=>"function"==typeof t,und:t=>void 0===t,hex:t=>/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t),rgb:t=>/^rgb/.test(t),hsl:t=>/^hsl/.test(t),col:t=>a.hex(t)||a.rgb(t)||a.hsl(t)},i=(()=>{const t=11,e=1/(t-1);function n(t,e){return 1-3*e+3*t}function r(t,e){return 3*e-6*t}function o(t){return 3*t}function a(t,e,a){return((n(e,a)*t+r(e,a))*t+o(e))*t}function i(t,e,a){return 3*n(e,a)*t*t+2*r(e,a)*t+o(e)}return function(n,r,o,s){if(!(0<=n&&n<=1&&0<=o&&o<=1))return;let u=new Float32Array(t);if(n!==r||o!==s)for(let r=0;r<t;++r)u[r]=a(r*e,n,o);function c(r){let s=0,c=1;const l=t-1;for(;c!==l&&u[c]<=r;++c)s+=e;const f=s+(r-u[--c])/(u[c+1]-u[c])*e,d=i(f,n,o);return d>=.001?function(t,e,n,r){for(let o=0;o<4;++o){const o=i(e,n,r);if(0===o)return e;e-=(a(e,n,r)-t)/o}return e}(r,f,n,o):0===d?f:function(t,e,n,r,o){let i,s,u=0;do{(i=a(s=e+(n-e)/2,r,o)-t)>0?n=s:e=s}while(Math.abs(i)>1e-7&&++u<10);return s}(r,s,s+e,n,o)}return t=>n===r&&o===s?t:0===t?0:1===t?1:a(c(t),r,s)}})(),s=(()=>{const t=["Quad","Cubic","Quart","Quint","Sine","Expo","Circ","Back","Elastic"];function e(t,e){return 0===t||1===t?t:-Math.pow(2,10*(t-1))*Math.sin((t-1-e/(2*Math.PI)*Math.asin(1))*(2*Math.PI)/e)}const n={In:[[.55,.085,.68,.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],e],Out:[[.25,.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],(t,n)=>1-e(1-t,n)],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],(t,n)=>t<.5?e(2*t,n)/2:1-e(-2*t+2,n)/2]};let r={linear:i(.25,.25,.75,.75)};for(let e in n)n[e].forEach((n,o)=>{r["ease"+e+t[o]]=a.fnc(n)?n:i.apply(this,n)});return r})();function u(t){if(!a.col(t))try{return document.querySelectorAll(t)}catch(t){return}}function c(t,e){const n=t.length,r=arguments.length>=2?arguments[1]:void 0;let o=[];for(let a=0;a<n;a++)if(a in t){const n=t[a];e.call(r,n,a,t)&&o.push(n)}return o}function l(t){return t.reduce((t,e)=>t.concat(a.arr(e)?l(e):e),[])}function f(t){return a.arr(t)?t:(a.str(t)&&(t=u(t)||t),t instanceof NodeList||t instanceof HTMLCollection?[].slice.call(t):[t])}function d(t,e){return t.some(t=>t===e)}function p(t){let e={};for(let n in t)e[n]=t[n];return e}function g(t,e){let n=p(t);for(let r in t)n[r]=e.hasOwnProperty(r)?e[r]:t[r];return n}function h(t,e){let n=p(t);for(let r in e)n[r]=a.und(t[r])?e[r]:t[r];return n}function m(t){return a.rgb(t)?function(t){const e=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(t);return e?`rgba(${e[1]},1)`:t}(t):a.hex(t)?function(t){const e=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(t,e,n,r)=>e+e+n+n+r+r),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return`rgba(${parseInt(n[1],16)},${parseInt(n[2],16)},${parseInt(n[3],16)},1)`}(t):a.hsl(t)?function(t){const e=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(t),n=parseInt(e[1])/360,r=parseInt(e[2])/100,o=parseInt(e[3])/100,a=e[4]||1;function i(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}let s,u,c;if(0==r)s=u=c=o;else{const t=o<.5?o*(1+r):o+r-o*r,e=2*o-t;s=i(e,t,n+1/3),u=i(e,t,n),c=i(e,t,n-1/3)}return`rgba(${255*s},${255*u},${255*c},${a})`}(t):void 0}function y(t){const e=/([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(t);if(e)return e[2]}function b(t,e,n){return Math.min(Math.max(t,e),n)}function x(t,e){return a.fnc(t)?t(e.target,e.id,e.total):t}function v(t,e){if(e in t.style)return getComputedStyle(t).getPropertyValue(e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase())||"0"}function w(t,e){return a.dom(t)&&d(n,e)?"transform":a.dom(t)&&(t.getAttribute(e)||a.svg(t)&&t[e])?"attribute":a.dom(t)&&"transform"!==e&&v(t,e)?"css":null!=t[e]?"object":void 0}function A(t,e){const n=function(t){return o(t,"translate")||"perspective"===t?"px":o(t,"rotate")||o(t,"skew")?"deg":void 0}(e),r=o(e,"scale")?1:0+n,a=t.style.transform;if(!a)return r;let i=[],s=[],u=[];const l=/(\w+)\((.+?)\)/g;for(;i=l.exec(a);)s.push(i[1]),u.push(i[2]);const f=c(u,(t,n)=>s[n]===e);return f.length?f[0]:r}function M(t,e){switch(w(t,e)){case"transform":return A(t,e);case"css":return v(t,e);case"attribute":return t.getAttribute(e)}return t[e]||0}function $(t,e){const n=/^(\*=|\+=|-=)/.exec(t);if(!n)return t;const r=y(t)||0,o=parseFloat(e),a=parseFloat(t.replace(n[0],""));switch(n[0][0]){case"+":return o+a+r;case"-":return o-a+r;case"*":return o*a+r}}function I(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function k(t){const e=t.points;let n,r=0;for(let t=0;t<e.numberOfItems;t++){const o=e.getItem(t);t>0&&(r+=I(n,o)),n=o}return r}function O(t){if(t.getTotalLength)return t.getTotalLength();switch(t.tagName.toLowerCase()){case"circle":return function(t){return 2*Math.PI*t.getAttribute("r")}(t);case"rect":return function(t){return 2*t.getAttribute("width")+2*t.getAttribute("height")}(t);case"line":return function(t){return I({x:t.getAttribute("x1"),y:t.getAttribute("y1")},{x:t.getAttribute("x2"),y:t.getAttribute("y2")})}(t);case"polyline":return k(t);case"polygon":return function(t){const e=t.points;return k(t)+I(e.getItem(e.numberOfItems-1),e.getItem(0))}(t)}}function P(t,e){function n(n=0){const r=e+n>=1?e+n:0;return t.el.getPointAtLength(r)}const r=n(),o=n(-1),a=n(1);switch(t.property){case"x":return r.x;case"y":return r.y;case"angle":return 180*Math.atan2(a.y-o.y,a.x-o.x)/Math.PI}}function j(t,e){const n=/-?\d*\.?\d+/g,r=function(t,e){if(a.col(t))return m(t);const n=y(t),r=n?t.substr(0,t.length-n.length):t;return e&&!/\s/g.test(t)?r+e:r}(a.pth(t)?t.totalLength:t,e)+"";return{original:r,numbers:r.match(n)?r.match(n).map(Number):[0],strings:a.str(t)||e?r.split(n):[]}}function L(t){return c(t?l(a.arr(t)?t.map(f):f(t)):[],(t,e,n)=>n.indexOf(t)===e)}function T(t,e){let n=p(e);if(a.arr(t)){const r=t.length;2===r&&!a.obj(t[0])?t={value:t}:a.fnc(e.duration)||(n.duration=e.duration/r)}return f(t).map((t,n)=>{const r=n?0:e.delay;let o=a.obj(t)&&!a.pth(t)?t:{value:t};return a.und(o.delay)&&(o.delay=r),o}).map(t=>h(t,n))}function C(t,e){let n;return t.tweens.map(r=>{let o=function(t,e){let n={};for(let r in t){let o=x(t[r],e);a.arr(o)&&1===(o=o.map(t=>x(t,e))).length&&(o=o[0]),n[r]=o}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(r,e);const u=o.value,c=M(e.target,t.name),l=n?n.to.original:c,f=a.arr(u)?u[0]:l,d=$(a.arr(u)?u[1]:u,f),p=y(d)||y(f)||y(c);return o.from=j(f,p),o.to=j(d,p),o.start=n?n.end:t.offset,o.end=o.start+o.delay+o.duration,o.easing=function(t){return a.arr(t)?i.apply(this,t):s[t]}(o.easing),o.elasticity=(1e3-b(o.elasticity,1,999))/1e3,o.isPath=a.pth(u),o.isColor=a.col(o.from.original),o.isColor&&(o.round=1),n=o,o})}const F={css:(t,e,n)=>t.style[e]=n,attribute:(t,e,n)=>t.setAttribute(e,n),object:(t,e,n)=>t[e]=n,transform:(t,e,n,r,o)=>{r[o]||(r[o]=[]),r[o].push(`${e}(${n})`)}};function E(t,e){return c(l(t.map(t=>e.map(e=>(function(t,e){const n=w(t.target,e.name);if(n){const r=C(e,t);return{type:n,property:e.name,animatable:t,tweens:r,duration:r[r.length-1].end,delay:r[0].delay}}})(t,e)))),t=>!a.und(t))}function N(t,e,n,r){const o="delay"===t;return e.length?(o?Math.min:Math.max).apply(Math,e.map(e=>e[t])):o?r.delay:n.offset+r.delay+r.duration}function S(n){const r=g(t,n),o=g(e,n),a=function(t){const e=L(t);return e.map((t,n)=>({target:t,id:n,total:e.length}))}(n.targets),i=E(a,function(t,e,n){let r=[];const o=h(t,e);for(let t in n)o.hasOwnProperty(t)||"targets"===t||r.push({name:t,offset:o.offset,tweens:T(n[t],e)});return r}(r,o,n));return h(r,{children:[],animatables:a,animations:i,duration:N("duration",i,r,o),delay:N("delay",i,r,o)})}let V=[],X=0;const Y=(()=>{function t(){X=requestAnimationFrame(e)}function e(e){const n=V.length;if(n){let r=0;for(;r<n;)V[r]&&V[r].tick(e),r++;t()}else cancelAnimationFrame(X),X=0}return t})();function Z(t={}){let e,n,o=0,a=null;function i(){return window.Promise&&new Promise(t=>a=t)}let s=i(),u=S(t);function l(){u.reversed=!u.reversed}function f(t){return u.reversed?u.duration-t:t}function d(t){let e=0,n={};const o=u.animations,a=o.length;for(;e<a;){const r=o[e],a=r.animatable,i=r.tweens,s=i.length-1;let u=i[s];s&&(u=c(i,e=>t<e.end)[0]||u);const l=b(t-u.start-u.delay,0,u.duration)/u.duration,f=isNaN(l)?1:u.easing(l,u.elasticity),d=u.to.strings,p=u.round;let g,h=[];const m=u.to.numbers.length;for(let t=0;t<m;t++){let e;const n=u.to.numbers[t],r=u.from.numbers[t];e=u.isPath?P(u.value,f*n):r+f*(n-r),p&&(u.isColor&&t>2||(e=Math.round(e*p)/p)),h.push(e)}const y=d.length;if(y){g=d[0];for(let t=0;t<y;t++){d[t];const e=d[t+1],n=h[t];isNaN(n)||(g+=e?n+e:n+" ")}}else g=h[0];F[r.type](a.target,r.property,g,n,a.id),r.currentValue=g,e++}const i=Object.keys(n).length;if(i)for(let t=0;t<i;t++){if(!r){const t="transform";r=v(document.body,t)?t:`-webkit-${t}`}u.animatables[t].target.style[r]=n[t].join(" ")}u.currentTime=t,u.progress=t/u.duration*100}function p(t){u[t]&&u[t](u)}function g(){u.remaining&&!0!==u.remaining&&u.remaining--}function h(t){const r=u.duration,c=u.offset,h=c+u.delay,m=u.currentTime,y=u.reversed,b=f(t);u.children.length&&function(t){const e=u.children,n=e.length;if(t>=u.currentTime)for(let r=0;r<n;r++)e[r].seek(t);else for(let r=n;r--;)e[r].seek(t)}(b),(b>=h||!r)&&(u.began||(u.began=!0,p("begin")),p("run")),b>c&&b<r?d(b):(b<=c&&0!==m&&(d(0),y&&g()),(b>=r&&m!==r||!r)&&(d(r),y||g())),p("update"),t>=r&&(u.remaining?(n=e,"alternate"===u.direction&&l()):(u.pause(),u.completed||(u.completed=!0,p("complete"),"Promise"in window&&(a(),s=i()))),o=0)}return u.reset=function(){const t=u.direction,e=u.loop;u.currentTime=0,u.progress=0,u.paused=!0,u.began=!1,u.completed=!1,u.reversed="reverse"===t,u.remaining="alternate"===t&&1===e?2:e,d(0);for(let t=u.children.length;t--;)u.children[t].reset()},u.tick=function(t){e=t,n||(n=e),h((o+e-n)*Z.speed)},u.seek=function(t){h(f(t))},u.pause=function(){const t=V.indexOf(u);t>-1&&V.splice(t,1),u.paused=!0},u.play=function(){u.paused&&(u.paused=!1,n=0,o=f(u.currentTime),V.push(u),X||Y())},u.reverse=function(){l(),n=0,o=f(u.currentTime)},u.restart=function(){u.pause(),u.reset(),u.play()},u.finished=s,u.reset(),u.autoplay&&u.play(),u}return Z.version="2.2.0",Z.speed=1,Z.running=V,Z.remove=function(t){const e=L(t);for(let t=V.length;t--;){const n=V[t],r=n.animations;for(let t=r.length;t--;)d(e,r[t].animatable.target)&&(r.splice(t,1),r.length||n.pause())}},Z.getValue=M,Z.path=function(t,e){const n=a.str(t)?u(t)[0]:t,r=e||100;return function(t){return{el:n,property:t,totalLength:O(n)*(r/100)}}},Z.setDashoffset=function(t){const e=O(t);return t.setAttribute("stroke-dasharray",e),e},Z.bezier=i,Z.easings=s,Z.timeline=function(t){let n=Z(t);return n.pause(),n.duration=0,n.add=function(r){return n.children.forEach(t=>{t.began=!0,t.completed=!0}),f(r).forEach(r=>{let o=h(r,g(e,t||{}));o.targets=o.targets||t.targets;const i=n.duration,s=o.offset;o.autoplay=!1,o.direction=n.direction,o.offset=a.und(s)?i:$(s,i),n.began=!0,n.completed=!0,n.seek(o.offset);const u=Z(o);u.began=!0,u.completed=!0,u.duration>i&&(n.duration=u.duration),n.children.push(u)}),n.seek(0),n.reset(),n.autoplay&&n.restart(),n},n},Z.random=((t,e)=>Math.floor(Math.random()*(e-t+1))+t),Z});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
