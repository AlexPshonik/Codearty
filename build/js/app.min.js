var mContainer,mCamera,mRenderer,mControls,mScene;$(document).ready(function(){var t=$("body").translate({lang:"en",t:{"We build digital<br>products &amp; services":{ru:"Мы разрабатываем <br>цифровые продукты и сервисы"},"We turn technologies and design into a solution for your business":{ru:"Превращаем технологии и дизайн в решения для Вашего бизнеса"},"Start the project":{ru:"Запустить проект"},"Hello CodeArty":{ru:"Привет CodeArty"},"Discuss your project":{ru:"Обсудить проект"},"Go ahead, great things start with filling out this contact form":{ru:"Крутые проекты начинаются с заполнения этой формы"},"Your name":{ru:"Имя"},"Email address":{ru:"Email"},"Phone (optional)":{ru:"Телефон (необязательно)"},Company:{ru:"Компания"},"Tell us about your idea":{ru:"Расскажите о своей идее"},Submit:{ru:"Оставить заявку"}}});$(".lang-sw__select").change(function(){$("option:selected").each(function(){var e=$(this).attr("data-value");t.lang(e)})}),$("form").submit(function(){var t=$(this);return $.ajax({type:"POST",url:"../mail.php",data:t.serialize()}).done(function(){alert("Thank you!"),setTimeout(function(){t.trigger("reset")},1e3)}),!1})}),$(".js-show-popup").on("click",function(){$("#homepage-bg-animation").css("display","none"),anime({targets:".pop-up",translateY:0,opacity:1,easing:"linear",duration:350}),anime({targets:".pop-up__bg",opacity:1,easing:"linear",duration:300,delay:500}),anime({targets:[".pop-up__title",".pop-up__subtitle"],opacity:1,easing:"linear",duration:200,delay:800}),anime({targets:".list-form .list-form__field",translateY:0,opacity:1,easing:"linear",duration:400,delay:700}),anime({targets:".list-form .btn",opacity:1,easing:"linear",duration:400,delay:1100})}),$(".js-popup-close").on("click",function(){$("#homepage-bg-animation").css("display","block"),anime({targets:".pop-up",translateY:"100%",opacity:0,easing:"linear",delay:600,duration:200}),anime({targets:[".pop-up__title",".pop-up__subtitle"],opacity:0,easing:"linear",duration:200}),anime({targets:".list-form .list-form__field",opacity:0,easing:"linear",duration:300}),anime({targets:".list-form .btn",opacity:0,easing:"linear",duration:300})}),$(document).ready(function(){$(".pop-up").css("opacity","1"),$([".pop-up__title",".pop-up__subtitle",".list-form .list-form__field",".list-form .btn"].join(", ")).css("opacity","0")}),$(document).ready(function(){$(".list-form .list-form__label").each(function(){$(this).css("transform","translateY(12px)"),$(this).css("font-size","14px")})}),$(".list-form .list-form__input").focus(function(){$(this).parent().addClass("focused"),anime({targets:".list-form__field.focused .list-form__label",translateY:"-12px",fontSize:12,easing:"linear",duration:200})}),$(".list-form .list-form__input").focusout(function(){$(this).val()?$(this).parent().addClass("fill"):(anime({targets:".list-form__field.focused .list-form__label",translateY:"14px",fontSize:16,easing:"linear",duration:200}),$(this).parent().hasClass("fill")&&$(this).parent().removeClass("fill")),$(this).parent().removeClass("focused")});var mParticleSystem,mParticleCount=8e3,mTime=0,mTimeStep=1/270,mDuration=20;function init(){initTHREE(),initControls(),initParticleSystem(),requestAnimationFrame(tick),window.addEventListener("resize",resize,!1)}function initTHREE(){var t;(mRenderer=new THREE.WebGLRenderer({antialias:!0})).setSize($(".wrapper").width(),$(".wrapper").height()),mRenderer.setClearColor(3166206),(mContainer=document.getElementById("homepage-bg-animation")).appendChild(mRenderer.domElement),(mCamera=new THREE.PerspectiveCamera(60,$(".wrapper").width()/$(".wrapper").height(),.1,5e3)).position.set(-1300,0,0),mScene=new THREE.Scene,t=new THREE.AmbientLight(16777215),mScene.add(t)}function initControls(){(mControls=new THREE.OrbitControls(mCamera,mRenderer.domElement)).enabled=!1}function initParticleSystem(){var t=new THREE.PlaneGeometry(4,4),e=new THREE.BAS.PrefabBufferGeometry(t,mParticleCount);e.computeVertexNormals();var r,a,n,o,i,s,u,l=e.createAttribute("aOffset",1),m=e.createAttribute("aStartPosition",3),f=e.createAttribute("aControlPoint1",3),c=e.createAttribute("aControlPoint2",3),h=e.createAttribute("aEndPosition",3),E=e.createAttribute("aAxisAngle",4),p=e.createAttribute("color",3);for(r=0,n=0;r<mParticleCount;r++)for(o=r/mParticleCount*mDuration,a=0;a<t.vertices.length;a++)l.array[n++]=o;for(r=0,n=0;r<mParticleCount;r++)for(i=0,s=1e3,u=0,a=0;a<t.vertices.length;a++)m.array[n++]=i,m.array[n++]=s,m.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(400,600),u=THREE.Math.randFloat(-1800,-400),a=0;a<t.vertices.length;a++)f.array[n++]=i,f.array[n++]=s,f.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(-600,-400),u=THREE.Math.randFloat(400,1800),a=0;a<t.vertices.length;a++)c.array[n++]=i,c.array[n++]=s,c.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=0,s=-1e3,u=0,a=0;a<t.vertices.length;a++)h.array[n++]=i,h.array[n++]=s,h.array[n++]=u;var d=new THREE.Vector3,y=0;for(r=0,n=0;r<mParticleCount;r++)for(d.x=THREE.Math.randFloatSpread(2),d.y=THREE.Math.randFloatSpread(2),d.z=THREE.Math.randFloatSpread(2),d.normalize(),y=Math.PI*THREE.Math.randInt(16,32),a=0;a<t.vertices.length;a++)E.array[n++]=d.x,E.array[n++]=d.y,E.array[n++]=d.z,E.array[n++]=y;var T=new THREE.Color;for(r=0,n=0;r<mParticleCount;r++)for(0,0,0,T.setHSL(0,0,0),a=0;a<t.vertices.length;a++)p.array[n++]=T.r,p.array[n++]=T.g,p.array[n++]=T.b;var v=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.FlatShading,side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uDuration:{type:"f",value:mDuration}},shaderFunctions:[THREE.BAS.ShaderChunk.quaternion_rotation,THREE.BAS.ShaderChunk.cubic_bezier],shaderParameters:["uniform float uTime;","uniform float uDuration;","attribute float aOffset;","attribute vec3 aStartPosition;","attribute vec3 aControlPoint1;","attribute vec3 aControlPoint2;","attribute vec3 aEndPosition;","attribute vec4 aAxisAngle;"],shaderVertexInit:["float tProgress = mod((uTime + aOffset), uDuration) / uDuration;","float angle = aAxisAngle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);"],shaderTransformNormal:["objectNormal = rotateVector(tQuat, objectNormal);"],shaderTransformPosition:["transformed = rotateVector(tQuat, transformed);","transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);"]},{specular:16711680,shininess:20});(mParticleSystem=new THREE.Mesh(e,v)).frustumCulled=!1,mScene.add(mParticleSystem)}function tick(){update(),render(),mTime+=mTimeStep,mTime%=mDuration,requestAnimationFrame(tick)}function update(){mControls.update(),mParticleSystem.material.uniforms.uTime.value=mTime}function render(){mRenderer.render(mScene,mCamera)}function resize(){let t=$(".wrapper").width(),e=$(".wrapper").height();mCamera.aspect=t/e,mCamera.updateProjectionMatrix(),mRenderer.setSize(t,e)}window.onload=function(){init()},THREE.BAS={},THREE.BAS.ShaderChunk={},THREE.BAS.ShaderChunk.animation_time="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n",THREE.BAS.ShaderChunk.cubic_bezier="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n",THREE.BAS.ShaderChunk.ease_in_cubic="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_quad="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_out_cubic="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n",THREE.BAS.ShaderChunk.quaternion_rotation="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n",THREE.BAS.PrefabBufferGeometry=function(t,e){THREE.BufferGeometry.call(this),this.prefabGeometry=t,this.prefabCount=e,this.prefabVertexCount=t.vertices.length,this.bufferDefaults()},THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry,THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){for(var t=this.prefabGeometry.faces.length,e=3*this.prefabGeometry.faces.length,r=this.prefabVertexCount=this.prefabGeometry.vertices.length,a=[],n=0;n<t;n++){var o=this.prefabGeometry.faces[n];a.push(o.a,o.b,o.c)}var i=new Uint32Array(this.prefabCount*e),s=new Float32Array(this.prefabCount*r*3);this.setIndex(new THREE.BufferAttribute(i,1)),this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var u=0,l=0;u<this.prefabCount;u++){for(var m=0;m<r;m++,l+=3){var f=this.prefabGeometry.vertices[m];s[l]=f.x,s[l+1]=f.y,s[l+2]=f.z}for(var c=0;c<e;c++)i[u*e+c]=a[c]+u*r}},THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var t=this.index,e=this.attributes,r=e.position.array;void 0===e.normal&&this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3));for(var a,n,o,i=e.normal.array,s=new THREE.Vector3,u=new THREE.Vector3,l=new THREE.Vector3,m=new THREE.Vector3,f=new THREE.Vector3,c=t.array,h=3*this.prefabGeometry.faces.length,E=0;E<h;E+=3)a=3*c[E+0],n=3*c[E+1],o=3*c[E+2],s.fromArray(r,a),u.fromArray(r,n),l.fromArray(r,o),m.subVectors(l,u),f.subVectors(s,u),m.cross(f),i[a]+=m.x,i[a+1]+=m.y,i[a+2]+=m.z,i[n]+=m.x,i[n+1]+=m.y,i[n+2]+=m.z,i[o]+=m.x,i[o+1]+=m.y,i[o+2]+=m.z;for(var p=1;p<this.prefabCount;p++)for(var d=0;d<h;d++)i[p*h+d]=i[d];this.normalizeNormals(),e.normal.needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(t,e){var r=new Float32Array(this.prefabCount*this.prefabVertexCount*e),a=new THREE.BufferAttribute(r,e);return this.addAttribute(t,a),a},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z,o[n++]=i.w}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<this.prefabCount;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.BaseAnimationMaterial=function(t){THREE.ShaderMaterial.call(this),this.shaderFunctions=[],this.shaderParameters=[],this.shaderVertexInit=[],this.shaderTransformNormal=[],this.shaderTransformPosition=[],this.setValues(t)},THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial,THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""},THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shaderFunctions.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shaderParameters.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shaderVertexInit.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shaderTransformNormal.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shaderTransformPosition.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(t){for(var e in t)if(e in this.uniforms){var r=this.uniforms[e],a=t[e];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":r.value=a}}},THREE.BAS.PhongAnimationMaterial=function(t,e){THREE.BAS.BaseAnimationMaterial.call(this,t);var r=THREE.ShaderLib.phong;this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]),this.lights=!0,this.vertexShader=this._concatVertexShader(),this.fragmentShader=r.fragmentShader,e.map&&(this.defines.USE_MAP=""),e.normalMap&&(this.defines.USE_NORMALMAP=""),this.setUniformValues(e)},THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype),THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial,THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,this._concatTransformNormal(),THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,this._concatTransformPosition(),THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJtQ29udGFpbmVyIiwibUNhbWVyYSIsIm1SZW5kZXJlciIsIm1Db250cm9scyIsIm1TY2VuZSIsIiQiLCJkb2N1bWVudCIsInJlYWR5IiwidHJhbnNsYXRvciIsInRyYW5zbGF0ZSIsImxhbmciLCJ0IiwiV2UgYnVpbGQgZGlnaXRhbDxicj5wcm9kdWN0cyAmYW1wOyBzZXJ2aWNlcyIsInJ1IiwiV2UgdHVybiB0ZWNobm9sb2dpZXMgYW5kIGRlc2lnbiBpbnRvIGEgc29sdXRpb24gZm9yIHlvdXIgYnVzaW5lc3MiLCJTdGFydCB0aGUgcHJvamVjdCIsIkhlbGxvIENvZGVBcnR5IiwiRGlzY3VzcyB5b3VyIHByb2plY3QiLCJHbyBhaGVhZCwgZ3JlYXQgdGhpbmdzIHN0YXJ0IHdpdGggZmlsbGluZyBvdXQgdGhpcyBjb250YWN0IGZvcm0iLCJZb3VyIG5hbWUiLCJFbWFpbCBhZGRyZXNzIiwiUGhvbmUgKG9wdGlvbmFsKSIsIkNvbXBhbnkiLCJUZWxsIHVzIGFib3V0IHlvdXIgaWRlYSIsIlN1Ym1pdCIsImNoYW5nZSIsImVhY2giLCJ0aGlzIiwiYXR0ciIsInN1Ym1pdCIsInRoIiwiYWpheCIsInR5cGUiLCJ1cmwiLCJkYXRhIiwic2VyaWFsaXplIiwiZG9uZSIsImFsZXJ0Iiwic2V0VGltZW91dCIsInRyaWdnZXIiLCJvbiIsImNzcyIsImFuaW1lIiwidGFyZ2V0cyIsInRyYW5zbGF0ZVkiLCJvcGFjaXR5IiwiZWFzaW5nIiwiZHVyYXRpb24iLCJkZWxheSIsImpvaW4iLCJmb2N1cyIsInBhcmVudCIsImFkZENsYXNzIiwiZm9udFNpemUiLCJmb2N1c291dCIsInZhbCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJtUGFydGljbGVTeXN0ZW0iLCJtUGFydGljbGVDb3VudCIsIm1UaW1lIiwibVRpbWVTdGVwIiwibUR1cmF0aW9uIiwiaW5pdCIsImluaXRUSFJFRSIsImluaXRDb250cm9scyIsImluaXRQYXJ0aWNsZVN5c3RlbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRpY2siLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVzaXplIiwibGlnaHQiLCJUSFJFRSIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJzZXRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJzZXRDbGVhckNvbG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInBvc2l0aW9uIiwic2V0IiwiU2NlbmUiLCJBbWJpZW50TGlnaHQiLCJhZGQiLCJPcmJpdENvbnRyb2xzIiwiZW5hYmxlZCIsInByZWZhYkdlb21ldHJ5IiwiUGxhbmVHZW9tZXRyeSIsImJ1ZmZlckdlb21ldHJ5IiwiQkFTIiwiUHJlZmFiQnVmZmVyR2VvbWV0cnkiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsImkiLCJqIiwib2Zmc2V0IiwieCIsInkiLCJ6IiwiYU9mZnNldCIsImNyZWF0ZUF0dHJpYnV0ZSIsImFTdGFydFBvc2l0aW9uIiwiYUNvbnRyb2xQb2ludDEiLCJhQ29udHJvbFBvaW50MiIsImFFbmRQb3NpdGlvbiIsImFBeGlzQW5nbGUiLCJhQ29sb3IiLCJ2ZXJ0aWNlcyIsImxlbmd0aCIsImFycmF5IiwiTWF0aCIsInJhbmRGbG9hdCIsImF4aXMiLCJWZWN0b3IzIiwiYW5nbGUiLCJyYW5kRmxvYXRTcHJlYWQiLCJub3JtYWxpemUiLCJQSSIsInJhbmRJbnQiLCJjb2xvciIsIkNvbG9yIiwic2V0SFNMIiwiciIsImciLCJiIiwibWF0ZXJpYWwiLCJQaG9uZ0FuaW1hdGlvbk1hdGVyaWFsIiwidmVydGV4Q29sb3JzIiwiVmVydGV4Q29sb3JzIiwic2hhZGluZyIsIkZsYXRTaGFkaW5nIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJ1bmlmb3JtcyIsInVUaW1lIiwidmFsdWUiLCJ1RHVyYXRpb24iLCJzaGFkZXJGdW5jdGlvbnMiLCJTaGFkZXJDaHVuayIsInNoYWRlclBhcmFtZXRlcnMiLCJzaGFkZXJWZXJ0ZXhJbml0Iiwic2hhZGVyVHJhbnNmb3JtTm9ybWFsIiwic2hhZGVyVHJhbnNmb3JtUG9zaXRpb24iLCJzcGVjdWxhciIsInNoaW5pbmVzcyIsIk1lc2giLCJmcnVzdHVtQ3VsbGVkIiwidXBkYXRlIiwicmVuZGVyIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsIm9ubG9hZCIsInByZWZhYiIsImNvdW50IiwiQnVmZmVyR2VvbWV0cnkiLCJjYWxsIiwicHJlZmFiQ291bnQiLCJwcmVmYWJWZXJ0ZXhDb3VudCIsImJ1ZmZlckRlZmF1bHRzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJwcmVmYWJGYWNlQ291bnQiLCJmYWNlcyIsInByZWZhYkluZGV4Q291bnQiLCJwcmVmYWJJbmRpY2VzIiwiaCIsImZhY2UiLCJwdXNoIiwiYSIsImMiLCJpbmRleEJ1ZmZlciIsIlVpbnQzMkFycmF5IiwicG9zaXRpb25CdWZmZXIiLCJGbG9hdDMyQXJyYXkiLCJzZXRJbmRleCIsIkJ1ZmZlckF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZSIsInByZWZhYlZlcnRleCIsImsiLCJpbmRleCIsImF0dHJpYnV0ZXMiLCJwb3NpdGlvbnMiLCJ1bmRlZmluZWQiLCJub3JtYWwiLCJ2QSIsInZCIiwidkMiLCJub3JtYWxzIiwicEEiLCJwQiIsInBDIiwiY2IiLCJhYiIsImluZGljZXMiLCJmcm9tQXJyYXkiLCJzdWJWZWN0b3JzIiwiY3Jvc3MiLCJub3JtYWxpemVOb3JtYWxzIiwibmVlZHNVcGRhdGUiLCJuYW1lIiwiaXRlbVNpemUiLCJidWZmZXIiLCJhdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGU0IiwiZ2VvbWV0cnkiLCJ2IiwidyIsInNldEF0dHJpYnV0ZTMiLCJzZXRBdHRyaWJ1dGUyIiwiQmFzZUFuaW1hdGlvbk1hdGVyaWFsIiwicGFyYW1ldGVycyIsIlNoYWRlck1hdGVyaWFsIiwic2V0VmFsdWVzIiwiX2NvbmNhdFZlcnRleFNoYWRlciIsIl9jb25jYXRGdW5jdGlvbnMiLCJfY29uY2F0UGFyYW1ldGVycyIsIl9jb25jYXRWZXJ0ZXhJbml0IiwiX2NvbmNhdFRyYW5zZm9ybU5vcm1hbCIsIl9jb25jYXRUcmFuc2Zvcm1Qb3NpdGlvbiIsInNldFVuaWZvcm1WYWx1ZXMiLCJ2YWx1ZXMiLCJrZXkiLCJ1bmlmb3JtIiwiY29weSIsInVuaWZvcm1WYWx1ZXMiLCJwaG9uZ1NoYWRlciIsIlNoYWRlckxpYiIsIlVuaWZvcm1zVXRpbHMiLCJtZXJnZSIsImxpZ2h0cyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibWFwIiwiZGVmaW5lcyIsIm5vcm1hbE1hcCJdLCJtYXBwaW5ncyI6IkFBaUxBLElBQUlBLFdBQ0FDLFFBQVNDLFVBQ1RDLFVBQ0FDLE9BbkxKQyxFQUFFQyxVQUFVQyxNQUFNLFdBQ2hCLElBdUNJQyxFQUFhSCxFQUFFLFFBQVFJLFVBQVUsQ0FBQ0MsS0FBTSxLQUFNQyxFQXZDdkMsQ0FDVEMsOENBQWdELENBQzlDQyxHQUFJLG9EQUVOQyxvRUFBc0UsQ0FDcEVELEdBQUksK0RBRU5FLG9CQUFxQixDQUNuQkYsR0FBSSxvQkFFTkcsaUJBQWtCLENBQ2hCSCxHQUFJLG1CQUVOSSx1QkFBd0IsQ0FDdEJKLEdBQUksbUJBRU5LLGtFQUFtRSxDQUNqRUwsR0FBSSxxREFFTk0sWUFBYSxDQUNYTixHQUFJLE9BRU5PLGdCQUFpQixDQUNmUCxHQUFJLFNBRU5RLG1CQUFvQixDQUNsQlIsR0FBSSwyQkFFTlMsUUFBVyxDQUNUVCxHQUFJLFlBRU5VLDBCQUEyQixDQUN6QlYsR0FBSSwyQkFFTlcsT0FBVSxDQUNSWCxHQUFJLHNCQUtSUixFQUFFLG9CQUFvQm9CLE9BQU8sV0FDM0JwQixFQUFHLG1CQUFvQnFCLEtBQUssV0FDMUIsSUFBSWhCLEVBQU9MLEVBQUVzQixNQUFNQyxLQUFLLGNBQ3hCcEIsRUFBV0UsS0FBS0EsT0FLckJMLEVBQUUsUUFBUXdCLE9BQU8sV0FDaEIsSUFBSUMsRUFBS3pCLEVBQUVzQixNQVlYLE9BWEF0QixFQUFFMEIs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QU1xRSxZQUF3Qyx5QkFDOUNyRSxNQUFNcUUsWUFBaUMsa0JBQ3ZDckUsTUFBTXFFLFlBQXVDLHdCQUM3Q3JFLE1BQU1xRSxZQUFvQyxxQkFDMUNyRSxNQUFNcUUsWUFBcUMsc0JBQzNDckUsTUFBTXFFLFlBQXVDLHdCQUU3Q25ILEtBQUtpTSxtQkFFTGpNLEtBQUtrTSxvQkFFTCxnQkFFQWxNLEtBQUttTSxvQkFFTHJKLE1BQU1xRSxZQUF5QixVQUMvQnJFLE1BQU1xRSxZQUEwQixXQUNoQ3JFLE1BQU1xRSxZQUE0QixhQUNsQ3JFLE1BQU1xRSxZQUFrQyxtQkFFeENuSCxLQUFLb00seUJBRUx0SixNQUFNcUUsWUFBa0MsbUJBQ3hDckUsTUFBTXFFLFlBQStCLGdCQUNyQ3JFLE1BQU1xRSxZQUFpQyxrQkFDdkNyRSxNQUFNcUUsWUFBb0MscUJBRTFDLHNCQUVBLDhDQUVBLFNBRUFyRSxNQUFNcUUsWUFBNEIsYUFFbENuSCxLQUFLcU0sMkJBRUx2SixNQUFNcUUsWUFBc0MsdUJBQzVDckUsTUFBTXFFLFlBQWtDLG1CQUN4Q3JFLE1BQU1xRSxZQUErQixnQkFDckNyRSxNQUFNcUUsWUFBOEIsZUFDcENyRSxNQUFNcUUsWUFBa0MsbUJBRXhDLHNDQUVBckUsTUFBTXFFLFlBQStCLGdCQUNyQ3JFLE1BQU1xRSxZQUE2QixjQUNuQ3JFLE1BQU1xRSxZQUFtQyxvQkFDekNyRSxNQUFNcUUsWUFBZ0MsaUJBRXRDLEtBRUE3RixLQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVHJhbnNsYXRpb25cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XG4gIHZhciBkaWN0ID0ge1xuICAgIFwiV2UgYnVpbGQgZGlnaXRhbDxicj5wcm9kdWN0cyAmYW1wOyBzZXJ2aWNlc1wiIDoge1xuICAgICAgcnU6IFwi0JzRiyDRgNCw0LfRgNCw0LHQsNGC0YvQstCw0LXQvCA8YnI+0YbQuNGE0YDQvtCy0YvQtSDQv9GA0L7QtNGD0LrRgtGLINC4INGB0LXRgNCy0LjRgdGLXCJcbiAgICB9LFxuICAgIFwiV2UgdHVybiB0ZWNobm9sb2dpZXMgYW5kIGRlc2lnbiBpbnRvIGEgc29sdXRpb24gZm9yIHlvdXIgYnVzaW5lc3NcIiA6IHtcbiAgICAgIHJ1OiBcItCf0YDQtdCy0YDQsNGJ0LDQtdC8INGC0LXRhdC90L7Qu9C+0LPQuNC4INC4INC00LjQt9Cw0LnQvSDQsiDRgNC10YjQtdC90LjRjyDQtNC70Y8g0JLQsNGI0LXQs9C+INCx0LjQt9C90LXRgdCwXCJcbiAgICB9LFxuICAgIFwiU3RhcnQgdGhlIHByb2plY3RcIjoge1xuICAgICAgcnU6IFwi0JfQsNC/0YPRgdGC0LjRgtGMINC/0YDQvtC10LrRglwiXG4gICAgfSxcbiAgICBcIkhlbGxvIENvZGVBcnR5XCI6IHtcbiAgICAgIHJ1OiBcItCf0YDQuNCy0LXRgiBDb2RlQXJ0eVwiXG4gICAgfSxcbiAgICBcIkRpc2N1c3MgeW91ciBwcm9qZWN0XCI6IHtcbiAgICAgIHJ1OiBcItCe0LHRgdGD0LTQuNGC0Ywg0L/RgNC+0LXQutGCXCJcbiAgICB9LFxuICAgIFwiR28gYWhlYWQsIGdyZWF0IHRoaW5ncyBzdGFydCB3aXRoIGZpbGxpbmcgb3V0IHRoaXMgY29udGFjdCBmb3JtXCI6IHtcbiAgICAgIHJ1OiBcItCa0YDRg9GC0YvQtSDQv9GA0L7QtdC60YLRiyDQvdCw0YfQuNC90LDRjtGC0YHRjyDRgSDQt9Cw0L/QvtC70L3QtdC90LjRjyDRjdGC0L7QuSDRhNC+0YDQvNGLXCJcbiAgICB9LFxuICAgIFwiWW91ciBuYW1lXCI6IHtcbiAgICAgIHJ1OiBcItCY0LzRj1wiXG4gICAgfSxcbiAgICBcIkVtYWlsIGFkZHJlc3NcIjoge1xuICAgICAgcnU6IFwiRW1haWxcIlxuICAgIH0sXG4gICAgXCJQaG9uZSAob3B0aW9uYWwpXCI6IHtcbiAgICAgIHJ1OiBcItCi0LXQu9C10YTQvtC9ICjQvdC10L7QsdGP0LfQsNGC0LXQu9GM0L3QvilcIlxuICAgIH0sXG4gICAgXCJDb21wYW55XCI6IHtcbiAgICAgIHJ1OiBcItCa0L7QvNC/0LDQvdC40Y9cIlxuICAgIH0sXG4gICAgXCJUZWxsIHVzIGFib3V0IHlvdXIgaWRlYVwiOiB7XG4gICAgICBydTogXCLQoNCw0YHRgdC60LDQttC40YLQtSDQviDRgdCy0L7QtdC5INC40LTQtdC1XCJcbiAgICB9LFxuICAgIFwiU3VibWl0XCI6IHtcbiAgICAgIHJ1OiBcItCe0YHRgtCw0LLQuNGC0Ywg0LfQsNGP0LLQutGDXCJcbiAgICB9XG4gIH1cblxuICB2YXIgdHJhbnNsYXRvciA9ICQoJ2JvZHknKS50cmFuc2xhdGUoe2xhbmc6IFwiZW5cIiwgdDogZGljdH0pO1xuICAkKCcubGFuZy1zd19fc2VsZWN0JykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICQoIFwib3B0aW9uOnNlbGVjdGVkXCIgKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxhbmcgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLXZhbHVlXCIpO1xuICAgICAgdHJhbnNsYXRvci5sYW5nKGxhbmcpO1xuICAgIH0pO1xuICB9KTtcblxuICAvL0UtbWFpbCBBamF4IFNlbmRcblx0JChcImZvcm1cIikuc3VibWl0KGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aCA9ICQodGhpcyk7XG5cdFx0JC5hamF4KHtcblx0XHRcdHR5cGU6IFwiUE9TVFwiLFxuXHRcdFx0dXJsOiBcIi4uL21haWwucGhwXCIsXG5cdFx0XHRkYXRhOiB0aC5zZXJpYWxpemUoKVxuXHRcdH0pLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRhbGVydChcIlRoYW5rIHlvdSFcIik7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBEb25lIEZ1bmN0aW9uc1xuXHRcdFx0XHR0aC50cmlnZ2VyKFwicmVzZXRcIik7XG5cdFx0XHR9LCAxMDAwKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0pO1xufSk7XG5cbi8vIFBvcHVwIGFuaW1hdGlvblxuJCgnLmpzLXNob3ctcG9wdXAnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICQoJyNob21lcGFnZS1iZy1hbmltYXRpb24nKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICBhbmltZSh7XG4gICAgdGFyZ2V0czogJy5wb3AtdXAnLFxuICAgIHRyYW5zbGF0ZVk6IDAsXG4gICAgb3BhY2l0eTogMSxcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgIGR1cmF0aW9uOiAzNTBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLnBvcC11cF9fYmcnLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICBkdXJhdGlvbjogMzAwLFxuICAgIGRlbGF5OiA1MDBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiBbJy5wb3AtdXBfX3RpdGxlJywgJy5wb3AtdXBfX3N1YnRpdGxlJ10sXG4gICAgb3BhY2l0eTogMSxcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgIGR1cmF0aW9uOiAyMDAsXG4gICAgZGVsYXk6IDgwMFxuICB9KTtcbiAgYW5pbWUoe1xuICAgIHRhcmdldHM6ICcubGlzdC1mb3JtIC5saXN0LWZvcm1fX2ZpZWxkJyxcbiAgICB0cmFuc2xhdGVZOiAwLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICBkdXJhdGlvbjogNDAwLFxuICAgIGRlbGF5OiA3MDBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAuYnRuJyxcbiAgICBvcGFjaXR5OiAxLFxuICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgZHVyYXRpb246IDQwMCxcbiAgICBkZWxheTogMTEwMFxuICB9KTtcbn0pO1xuJCgnLmpzLXBvcHVwLWNsb3NlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAkKCcjaG9tZXBhZ2UtYmctYW5pbWF0aW9uJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLnBvcC11cCcsXG4gICAgdHJhbnNsYXRlWTogJzEwMCUnLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICBkZWxheTogNjAwLFxuICAgIGR1cmF0aW9uOiAyMDBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiBbJy5wb3AtdXBfX3RpdGxlJywgJy5wb3AtdXBfX3N1YnRpdGxlJ10sXG4gICAgb3BhY2l0eTogMCxcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgIGR1cmF0aW9uOiAyMDBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19maWVsZCcsXG4gICAgb3BhY2l0eTogMCxcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgIGR1cmF0aW9uOiAzMDBcbiAgfSk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAuYnRuJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgZHVyYXRpb246IDMwMFxuICB9KTtcbn0pO1xuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAkKCcucG9wLXVwJykuY3NzKCdvcGFjaXR5JywgJzEnKTtcbiAgJChbJy5wb3AtdXBfX3RpdGxlJywgJy5wb3AtdXBfX3N1YnRpdGxlJywgJy5saXN0LWZvcm0gLmxpc3QtZm9ybV9fZmllbGQnLCAnLmxpc3QtZm9ybSAuYnRuJ10uam9pbihcIiwgXCIpKS5jc3MoJ29wYWNpdHknLCAnMCcpO1xufSk7XG4vLyBGaWVsZCBsYWJlbCBhbmltYXRpb25cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgJCgnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19sYWJlbCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWSgxMnB4KScpO1xuICAgICQodGhpcykuY3NzKCdmb250LXNpemUnLCAnMTRweCcpXG4gIH0pO1xufSk7XG4kKCcubGlzdC1mb3JtIC5saXN0LWZvcm1fX2lucHV0JykuZm9jdXMoZnVuY3Rpb24gKCkge1xuICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKCdmb2N1c2VkJyk7XG4gIGFuaW1lKHtcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybV9fZmllbGQuZm9jdXNlZCAubGlzdC1mb3JtX19sYWJlbCcsXG4gICAgdHJhbnNsYXRlWTogJy0xMnB4JyxcbiAgICBmb250U2l6ZTogMTIsXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICBkdXJhdGlvbjogMjAwXG4gIH0pO1xufSk7XG4kKCcubGlzdC1mb3JtIC5saXN0LWZvcm1fX2lucHV0JykuZm9jdXNvdXQoZnVuY3Rpb24gKCkge1xuICBpZigkKHRoaXMpLnZhbCgpKSB7XG4gICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnZmlsbCcpO1xuICB9XG4gIGVsc2Uge1xuICAgIGFuaW1lKHtcbiAgICAgIHRhcmdldHM6ICcubGlzdC1mb3JtX19maWVsZC5mb2N1c2VkIC5saXN0LWZvcm1fX2xhYmVsJyxcbiAgICAgIHRyYW5zbGF0ZVk6ICcxNHB4JyxcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICBkdXJhdGlvbjogMjAwXG4gICAgfSk7XG4gICAgaWYoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcygnZmlsbCcpKSB7XG4gICAgICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdmaWxsJylcbiAgICB9XG4gIH1cbiAgJCh0aGlzKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnZm9jdXNlZCcpO1xufSk7XG5cbi8vIEhvbWVwYWdlIGJnIGFuaW1hdGlvblxudmFyIG1Db250YWluZXI7XG52YXIgbUNhbWVyYSwgbVJlbmRlcmVyO1xudmFyIG1Db250cm9scztcbnZhciBtU2NlbmU7XG52YXIgbVBhcnRpY2xlQ291bnQgPSA4MDAwO1xudmFyIG1QYXJ0aWNsZVN5c3RlbTtcbnZhciBtVGltZSA9IDAuMDtcbnZhciBtVGltZVN0ZXAgPSAoMS8yNzApO1xudmFyIG1EdXJhdGlvbiA9IDIwO1xuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICBpbml0KCk7XG59O1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBpbml0VEhSRUUoKTtcbiAgaW5pdENvbnRyb2xzKCk7XG4gIGluaXRQYXJ0aWNsZVN5c3RlbSgpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZSwgZmFsc2UpO1xufVxuZnVuY3Rpb24gaW5pdFRIUkVFKCkge1xuICBtUmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7YW50aWFsaWFzOiB0cnVlfSk7XG4gIG1SZW5kZXJlci5zZXRTaXplKCQoJy53cmFwcGVyJykud2lkdGgoKSwgJCgnLndyYXBwZXInKS5oZWlnaHQoKSk7XG4gIG1SZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MzA0ZmZlKTtcblxuICBtQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hvbWVwYWdlLWJnLWFuaW1hdGlvbicpO1xuICBtQ29udGFpbmVyLmFwcGVuZENoaWxkKG1SZW5kZXJlci5kb21FbGVtZW50KTtcblxuICBtQ2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDYwLCAkKCcud3JhcHBlcicpLndpZHRoKCkgLyAkKCcud3JhcHBlcicpLmhlaWdodCgpLCAwLjEsIDUwMDApO1xuICBtQ2FtZXJhLnBvc2l0aW9uLnNldCgtMTMwMCwgMCwgMCk7XG5cbiAgbVNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cbiAgdmFyIGxpZ2h0O1xuXG4gIGxpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZik7XG4gIG1TY2VuZS5hZGQobGlnaHQpO1xufVxuZnVuY3Rpb24gaW5pdENvbnRyb2xzKCkge1xuICBtQ29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyhtQ2FtZXJhLCBtUmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gIG1Db250cm9scy5lbmFibGVkID0gZmFsc2U7XG59XG5mdW5jdGlvbiBpbml0UGFydGljbGVTeXN0ZW0oKSB7XG4gIHZhciBwcmVmYWJHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDQsIDQpO1xuICB2YXIgYnVmZmVyR2VvbWV0cnkgPSBuZXcgVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5KHByZWZhYkdlb21ldHJ5LCBtUGFydGljbGVDb3VudCk7XG5cbiAgYnVmZmVyR2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuICAvLyBnZW5lcmF0ZSBhZGRpdGlvbmFsIGdlb21ldHJ5IGRhdGFcbiAgdmFyIGFPZmZzZXQgPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2FPZmZzZXQnLCAxKTtcbiAgdmFyIGFTdGFydFBvc2l0aW9uID0gYnVmZmVyR2VvbWV0cnkuY3JlYXRlQXR0cmlidXRlKCdhU3RhcnRQb3NpdGlvbicsIDMpO1xuICB2YXIgYUNvbnRyb2xQb2ludDEgPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2FDb250cm9sUG9pbnQxJywgMyk7XG4gIHZhciBhQ29udHJvbFBvaW50MiA9IGJ1ZmZlckdlb21ldHJ5LmNyZWF0ZUF0dHJpYnV0ZSgnYUNvbnRyb2xQb2ludDInLCAzKTtcbiAgdmFyIGFFbmRQb3NpdGlvbiA9IGJ1ZmZlckdlb21ldHJ5LmNyZWF0ZUF0dHJpYnV0ZSgnYUVuZFBvc2l0aW9uJywgMyk7XG4gIHZhciBhQXhpc0FuZ2xlID0gYnVmZmVyR2VvbWV0cnkuY3JlYXRlQXR0cmlidXRlKCdhQXhpc0FuZ2xlJywgNCk7XG4gIHZhciBhQ29sb3IgPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2NvbG9yJywgMyk7XG5cbiAgdmFyIGksIGosIG9mZnNldDtcblxuICAvLyBidWZmZXIgdGltZSBvZmZzZXRcbiAgdmFyIGRlbGF5O1xuXG4gIGZvciAoaSA9IDAsIG9mZnNldCA9IDA7IGkgPCBtUGFydGljbGVDb3VudDsgaSsrKSB7XG4gICAgZGVsYXkgPSBpIC8gbVBhcnRpY2xlQ291bnQgKiBtRHVyYXRpb247XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgcHJlZmFiR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFPZmZzZXQuYXJyYXlbb2Zmc2V0KytdID0gZGVsYXk7XG4gICAgfVxuICB9XG5cbiAgLy8gYnVmZmVyIHN0YXJ0IHBvc2l0aW9uc1xuICB2YXIgeCwgeSwgejtcblxuICBmb3IgKGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgbVBhcnRpY2xlQ291bnQ7IGkrKykge1xuICAgIHggPSAwO1xuICAgIHkgPSAxMDAwO1xuICAgIHogPSAwO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHByZWZhYkdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICBhU3RhcnRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB4O1xuICAgICAgYVN0YXJ0UG9zaXRpb24uYXJyYXlbb2Zmc2V0KytdID0geTtcbiAgICAgIGFTdGFydFBvc2l0aW9uLmFycmF5W29mZnNldCsrXSA9IHo7XG4gICAgfVxuICB9XG5cbiAgLy8gYnVmZmVyIGNvbnRyb2wgcG9pbnRzXG5cbiAgZm9yIChpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IG1QYXJ0aWNsZUNvdW50OyBpKyspIHtcbiAgICB4ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXQoLTQwMCwgNDAwKTtcbiAgICB5ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXQoNDAwLCA2MDApO1xuICAgIHogPSBUSFJFRS5NYXRoLnJhbmRGbG9hdCgtMTgwMCwgLTQwMCk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgcHJlZmFiR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFDb250cm9sUG9pbnQxLmFycmF5W29mZnNldCsrXSA9IHg7XG4gICAgICBhQ29udHJvbFBvaW50MS5hcnJheVtvZmZzZXQrK10gPSB5O1xuICAgICAgYUNvbnRyb2xQb2ludDEuYXJyYXlbb2Zmc2V0KytdID0gejtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgbVBhcnRpY2xlQ291bnQ7IGkrKykge1xuICAgIHggPSBUSFJFRS5NYXRoLnJhbmRGbG9hdCgtNDAwLCA0MDApO1xuICAgIHkgPSBUSFJFRS5NYXRoLnJhbmRGbG9hdCgtNjAwLCAtNDAwKTtcbiAgICB6ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXQoNDAwLCAxODAwKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgYUNvbnRyb2xQb2ludDIuYXJyYXlbb2Zmc2V0KytdID0geDtcbiAgICAgIGFDb250cm9sUG9pbnQyLmFycmF5W29mZnNldCsrXSA9IHk7XG4gICAgICBhQ29udHJvbFBvaW50Mi5hcnJheVtvZmZzZXQrK10gPSB6O1xuICAgIH1cbiAgfVxuXG4gIC8vIGJ1ZmZlciBlbmQgcG9zaXRpb25zXG5cbiAgZm9yIChpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IG1QYXJ0aWNsZUNvdW50OyBpKyspIHtcbiAgICB4ID0gMDtcbiAgICB5ID0gLTEwMDA7XG4gICAgeiA9IDA7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgcHJlZmFiR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFFbmRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB4O1xuICAgICAgYUVuZFBvc2l0aW9uLmFycmF5W29mZnNldCsrXSA9IHk7XG4gICAgICBhRW5kUG9zaXRpb24uYXJyYXlbb2Zmc2V0KytdID0gejtcbiAgICB9XG4gIH1cblxuICAvLyBidWZmZXIgYXhpcyBhbmdsZVxuICB2YXIgYXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gIHZhciBhbmdsZSA9IDA7XG5cbiAgZm9yIChpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IG1QYXJ0aWNsZUNvdW50OyBpKyspIHtcbiAgICBheGlzLnggPSBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZCgyKTtcbiAgICBheGlzLnkgPSBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZCgyKTtcbiAgICBheGlzLnogPSBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZCgyKTtcbiAgICBheGlzLm5vcm1hbGl6ZSgpO1xuXG4gICAgYW5nbGUgPSBNYXRoLlBJICogVEhSRUUuTWF0aC5yYW5kSW50KDE2LCAzMik7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgcHJlZmFiR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFBeGlzQW5nbGUuYXJyYXlbb2Zmc2V0KytdID0gYXhpcy54O1xuICAgICAgYUF4aXNBbmdsZS5hcnJheVtvZmZzZXQrK10gPSBheGlzLnk7XG4gICAgICBhQXhpc0FuZ2xlLmFycmF5W29mZnNldCsrXSA9IGF4aXMuejtcbiAgICAgIGFBeGlzQW5nbGUuYXJyYXlbb2Zmc2V0KytdID0gYW5nbGU7XG4gICAgfVxuICB9XG5cbiAgLy8gYnVmZmVyIGNvbG9yXG4gIHZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpO1xuICB2YXIgaCwgcywgbDtcblxuICBmb3IgKGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgbVBhcnRpY2xlQ291bnQ7IGkrKykge1xuICAgIGggPSAwO1xuICAgIHMgPSAwO1xuICAgIGwgPSAwO1xuXG4gICAgY29sb3Iuc2V0SFNMKGgsIHMsIGwpO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHByZWZhYkdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICBhQ29sb3IuYXJyYXlbb2Zmc2V0KytdID0gY29sb3IucjtcbiAgICAgIGFDb2xvci5hcnJheVtvZmZzZXQrK10gPSBjb2xvci5nO1xuICAgICAgYUNvbG9yLmFycmF5W29mZnNldCsrXSA9IGNvbG9yLmI7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsKFxuICAgIC8vIGN1c3RvbSBwYXJhbWV0ZXJzICYgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwgcGFyYW1ldGVyc1xuICAgIHtcbiAgICAgIHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzLFxuICAgICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmcsXG4gICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuICAgICAgdW5pZm9ybXM6IHtcbiAgICAgICAgdVRpbWU6IHt0eXBlOiAnZicsIHZhbHVlOiAwfSxcbiAgICAgICAgdUR1cmF0aW9uOiB7dHlwZTogJ2YnLCB2YWx1ZTogbUR1cmF0aW9ufVxuICAgICAgfSxcbiAgICAgIHNoYWRlckZ1bmN0aW9uczogW1xuICAgICAgICBUSFJFRS5CQVMuU2hhZGVyQ2h1bmtbJ3F1YXRlcm5pb25fcm90YXRpb24nXSxcbiAgICAgICAgVEhSRUUuQkFTLlNoYWRlckNodW5rWydjdWJpY19iZXppZXInXVxuICAgICAgXSxcbiAgICAgIHNoYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVRpbWU7JyxcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdUR1cmF0aW9uOycsXG4gICAgICAgICdhdHRyaWJ1dGUgZmxvYXQgYU9mZnNldDsnLFxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYVN0YXJ0UG9zaXRpb247JyxcbiAgICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIGFDb250cm9sUG9pbnQxOycsXG4gICAgICAgICdhdHRyaWJ1dGUgdmVjMyBhQ29udHJvbFBvaW50MjsnLFxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYUVuZFBvc2l0aW9uOycsXG4gICAgICAgICdhdHRyaWJ1dGUgdmVjNCBhQXhpc0FuZ2xlOydcbiAgICAgIF0sXG4gICAgICBzaGFkZXJWZXJ0ZXhJbml0OiBbXG4gICAgICAgICdmbG9hdCB0UHJvZ3Jlc3MgPSBtb2QoKHVUaW1lICsgYU9mZnNldCksIHVEdXJhdGlvbikgLyB1RHVyYXRpb247JyxcblxuICAgICAgICAnZmxvYXQgYW5nbGUgPSBhQXhpc0FuZ2xlLncgKiB0UHJvZ3Jlc3M7JyxcbiAgICAgICAgJ3ZlYzQgdFF1YXQgPSBxdWF0RnJvbUF4aXNBbmdsZShhQXhpc0FuZ2xlLnh5eiwgYW5nbGUpOydcbiAgICAgIF0sXG4gICAgICBzaGFkZXJUcmFuc2Zvcm1Ob3JtYWw6IFtcbiAgICAgICAgJ29iamVjdE5vcm1hbCA9IHJvdGF0ZVZlY3Rvcih0UXVhdCwgb2JqZWN0Tm9ybWFsKTsnXG4gICAgICBdLFxuICAgICAgc2hhZGVyVHJhbnNmb3JtUG9zaXRpb246IFtcbiAgICAgICAgJ3RyYW5zZm9ybWVkID0gcm90YXRlVmVjdG9yKHRRdWF0LCB0cmFuc2Zvcm1lZCk7JyxcbiAgICAgICAgJ3RyYW5zZm9ybWVkICs9IGN1YmljQmV6aWVyKGFTdGFydFBvc2l0aW9uLCBhQ29udHJvbFBvaW50MSwgYUNvbnRyb2xQb2ludDIsIGFFbmRQb3NpdGlvbiwgdFByb2dyZXNzKTsnXG4gICAgICBdXG4gICAgfSxcbiAgICAvLyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCB1bmlmb3Jtc1xuICAgIHtcbiAgICAgIHNwZWN1bGFyOiAweGZmMDAwMCxcbiAgICAgIHNoaW5pbmVzczogMjBcbiAgICB9XG4gICk7XG4gIG1QYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5NZXNoKGJ1ZmZlckdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gIC8vIGJlY2F1c2UgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgcGFydGljbGUgc3lzdGVtIGRvZXMgbm90IHJlZmxlY3QgaXRzIG9uLXNjcmVlbiBzaXplXG4gIC8vIHNldCB0aGlzIHRvIGZhbHNlIHRvIHByZXZlbnQgdGhlIHdob2xlIHRoaW5nIGZyb20gZGlzYXBwZWFyaW5nIG9uIGNlcnRhaW4gYW5nbGVzXG4gIG1QYXJ0aWNsZVN5c3RlbS5mcnVzdHVtQ3VsbGVkID0gZmFsc2U7XG4gIG1TY2VuZS5hZGQobVBhcnRpY2xlU3lzdGVtKTtcbn1cbmZ1bmN0aW9uIHRpY2soKSB7XG4gIHVwZGF0ZSgpO1xuICByZW5kZXIoKTtcblxuICBtVGltZSArPSBtVGltZVN0ZXA7XG4gIG1UaW1lICU9IG1EdXJhdGlvbjtcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljayk7XG59XG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIG1Db250cm9scy51cGRhdGUoKTtcbiAgbVBhcnRpY2xlU3lzdGVtLm1hdGVyaWFsLnVuaWZvcm1zWyd1VGltZSddLnZhbHVlID0gbVRpbWU7XG59XG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gIG1SZW5kZXJlci5yZW5kZXIobVNjZW5lLCBtQ2FtZXJhKTtcbn1cbmZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgbGV0IHdpZHRoID0gJCgnLndyYXBwZXInKS53aWR0aCgpLFxuICAgICAgaGVpZ2h0ID0gJCgnLndyYXBwZXInKS5oZWlnaHQoKTtcblxuICBtQ2FtZXJhLmFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xuICBtQ2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICBtUmVuZGVyZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGJ1ZmZlciBhbmltYXRpb24gc3lzdGVtXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5USFJFRS5CQVMgPSB7fTtcblRIUkVFLkJBUy5TaGFkZXJDaHVuayA9IHt9O1xuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wiYW5pbWF0aW9uX3RpbWVcIl0gPSBcImZsb2F0IHREZWxheSA9IGFBbmltYXRpb24ueDtcXG5mbG9hdCB0RHVyYXRpb24gPSBhQW5pbWF0aW9uLnk7XFxuZmxvYXQgdFRpbWUgPSBjbGFtcCh1VGltZSAtIHREZWxheSwgMC4wLCB0RHVyYXRpb24pO1xcbmZsb2F0IHRQcm9ncmVzcyA9IGVhc2UodFRpbWUsIDAuMCwgMS4wLCB0RHVyYXRpb24pO1xcblwiO1xuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wiY3ViaWNfYmV6aWVyXCJdID0gXCJ2ZWMzIGN1YmljQmV6aWVyKHZlYzMgcDAsIHZlYzMgYzAsIHZlYzMgYzEsIHZlYzMgcDEsIGZsb2F0IHQpXFxue1xcbiAgICB2ZWMzIHRwO1xcbiAgICBmbG9hdCB0biA9IDEuMCAtIHQ7XFxuXFxuICAgIHRwLnh5eiA9IHRuICogdG4gKiB0biAqIHAwLnh5eiArIDMuMCAqIHRuICogdG4gKiB0ICogYzAueHl6ICsgMy4wICogdG4gKiB0ICogdCAqIGMxLnh5eiArIHQgKiB0ICogdCAqIHAxLnh5ejtcXG5cXG4gICAgcmV0dXJuIHRwO1xcbn1cXG5cIjtcblRIUkVFLkJBUy5TaGFkZXJDaHVua1tcImVhc2VfaW5fY3ViaWNcIl0gPSBcImZsb2F0IGVhc2UoZmxvYXQgdCwgZmxvYXQgYiwgZmxvYXQgYywgZmxvYXQgZCkge1xcbiAgcmV0dXJuIGMqKHQvPWQpKnQqdCArIGI7XFxufVxcblwiO1xuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wiZWFzZV9pbl9xdWFkXCJdID0gXCJmbG9hdCBlYXNlKGZsb2F0IHQsIGZsb2F0IGIsIGZsb2F0IGMsIGZsb2F0IGQpIHtcXG4gIHJldHVybiBjKih0Lz1kKSp0ICsgYjtcXG59XFxuXCI7XG5USFJFRS5CQVMuU2hhZGVyQ2h1bmtbXCJlYXNlX291dF9jdWJpY1wiXSA9IFwiZmxvYXQgZWFzZShmbG9hdCB0LCBmbG9hdCBiLCBmbG9hdCBjLCBmbG9hdCBkKSB7XFxuICByZXR1cm4gYyooKHQ9dC9kIC0gMS4wKSp0KnQgKyAxLjApICsgYjtcXG59XFxuXCI7XG5USFJFRS5CQVMuU2hhZGVyQ2h1bmtbXCJxdWF0ZXJuaW9uX3JvdGF0aW9uXCJdID0gXCJ2ZWMzIHJvdGF0ZVZlY3Rvcih2ZWM0IHEsIHZlYzMgdilcXG57XFxuICAgIHJldHVybiB2ICsgMi4wICogY3Jvc3MocS54eXosIGNyb3NzKHEueHl6LCB2KSArIHEudyAqIHYpO1xcbn1cXG5cXG52ZWM0IHF1YXRGcm9tQXhpc0FuZ2xlKHZlYzMgYXhpcywgZmxvYXQgYW5nbGUpXFxue1xcbiAgICBmbG9hdCBoYWxmQW5nbGUgPSBhbmdsZSAqIDAuNTtcXG4gICAgcmV0dXJuIHZlYzQoYXhpcy54eXogKiBzaW4oaGFsZkFuZ2xlKSwgY29zKGhhbGZBbmdsZSkpO1xcbn1cXG5cIjtcblxuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5ID0gZnVuY3Rpb24gKHByZWZhYiwgY291bnQpIHtcbiAgVEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcblxuICB0aGlzLnByZWZhYkdlb21ldHJ5ID0gcHJlZmFiO1xuICB0aGlzLnByZWZhYkNvdW50ID0gY291bnQ7XG4gIHRoaXMucHJlZmFiVmVydGV4Q291bnQgPSBwcmVmYWIudmVydGljZXMubGVuZ3RoO1xuXG4gIHRoaXMuYnVmZmVyRGVmYXVsdHMoKTtcbn07XG5USFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeTtcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuYnVmZmVyRGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmYWJGYWNlQ291bnQgPSB0aGlzLnByZWZhYkdlb21ldHJ5LmZhY2VzLmxlbmd0aDtcbiAgdmFyIHByZWZhYkluZGV4Q291bnQgPSB0aGlzLnByZWZhYkdlb21ldHJ5LmZhY2VzLmxlbmd0aCAqIDM7XG4gIHZhciBwcmVmYWJWZXJ0ZXhDb3VudCA9IHRoaXMucHJlZmFiVmVydGV4Q291bnQgPSB0aGlzLnByZWZhYkdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDtcbiAgdmFyIHByZWZhYkluZGljZXMgPSBbXTtcblxuICBmb3IgKHZhciBoID0gMDsgaCA8IHByZWZhYkZhY2VDb3VudDsgaCsrKSB7XG4gICAgdmFyIGZhY2UgPSB0aGlzLnByZWZhYkdlb21ldHJ5LmZhY2VzW2hdO1xuICAgIHByZWZhYkluZGljZXMucHVzaChmYWNlLmEsIGZhY2UuYiwgZmFjZS5jKTtcbiAgfVxuXG4gIHZhciBpbmRleEJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnByZWZhYkNvdW50ICogcHJlZmFiSW5kZXhDb3VudCk7XG4gIHZhciBwb3NpdGlvbkJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wcmVmYWJDb3VudCAqIHByZWZhYlZlcnRleENvdW50ICogMyk7XG5cbiAgdGhpcy5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGluZGV4QnVmZmVyLCAxKSk7XG4gIHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25CdWZmZXIsIDMpKTtcblxuICBmb3IgKHZhciBpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IHRoaXMucHJlZmFiQ291bnQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlZmFiVmVydGV4Q291bnQ7IGorKywgb2Zmc2V0ICs9IDMpIHtcbiAgICAgIHZhciBwcmVmYWJWZXJ0ZXggPSB0aGlzLnByZWZhYkdlb21ldHJ5LnZlcnRpY2VzW2pdO1xuXG4gICAgICBwb3NpdGlvbkJ1ZmZlcltvZmZzZXQgICAgXSA9IHByZWZhYlZlcnRleC54O1xuICAgICAgcG9zaXRpb25CdWZmZXJbb2Zmc2V0ICsgMV0gPSBwcmVmYWJWZXJ0ZXgueTtcbiAgICAgIHBvc2l0aW9uQnVmZmVyW29mZnNldCArIDJdID0gcHJlZmFiVmVydGV4Lno7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBwcmVmYWJJbmRleENvdW50OyBrKyspIHtcbiAgICAgIGluZGV4QnVmZmVyW2kgKiBwcmVmYWJJbmRleENvdW50ICsga10gPSBwcmVmYWJJbmRpY2VzW2tdICsgaSAqIHByZWZhYlZlcnRleENvdW50O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBiYXNlZCBvbiBCdWZmZXJHZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFsc1xuICogY2FsY3VsYXRlIHZlcnRleCBub3JtYWxzIGZvciBhIHByZWZhYiwgYW5kIHJlcGVhdCB0aGUgZGF0YSBpbiB0aGUgbm9ybWFsIGJ1ZmZlclxuICovXG5USFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuICB2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcbiAgdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cbiAgaWYgKGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucy5sZW5ndGgpLCAzKSk7XG4gIH1cblxuICB2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXG4gIHZhciB2QSwgdkIsIHZDLFxuXG4gICAgcEEgPSBuZXcgVEhSRUUuVmVjdG9yMygpLFxuICAgIHBCID0gbmV3IFRIUkVFLlZlY3RvcjMoKSxcbiAgICBwQyA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXG5cbiAgICBjYiA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXG4gICAgYWIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG4gIHZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG4gIHZhciBwcmVmYWJJbmRleENvdW50ID0gdGhpcy5wcmVmYWJHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZmFiSW5kZXhDb3VudDsgaSArPSAzKSB7XG4gICAgdkEgPSBpbmRpY2VzW2kgKyAwXSAqIDM7XG4gICAgdkIgPSBpbmRpY2VzW2kgKyAxXSAqIDM7XG4gICAgdkMgPSBpbmRpY2VzW2kgKyAyXSAqIDM7XG5cbiAgICBwQS5mcm9tQXJyYXkocG9zaXRpb25zLCB2QSk7XG4gICAgcEIuZnJvbUFycmF5KHBvc2l0aW9ucywgdkIpO1xuICAgIHBDLmZyb21BcnJheShwb3NpdGlvbnMsIHZDKTtcblxuICAgIGNiLnN1YlZlY3RvcnMocEMsIHBCKTtcbiAgICBhYi5zdWJWZWN0b3JzKHBBLCBwQik7XG4gICAgY2IuY3Jvc3MoYWIpO1xuXG4gICAgbm9ybWFsc1t2QV0gKz0gY2IueDtcbiAgICBub3JtYWxzW3ZBICsgMV0gKz0gY2IueTtcbiAgICBub3JtYWxzW3ZBICsgMl0gKz0gY2IuejtcblxuICAgIG5vcm1hbHNbdkJdICs9IGNiLng7XG4gICAgbm9ybWFsc1t2QiArIDFdICs9IGNiLnk7XG4gICAgbm9ybWFsc1t2QiArIDJdICs9IGNiLno7XG5cbiAgICBub3JtYWxzW3ZDXSArPSBjYi54O1xuICAgIG5vcm1hbHNbdkMgKyAxXSArPSBjYi55O1xuICAgIG5vcm1hbHNbdkMgKyAyXSArPSBjYi56O1xuICB9XG5cbiAgZm9yICh2YXIgaiA9IDE7IGogPCB0aGlzLnByZWZhYkNvdW50OyBqKyspIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHByZWZhYkluZGV4Q291bnQ7IGsrKykge1xuICAgICAgbm9ybWFsc1tqICogcHJlZmFiSW5kZXhDb3VudCArIGtdID0gbm9ybWFsc1trXTtcbiAgICB9XG4gIH1cblxuICB0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuICBhdHRyaWJ1dGVzLm5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSwgaXRlbVNpemUpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wcmVmYWJDb3VudCAqIHRoaXMucHJlZmFiVmVydGV4Q291bnQgKiBpdGVtU2l6ZSk7XG4gIHZhciBhdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGJ1ZmZlciwgaXRlbVNpemUpO1xuXG4gIHRoaXMuYWRkQXR0cmlidXRlKG5hbWUsIGF0dHJpYnV0ZSk7XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZTtcbn07XG5USFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnNldEF0dHJpYnV0ZTQgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIGFycmF5ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdLmFycmF5O1xuICB2YXIgaSwgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ID0gZGF0YVtpXTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnByZWZhYlZlcnRleENvdW50OyBqKyspIHtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueDtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueTtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYuejtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYudztcbiAgICB9XG4gIH1cblxuICB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0ubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuc2V0QXR0cmlidXRlMyA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgYXJyYXkgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0uYXJyYXk7XG4gIHZhciBpLCBqO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHYgPSBkYXRhW2ldO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHRoaXMucHJlZmFiVmVydGV4Q291bnQ7IGorKykge1xuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi54O1xuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi55O1xuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi56O1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlc1tuYW1lXS5uZWVkc1VwZGF0ZSA9IHRydWU7XG59O1xuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUyID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIHZhciBhcnJheSA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlc1tuYW1lXS5hcnJheTtcbiAgdmFyIGksIGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucHJlZmFiQ291bnQ7IGkrKykge1xuICAgIHZhciB2ID0gZGF0YVtpXTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnByZWZhYlZlcnRleENvdW50OyBqKyspIHtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueDtcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0ubmVlZHNVcGRhdGUgPSB0cnVlO1xufTtcblxuVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbCA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHtcbiAgVEhSRUUuU2hhZGVyTWF0ZXJpYWwuY2FsbCh0aGlzKTtcblxuICB0aGlzLnNoYWRlckZ1bmN0aW9ucyA9IFtdO1xuICB0aGlzLnNoYWRlclBhcmFtZXRlcnMgPSBbXTtcbiAgdGhpcy5zaGFkZXJWZXJ0ZXhJbml0ID0gW107XG4gIHRoaXMuc2hhZGVyVHJhbnNmb3JtTm9ybWFsID0gW107XG4gIHRoaXMuc2hhZGVyVHJhbnNmb3JtUG9zaXRpb24gPSBbXTtcblxuICB0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcbn07XG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlKTtcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbDtcblxuLy8gYWJzdHJhY3RcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLl9jb25jYXRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcnO1xufTtcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLl9jb25jYXRGdW5jdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2hhZGVyRnVuY3Rpb25zLmpvaW4oJ1xcbicpO1xufTtcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLl9jb25jYXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNoYWRlclBhcmFtZXRlcnMuam9pbignXFxuJyk7XG59O1xuVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUuX2NvbmNhdFZlcnRleEluaXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2hhZGVyVmVydGV4SW5pdC5qb2luKCdcXG4nKTtcbn07XG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0VHJhbnNmb3JtTm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNoYWRlclRyYW5zZm9ybU5vcm1hbC5qb2luKCdcXG4nKTtcbn07XG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0VHJhbnNmb3JtUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2hhZGVyVHJhbnNmb3JtUG9zaXRpb24uam9pbignXFxuJyk7XG59O1xuVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUuc2V0VW5pZm9ybVZhbHVlcyA9IGZ1bmN0aW9uKHZhbHVlcykge1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7XG4gICAgaWYgKGtleSBpbiB0aGlzLnVuaWZvcm1zKSB7XG4gICAgICB2YXIgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNba2V5XTtcbiAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1trZXldO1xuXG4gICAgICAvLyB0b2RvIGFkZCBtYXRyaXggdW5pZm9ybSB0eXBlc1xuICAgICAgc3dpdGNoICh1bmlmb3JtLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYyc6IC8vIGNvbG9yXG4gICAgICAgICAgdW5pZm9ybS52YWx1ZS5zZXQodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd2Mic6IC8vIHZlY3RvcnNcbiAgICAgICAgY2FzZSAndjMnOlxuICAgICAgICBjYXNlICd2NCc6XG4gICAgICAgICAgdW5pZm9ybS52YWx1ZS5jb3B5KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZic6IC8vIGZsb2F0XG4gICAgICAgIGNhc2UgJ3QnOiAvLyB0ZXh0dXJlXG4gICAgICAgICAgdW5pZm9ybS52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuVEhSRUUuQkFTLlBob25nQW5pbWF0aW9uTWF0ZXJpYWwgPSBmdW5jdGlvbihwYXJhbWV0ZXJzLCB1bmlmb3JtVmFsdWVzKSB7XG4gIFRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzKTtcblxuICB2YXIgcGhvbmdTaGFkZXIgPSBUSFJFRS5TaGFkZXJMaWJbJ3Bob25nJ107XG5cbiAgdGhpcy51bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW3Bob25nU2hhZGVyLnVuaWZvcm1zLCB0aGlzLnVuaWZvcm1zXSk7XG4gIHRoaXMubGlnaHRzID0gdHJ1ZTtcbiAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSB0aGlzLl9jb25jYXRWZXJ0ZXhTaGFkZXIoKTtcbiAgdGhpcy5mcmFnbWVudFNoYWRlciA9IHBob25nU2hhZGVyLmZyYWdtZW50U2hhZGVyO1xuXG4gIC8vIHRvZG8gYWRkIG1pc3NpbmcgZGVmYXVsdCBkZWZpbmVzXG4gIHVuaWZvcm1WYWx1ZXMubWFwICYmICh0aGlzLmRlZmluZXNbJ1VTRV9NQVAnXSA9ICcnKTtcbiAgdW5pZm9ybVZhbHVlcy5ub3JtYWxNYXAgJiYgKHRoaXMuZGVmaW5lc1snVVNFX05PUk1BTE1BUCddID0gJycpO1xuXG4gIHRoaXMuc2V0VW5pZm9ybVZhbHVlcyh1bmlmb3JtVmFsdWVzKTtcbn07XG5USFJFRS5CQVMuUGhvbmdBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlKTtcblRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsO1xuVEhSRUUuQkFTLlBob25nQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLl9jb25jYXRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gYmFzZWQgb24gVEhSRUUuU2hhZGVyTGliLnBob25nXG4gIHJldHVybiBbXG4gICAgXCIjZGVmaW5lIFBIT05HXCIsXG5cbiAgICBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1wiLFxuXG4gICAgXCIjaWZuZGVmIEZMQVRfU0hBREVEXCIsXG5cbiAgICBcIlx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XCIsXG5cbiAgICBcIiNlbmRpZlwiLFxuXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiY29tbW9uXCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJ1dl9wYXJzX3ZlcnRleFwiIF0sXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwidXYyX3BhcnNfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImVudm1hcF9wYXJzX3ZlcnRleFwiIF0sXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibGlnaHRzX3Bob25nX3BhcnNfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJjb2xvcl9wYXJzX3ZlcnRleFwiIF0sXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInNraW5uaW5nX3BhcnNfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4XCIgXSxcblxuICAgIHRoaXMuX2NvbmNhdEZ1bmN0aW9ucygpLFxuXG4gICAgdGhpcy5fY29uY2F0UGFyYW1ldGVycygpLFxuXG4gICAgXCJ2b2lkIG1haW4oKSB7XCIsXG5cbiAgICB0aGlzLl9jb25jYXRWZXJ0ZXhJbml0KCksXG5cbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJ1dl92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInV2Ml92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImNvbG9yX3ZlcnRleFwiIF0sXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiYmVnaW5ub3JtYWxfdmVydGV4XCIgXSxcblxuICAgIHRoaXMuX2NvbmNhdFRyYW5zZm9ybU5vcm1hbCgpLFxuXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibW9ycGhub3JtYWxfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJza2luYmFzZV92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInNraW5ub3JtYWxfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkZWZhdWx0bm9ybWFsX3ZlcnRleFwiIF0sXG5cbiAgICBcIiNpZm5kZWYgRkxBVF9TSEFERURcIiwgLy8gTm9ybWFsIGNvbXB1dGVkIHdpdGggZGVyaXZhdGl2ZXMgd2hlbiBGTEFUX1NIQURFRFxuXG4gICAgXCJcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XCIsXG5cbiAgICBcIiNlbmRpZlwiLFxuXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiYmVnaW5fdmVydGV4XCIgXSxcblxuICAgIHRoaXMuX2NvbmNhdFRyYW5zZm9ybVBvc2l0aW9uKCksXG5cbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkaXNwbGFjZW1lbnRtYXBfdmVydGV4XCIgXSxcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJtb3JwaHRhcmdldF92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInNraW5uaW5nX3ZlcnRleFwiIF0sXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwicHJvamVjdF92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImxvZ2RlcHRoYnVmX3ZlcnRleFwiIF0sXG5cbiAgICBcIlx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XCIsXG5cbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJ3b3JsZHBvc192ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImVudm1hcF92ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImxpZ2h0c19waG9uZ192ZXJ0ZXhcIiBdLFxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInNoYWRvd21hcF92ZXJ0ZXhcIiBdLFxuXG4gICAgXCJ9XCJcblxuICBdLmpvaW4oIFwiXFxuXCIgKTtcbn07Il0sImZpbGUiOiJhcHAubWluLmpzIn0=
