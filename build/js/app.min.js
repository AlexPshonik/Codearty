let TxtType=function(t,e,r){this.toRotate=e,this.el=t,this.loopNum=0,this.period=parseInt(r,10)||2e3,this.txt="We build ",this.tick(),this.isDeleting=!1};var mContainer,mCamera,mRenderer,mControls,mScene;TxtType.prototype.tick=function(){let t=this.loopNum%this.toRotate.length,e=this.toRotate[t];this.isDeleting?this.txt=e.substring(0,this.txt.length-1):this.txt=e.substring(0,this.txt.length+1),this.el.innerHTML='We build<br> &ensp;<span class="wrap">'+this.txt+"</span>";let r=this,a=200-100*Math.random();this.isDeleting&&(a/=2),this.isDeleting||this.txt!==e?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.loopNum++,a=500):(a=this.period,this.isDeleting=!0),setTimeout(function(){r.tick()},a)},$(document).ready(function(){var t=document.getElementsByClassName("js-typed-text"),e=t[0].getAttribute("data-type"),r=t[0].getAttribute("data-period");e&&new TxtType(t[0],JSON.parse(e),r)}),$(".js-show-popup").on("click",function(){anime({targets:".pop-up",translateY:0,opacity:1,easing:"linear",duration:500}),anime({targets:".list-form .list-form__field",translateY:0,opacity:1,easing:"linear",duration:500,delay:500}),anime({targets:".list-form .btn",translateY:0,opacity:1,easing:"linear",duration:500,delay:1e3})}),$(".js-popup-close").on("click",function(){anime({targets:".pop-up",translateY:"-100%",opacity:0,easing:"linear",duration:500}),anime({targets:".list-form .list-form__field",translateY:-150,opacity:.4,easing:"linear",duration:500}),anime({targets:".list-form .btn",translateY:50,opacity:0,easing:"linear",duration:500})}),$(document).ready(function(){$(".pop-up").css("transform","translateY(-100%)"),$(".pop-up").css("opacity","1"),$(".list-form .list-form__field").each(function(){$(this).css("transform","translateY(-150px)"),$(this).css("opacity","0.4")}),$(".list-form .btn").css("transform","translateY(150px)"),$(".list-form .btn").css("opacity","0")}),$(document).ready(function(){$(".list-form .list-form__label").each(function(){$(this).css("transform","translateY(14px)"),$(this).css("font-size","16px")})}),$(".list-form .list-form__input").focus(function(){$(this).parent().addClass("focused"),anime({targets:".list-form__field.focused .list-form__label",translateY:"-12px",fontSize:12,easing:"linear",duration:200})}),$(".list-form .list-form__input").focusout(function(){$(this).val()?$(this).parent().addClass("fill"):(anime({targets:".list-form__field.focused .list-form__label",translateY:"14px",fontSize:16,easing:"linear",duration:200}),$(this).parent().hasClass("fill")&&$(this).parent().removeClass("fill")),$(this).parent().removeClass("focused")});var mParticleSystem,mParticleCount=8e3,mTime=0,mTimeStep=1/270,mDuration=20;function init(){initTHREE(),initControls(),initParticleSystem(),requestAnimationFrame(tick),window.addEventListener("resize",resize,!1)}function initTHREE(){var t;(mRenderer=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight),mRenderer.setClearColor(3166206),(mContainer=document.getElementById("homepage-bg-animation")).appendChild(mRenderer.domElement),(mCamera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,5e3)).position.set(-1300,0,0),mScene=new THREE.Scene,t=new THREE.AmbientLight(16777215),mScene.add(t)}function initControls(){mControls=new THREE.OrbitControls(mCamera,mRenderer.domElement)}function initParticleSystem(){var t=new THREE.PlaneGeometry(4,4),e=new THREE.BAS.PrefabBufferGeometry(t,mParticleCount);e.computeVertexNormals();var r,a,n,i,o,s,l,u=e.createAttribute("aOffset",1),h=e.createAttribute("aStartPosition",3),f=e.createAttribute("aControlPoint1",3),m=e.createAttribute("aControlPoint2",3),c=e.createAttribute("aEndPosition",3),E=e.createAttribute("aAxisAngle",4),d=e.createAttribute("color",3);for(r=0,n=0;r<mParticleCount;r++)for(i=r/mParticleCount*mDuration,a=0;a<t.vertices.length;a++)u.array[n++]=i;for(r=0,n=0;r<mParticleCount;r++)for(o=0,s=1e3,l=0,a=0;a<t.vertices.length;a++)h.array[n++]=o,h.array[n++]=s,h.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(400,600),l=THREE.Math.randFloat(-1800,-400),a=0;a<t.vertices.length;a++)f.array[n++]=o,f.array[n++]=s,f.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(-600,-400),l=THREE.Math.randFloat(400,1800),a=0;a<t.vertices.length;a++)m.array[n++]=o,m.array[n++]=s,m.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=0,s=-1e3,l=0,a=0;a<t.vertices.length;a++)c.array[n++]=o,c.array[n++]=s,c.array[n++]=l;var p=new THREE.Vector3,T=0;for(r=0,n=0;r<mParticleCount;r++)for(p.x=THREE.Math.randFloatSpread(2),p.y=THREE.Math.randFloatSpread(2),p.z=THREE.Math.randFloatSpread(2),p.normalize(),T=Math.PI*THREE.Math.randInt(16,32),a=0;a<t.vertices.length;a++)E.array[n++]=p.x,E.array[n++]=p.y,E.array[n++]=p.z,E.array[n++]=T;var y=new THREE.Color;for(r=0,n=0;r<mParticleCount;r++)for(0,0,0,y.setHSL(0,0,0),a=0;a<t.vertices.length;a++)d.array[n++]=y.r,d.array[n++]=y.g,d.array[n++]=y.b;var v=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.FlatShading,side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uDuration:{type:"f",value:mDuration}},shaderFunctions:[THREE.BAS.ShaderChunk.quaternion_rotation,THREE.BAS.ShaderChunk.cubic_bezier],shaderParameters:["uniform float uTime;","uniform float uDuration;","attribute float aOffset;","attribute vec3 aStartPosition;","attribute vec3 aControlPoint1;","attribute vec3 aControlPoint2;","attribute vec3 aEndPosition;","attribute vec4 aAxisAngle;"],shaderVertexInit:["float tProgress = mod((uTime + aOffset), uDuration) / uDuration;","float angle = aAxisAngle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);"],shaderTransformNormal:["objectNormal = rotateVector(tQuat, objectNormal);"],shaderTransformPosition:["transformed = rotateVector(tQuat, transformed);","transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);"]},{specular:16711680,shininess:20});(mParticleSystem=new THREE.Mesh(e,v)).frustumCulled=!1,mScene.add(mParticleSystem)}function tick(){update(),render(),mTime+=mTimeStep,mTime%=mDuration,requestAnimationFrame(tick)}function update(){mControls.update(),mParticleSystem.material.uniforms.uTime.value=mTime}function render(){mRenderer.render(mScene,mCamera)}function resize(){mCamera.aspect=window.innerWidth/window.innerHeight,mCamera.updateProjectionMatrix(),mRenderer.setSize(window.innerWidth,window.innerHeight)}window.onload=function(){init()},THREE.BAS={},THREE.BAS.ShaderChunk={},THREE.BAS.ShaderChunk.animation_time="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n",THREE.BAS.ShaderChunk.cubic_bezier="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n",THREE.BAS.ShaderChunk.ease_in_cubic="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_quad="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_out_cubic="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n",THREE.BAS.ShaderChunk.quaternion_rotation="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n",THREE.BAS.PrefabBufferGeometry=function(t,e){THREE.BufferGeometry.call(this),this.prefabGeometry=t,this.prefabCount=e,this.prefabVertexCount=t.vertices.length,this.bufferDefaults()},THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry,THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){for(var t=this.prefabGeometry.faces.length,e=3*this.prefabGeometry.faces.length,r=this.prefabVertexCount=this.prefabGeometry.vertices.length,a=[],n=0;n<t;n++){var i=this.prefabGeometry.faces[n];a.push(i.a,i.b,i.c)}var o=new Uint32Array(this.prefabCount*e),s=new Float32Array(this.prefabCount*r*3);this.setIndex(new THREE.BufferAttribute(o,1)),this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var l=0,u=0;l<this.prefabCount;l++){for(var h=0;h<r;h++,u+=3){var f=this.prefabGeometry.vertices[h];s[u]=f.x,s[u+1]=f.y,s[u+2]=f.z}for(var m=0;m<e;m++)o[l*e+m]=a[m]+l*r}},THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var t=this.index,e=this.attributes,r=e.position.array;void 0===e.normal&&this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3));for(var a,n,i,o=e.normal.array,s=new THREE.Vector3,l=new THREE.Vector3,u=new THREE.Vector3,h=new THREE.Vector3,f=new THREE.Vector3,m=t.array,c=3*this.prefabGeometry.faces.length,E=0;E<c;E+=3)a=3*m[E+0],n=3*m[E+1],i=3*m[E+2],s.fromArray(r,a),l.fromArray(r,n),u.fromArray(r,i),h.subVectors(u,l),f.subVectors(s,l),h.cross(f),o[a]+=h.x,o[a+1]+=h.y,o[a+2]+=h.z,o[n]+=h.x,o[n+1]+=h.y,o[n+2]+=h.z,o[i]+=h.x,o[i+1]+=h.y,o[i+2]+=h.z;for(var d=1;d<this.prefabCount;d++)for(var p=0;p<c;p++)o[d*c+p]=o[p];this.normalizeNormals(),e.normal.needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(t,e){var r=new Float32Array(this.prefabCount*this.prefabVertexCount*e),a=new THREE.BufferAttribute(r,e);return this.addAttribute(t,a),a},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y,i[n++]=o.z,i[n++]=o.w}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y,i[n++]=o.z}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<this.prefabCount;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.BaseAnimationMaterial=function(t){THREE.ShaderMaterial.call(this),this.shaderFunctions=[],this.shaderParameters=[],this.shaderVertexInit=[],this.shaderTransformNormal=[],this.shaderTransformPosition=[],this.setValues(t)},THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial,THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""},THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shaderFunctions.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shaderParameters.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shaderVertexInit.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shaderTransformNormal.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shaderTransformPosition.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(t){for(var e in t)if(e in this.uniforms){var r=this.uniforms[e],a=t[e];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":r.value=a}}},THREE.BAS.PhongAnimationMaterial=function(t,e){THREE.BAS.BaseAnimationMaterial.call(this,t);var r=THREE.ShaderLib.phong;this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]),this.lights=!0,this.vertexShader=this._concatVertexShader(),this.fragmentShader=r.fragmentShader,e.map&&(this.defines.USE_MAP=""),e.normalMap&&(this.defines.USE_NORMALMAP=""),this.setUniformValues(e)},THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype),THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial,THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,this._concatTransformNormal(),THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,this._concatTransformPosition(),THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
