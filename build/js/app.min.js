let TxtType=function(t,e,r){this.toRotate=e,this.el=t,this.loopNum=0,this.period=parseInt(r,10)||2e3,this.txt="We build ",this.tick(),this.isDeleting=!1};var mContainer,mCamera,mRenderer,mControls,mScene;TxtType.prototype.tick=function(){let t=this.loopNum%this.toRotate.length,e=this.toRotate[t];this.isDeleting?this.txt=e.substring(0,this.txt.length-1):this.txt=e.substring(0,this.txt.length+1),this.el.innerHTML='We build<br> &ensp;<span class="wrap">'+this.txt+"</span>";let r=this,a=200-100*Math.random();this.isDeleting&&(a/=2),this.isDeleting||this.txt!==e?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.loopNum++,a=500):(a=this.period,this.isDeleting=!0),setTimeout(function(){r.tick()},a)},$(document).ready(function(){var t=document.getElementsByClassName("js-typed-text"),e=t[0].getAttribute("data-type"),r=t[0].getAttribute("data-period");e&&new TxtType(t[0],JSON.parse(e),r)}),$(".js-show-popup").on("click",function(){$("#homepage-bg-animation").css("display","none"),anime({targets:".pop-up",translateY:0,opacity:1,easing:"linear",duration:500}),anime({targets:".list-form .list-form__field",translateY:0,opacity:1,easing:"linear",duration:500,delay:500}),anime({targets:".list-form .btn",translateY:0,opacity:1,easing:"linear",duration:500,delay:1e3})}),$(".js-popup-close").on("click",function(){$("#homepage-bg-animation").css("display","block"),anime({targets:".pop-up",translateY:"-100%",opacity:0,easing:"linear",duration:500}),anime({targets:".list-form .list-form__field",translateY:-150,opacity:.4,easing:"linear",duration:500}),anime({targets:".list-form .btn",translateY:50,opacity:0,easing:"linear",duration:500})}),$(document).ready(function(){$(".pop-up").css("transform","translateY(-100%)"),$(".pop-up").css("opacity","1"),$(".list-form .list-form__field").each(function(){$(this).css("transform","translateY(-150px)"),$(this).css("opacity","0.4")}),$(".list-form .btn").css("transform","translateY(150px)"),$(".list-form .btn").css("opacity","0")}),$(document).ready(function(){$(".list-form .list-form__label").each(function(){$(this).css("transform","translateY(14px)"),$(this).css("font-size","16px")})}),$(".list-form .list-form__input").focus(function(){$(this).parent().addClass("focused"),anime({targets:".list-form__field.focused .list-form__label",translateY:"-12px",fontSize:12,easing:"linear",duration:200})}),$(".list-form .list-form__input").focusout(function(){$(this).val()?$(this).parent().addClass("fill"):(anime({targets:".list-form__field.focused .list-form__label",translateY:"14px",fontSize:16,easing:"linear",duration:200}),$(this).parent().hasClass("fill")&&$(this).parent().removeClass("fill")),$(this).parent().removeClass("focused")});var mParticleSystem,mParticleCount=8e3,mTime=0,mTimeStep=1/270,mDuration=20;function init(){initTHREE(),initControls(),initParticleSystem(),requestAnimationFrame(tick),window.addEventListener("resize",resize,!1)}function initTHREE(){var t;(mRenderer=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight),mRenderer.setClearColor(3166206),(mContainer=document.getElementById("homepage-bg-animation")).appendChild(mRenderer.domElement),(mCamera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,5e3)).position.set(-1300,0,0),mScene=new THREE.Scene,t=new THREE.AmbientLight(16777215),mScene.add(t)}function initControls(){mControls=new THREE.OrbitControls(mCamera,mRenderer.domElement)}function initParticleSystem(){var t=new THREE.PlaneGeometry(4,4),e=new THREE.BAS.PrefabBufferGeometry(t,mParticleCount);e.computeVertexNormals();var r,a,n,i,o,s,l,u=e.createAttribute("aOffset",1),h=e.createAttribute("aStartPosition",3),m=e.createAttribute("aControlPoint1",3),f=e.createAttribute("aControlPoint2",3),c=e.createAttribute("aEndPosition",3),E=e.createAttribute("aAxisAngle",4),d=e.createAttribute("color",3);for(r=0,n=0;r<mParticleCount;r++)for(i=r/mParticleCount*mDuration,a=0;a<t.vertices.length;a++)u.array[n++]=i;for(r=0,n=0;r<mParticleCount;r++)for(o=0,s=1e3,l=0,a=0;a<t.vertices.length;a++)h.array[n++]=o,h.array[n++]=s,h.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(400,600),l=THREE.Math.randFloat(-1800,-400),a=0;a<t.vertices.length;a++)m.array[n++]=o,m.array[n++]=s,m.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(-600,-400),l=THREE.Math.randFloat(400,1800),a=0;a<t.vertices.length;a++)f.array[n++]=o,f.array[n++]=s,f.array[n++]=l;for(r=0,n=0;r<mParticleCount;r++)for(o=0,s=-1e3,l=0,a=0;a<t.vertices.length;a++)c.array[n++]=o,c.array[n++]=s,c.array[n++]=l;var p=new THREE.Vector3,y=0;for(r=0,n=0;r<mParticleCount;r++)for(p.x=THREE.Math.randFloatSpread(2),p.y=THREE.Math.randFloatSpread(2),p.z=THREE.Math.randFloatSpread(2),p.normalize(),y=Math.PI*THREE.Math.randInt(16,32),a=0;a<t.vertices.length;a++)E.array[n++]=p.x,E.array[n++]=p.y,E.array[n++]=p.z,E.array[n++]=y;var T=new THREE.Color;for(r=0,n=0;r<mParticleCount;r++)for(0,0,0,T.setHSL(0,0,0),a=0;a<t.vertices.length;a++)d.array[n++]=T.r,d.array[n++]=T.g,d.array[n++]=T.b;var v=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.FlatShading,side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uDuration:{type:"f",value:mDuration}},shaderFunctions:[THREE.BAS.ShaderChunk.quaternion_rotation,THREE.BAS.ShaderChunk.cubic_bezier],shaderParameters:["uniform float uTime;","uniform float uDuration;","attribute float aOffset;","attribute vec3 aStartPosition;","attribute vec3 aControlPoint1;","attribute vec3 aControlPoint2;","attribute vec3 aEndPosition;","attribute vec4 aAxisAngle;"],shaderVertexInit:["float tProgress = mod((uTime + aOffset), uDuration) / uDuration;","float angle = aAxisAngle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);"],shaderTransformNormal:["objectNormal = rotateVector(tQuat, objectNormal);"],shaderTransformPosition:["transformed = rotateVector(tQuat, transformed);","transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);"]},{specular:16711680,shininess:20});(mParticleSystem=new THREE.Mesh(e,v)).frustumCulled=!1,mScene.add(mParticleSystem)}function tick(){update(),render(),mTime+=mTimeStep,mTime%=mDuration,requestAnimationFrame(tick)}function update(){mControls.update(),mParticleSystem.material.uniforms.uTime.value=mTime}function render(){mRenderer.render(mScene,mCamera)}function resize(){mCamera.aspect=window.innerWidth/window.innerHeight,mCamera.updateProjectionMatrix(),mRenderer.setSize(window.innerWidth,window.innerHeight)}window.onload=function(){init()},THREE.BAS={},THREE.BAS.ShaderChunk={},THREE.BAS.ShaderChunk.animation_time="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n",THREE.BAS.ShaderChunk.cubic_bezier="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n",THREE.BAS.ShaderChunk.ease_in_cubic="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_quad="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_out_cubic="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n",THREE.BAS.ShaderChunk.quaternion_rotation="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n",THREE.BAS.PrefabBufferGeometry=function(t,e){THREE.BufferGeometry.call(this),this.prefabGeometry=t,this.prefabCount=e,this.prefabVertexCount=t.vertices.length,this.bufferDefaults()},THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry,THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){for(var t=this.prefabGeometry.faces.length,e=3*this.prefabGeometry.faces.length,r=this.prefabVertexCount=this.prefabGeometry.vertices.length,a=[],n=0;n<t;n++){var i=this.prefabGeometry.faces[n];a.push(i.a,i.b,i.c)}var o=new Uint32Array(this.prefabCount*e),s=new Float32Array(this.prefabCount*r*3);this.setIndex(new THREE.BufferAttribute(o,1)),this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var l=0,u=0;l<this.prefabCount;l++){for(var h=0;h<r;h++,u+=3){var m=this.prefabGeometry.vertices[h];s[u]=m.x,s[u+1]=m.y,s[u+2]=m.z}for(var f=0;f<e;f++)o[l*e+f]=a[f]+l*r}},THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var t=this.index,e=this.attributes,r=e.position.array;void 0===e.normal&&this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3));for(var a,n,i,o=e.normal.array,s=new THREE.Vector3,l=new THREE.Vector3,u=new THREE.Vector3,h=new THREE.Vector3,m=new THREE.Vector3,f=t.array,c=3*this.prefabGeometry.faces.length,E=0;E<c;E+=3)a=3*f[E+0],n=3*f[E+1],i=3*f[E+2],s.fromArray(r,a),l.fromArray(r,n),u.fromArray(r,i),h.subVectors(u,l),m.subVectors(s,l),h.cross(m),o[a]+=h.x,o[a+1]+=h.y,o[a+2]+=h.z,o[n]+=h.x,o[n+1]+=h.y,o[n+2]+=h.z,o[i]+=h.x,o[i+1]+=h.y,o[i+2]+=h.z;for(var d=1;d<this.prefabCount;d++)for(var p=0;p<c;p++)o[d*c+p]=o[p];this.normalizeNormals(),e.normal.needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(t,e){var r=new Float32Array(this.prefabCount*this.prefabVertexCount*e),a=new THREE.BufferAttribute(r,e);return this.addAttribute(t,a),a},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y,i[n++]=o.z,i[n++]=o.w}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y,i[n++]=o.z}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(t,e){var r,a,n=0,i=this.geometry.attributes[t].array;for(r=0;r<this.prefabCount;r++){var o=e[r];for(a=0;a<this.prefabVertexCount;a++)i[n++]=o.x,i[n++]=o.y}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.BaseAnimationMaterial=function(t){THREE.ShaderMaterial.call(this),this.shaderFunctions=[],this.shaderParameters=[],this.shaderVertexInit=[],this.shaderTransformNormal=[],this.shaderTransformPosition=[],this.setValues(t)},THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial,THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""},THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shaderFunctions.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shaderParameters.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shaderVertexInit.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shaderTransformNormal.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shaderTransformPosition.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(t){for(var e in t)if(e in this.uniforms){var r=this.uniforms[e],a=t[e];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":r.value=a}}},THREE.BAS.PhongAnimationMaterial=function(t,e){THREE.BAS.BaseAnimationMaterial.call(this,t);var r=THREE.ShaderLib.phong;this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]),this.lights=!0,this.vertexShader=this._concatVertexShader(),this.fragmentShader=r.fragmentShader,e.map&&(this.defines.USE_MAP=""),e.normalMap&&(this.defines.USE_NORMALMAP=""),this.setUniformValues(e)},THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype),THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial,THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,this._concatTransformNormal(),THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,this._concatTransformPosition(),THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJUeHRUeXBlIiwiZWwiLCJ0b1JvdGF0ZSIsInBlcmlvZCIsInRoaXMiLCJsb29wTnVtIiwicGFyc2VJbnQiLCJ0eHQiLCJ0aWNrIiwiaXNEZWxldGluZyIsIm1Db250YWluZXIiLCJtQ2FtZXJhIiwibVJlbmRlcmVyIiwibUNvbnRyb2xzIiwibVNjZW5lIiwicHJvdG90eXBlIiwiaSIsImxlbmd0aCIsImZ1bGxUeHQiLCJzdWJzdHJpbmciLCJpbm5lckhUTUwiLCJ0aGF0IiwiZGVsdGEiLCJNYXRoIiwicmFuZG9tIiwic2V0VGltZW91dCIsIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiZWxlbWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJvbiIsImNzcyIsImFuaW1lIiwidGFyZ2V0cyIsInRyYW5zbGF0ZVkiLCJvcGFjaXR5IiwiZWFzaW5nIiwiZHVyYXRpb24iLCJkZWxheSIsImVhY2giLCJmb2N1cyIsInBhcmVudCIsImFkZENsYXNzIiwiZm9udFNpemUiLCJmb2N1c291dCIsInZhbCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJtUGFydGljbGVTeXN0ZW0iLCJtUGFydGljbGVDb3VudCIsIm1UaW1lIiwibVRpbWVTdGVwIiwibUR1cmF0aW9uIiwiaW5pdCIsImluaXRUSFJFRSIsImluaXRDb250cm9scyIsImluaXRQYXJ0aWNsZVN5c3RlbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNpemUiLCJsaWdodCIsIlRIUkVFIiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFNpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXRDbGVhckNvbG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInBvc2l0aW9uIiwic2V0IiwiU2NlbmUiLCJBbWJpZW50TGlnaHQiLCJhZGQiLCJPcmJpdENvbnRyb2xzIiwicHJlZmFiR2VvbWV0cnkiLCJQbGFuZUdlb21ldHJ5IiwiYnVmZmVyR2VvbWV0cnkiLCJCQVMiLCJQcmVmYWJCdWZmZXJHZW9tZXRyeSIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiaiIsIm9mZnNldCIsIngiLCJ5IiwieiIsImFPZmZzZXQiLCJjcmVhdGVBdHRyaWJ1dGUiLCJhU3RhcnRQb3NpdGlvbiIsImFDb250cm9sUG9pbnQxIiwiYUNvbnRyb2xQb2ludDIiLCJhRW5kUG9zaXRpb24iLCJhQXhpc0FuZ2xlIiwiYUNvbG9yIiwidmVydGljZXMiLCJhcnJheSIsInJhbmRGbG9hdCIsImF4aXMiLCJWZWN0b3IzIiwiYW5nbGUiLCJyYW5kRmxvYXRTcHJlYWQiLCJub3JtYWxpemUiLCJQSSIsInJhbmRJbnQiLCJjb2xvciIsIkNvbG9yIiwic2V0SFNMIiwiciIsImciLCJiIiwibWF0ZXJpYWwiLCJQaG9uZ0FuaW1hdGlvbk1hdGVyaWFsIiwidmVydGV4Q29sb3JzIiwiVmVydGV4Q29sb3JzIiwic2hhZGluZyIsIkZsYXRTaGFkaW5nIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJ1bmlmb3JtcyIsInVUaW1lIiwidHlwZSIsInZhbHVlIiwidUR1cmF0aW9uIiwic2hhZGVyRnVuY3Rpb25zIiwiU2hhZGVyQ2h1bmsiLCJzaGFkZXJQYXJhbWV0ZXJzIiwic2hhZGVyVmVydGV4SW5pdCIsInNoYWRlclRyYW5zZm9ybU5vcm1hbCIsInNoYWRlclRyYW5zZm9ybVBvc2l0aW9uIiwic3BlY3VsYXIiLCJzaGluaW5lc3MiLCJNZXNoIiwiZnJ1c3R1bUN1bGxlZCIsInVwZGF0ZSIsInJlbmRlciIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJvbmxvYWQiLCJwcmVmYWIiLCJjb3VudCIsIkJ1ZmZlckdlb21ldHJ5IiwiY2FsbCIsInByZWZhYkNvdW50IiwicHJlZmFiVmVydGV4Q291bnQiLCJidWZmZXJEZWZhdWx0cyIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwicHJlZmFiRmFjZUNvdW50IiwiZmFjZXMiLCJwcmVmYWJJbmRleENvdW50IiwicHJlZmFiSW5kaWNlcyIsImgiLCJmYWNlIiwicHVzaCIsImEiLCJjIiwiaW5kZXhCdWZmZXIiLCJVaW50MzJBcnJheSIsInBvc2l0aW9uQnVmZmVyIiwiRmxvYXQzMkFycmF5Iiwic2V0SW5kZXgiLCJCdWZmZXJBdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGUiLCJwcmVmYWJWZXJ0ZXgiLCJrIiwiaW5kZXgiLCJhdHRyaWJ1dGVzIiwicG9zaXRpb25zIiwidW5kZWZpbmVkIiwibm9ybWFsIiwidkEiLCJ2QiIsInZDIiwibm9ybWFscyIsInBBIiwicEIiLCJwQyIsImNiIiwiYWIiLCJpbmRpY2VzIiwiZnJvbUFycmF5Iiwic3ViVmVjdG9ycyIsImNyb3NzIiwibm9ybWFsaXplTm9ybWFscyIsIm5lZWRzVXBkYXRlIiwibmFtZSIsIml0ZW1TaXplIiwiYnVmZmVyIiwiYXR0cmlidXRlIiwic2V0QXR0cmlidXRlNCIsImRhdGEiLCJnZW9tZXRyeSIsInYiLCJ3Iiwic2V0QXR0cmlidXRlMyIsInNldEF0dHJpYnV0ZTIiLCJCYXNlQW5pbWF0aW9uTWF0ZXJpYWwiLCJwYXJhbWV0ZXJzIiwiU2hhZGVyTWF0ZXJpYWwiLCJzZXRWYWx1ZXMiLCJfY29uY2F0VmVydGV4U2hhZGVyIiwiX2NvbmNhdEZ1bmN0aW9ucyIsImpvaW4iLCJfY29uY2F0UGFyYW1ldGVycyIsIl9jb25jYXRWZXJ0ZXhJbml0IiwiX2NvbmNhdFRyYW5zZm9ybU5vcm1hbCIsIl9jb25jYXRUcmFuc2Zvcm1Qb3NpdGlvbiIsInNldFVuaWZvcm1WYWx1ZXMiLCJ2YWx1ZXMiLCJrZXkiLCJ1bmlmb3JtIiwiY29weSIsInVuaWZvcm1WYWx1ZXMiLCJwaG9uZ1NoYWRlciIsIlNoYWRlckxpYiIsIlVuaWZvcm1zVXRpbHMiLCJtZXJnZSIsImxpZ2h0cyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50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QUF5QixVQUMvQmxFLE1BQU1rRSxZQUEwQixXQUNoQ2xFLE1BQU1rRSxZQUE0QixhQUNsQ2xFLE1BQU1rRSxZQUFrQyxtQkFFeENoSSxLQUFLa04seUJBRUxwSixNQUFNa0UsWUFBa0MsbUJBQ3hDbEUsTUFBTWtFLFlBQStCLGdCQUNyQ2xFLE1BQU1rRSxZQUFpQyxrQkFDdkNsRSxNQUFNa0UsWUFBb0MscUJBRTFDLHNCQUVBLDhDQUVBLFNBRUFsRSxNQUFNa0UsWUFBNEIsYUFFbENoSSxLQUFLbU4sMkJBRUxySixNQUFNa0UsWUFBc0MsdUJBQzVDbEUsTUFBTWtFLFlBQWtDLG1CQUN4Q2xFLE1BQU1rRSxZQUErQixnQkFDckNsRSxNQUFNa0UsWUFBOEIsZUFDcENsRSxNQUFNa0UsWUFBa0MsbUJBRXhDLHNDQUVBbEUsTUFBTWtFLFlBQStCLGdCQUNyQ2xFLE1BQU1rRSxZQUE2QixjQUNuQ2xFLE1BQU1rRSxZQUFtQyxvQkFDekNsRSxNQUFNa0UsWUFBZ0MsaUJBRXRDLEtBRUErRSxLQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVHlwaW5nIHRleHRcclxubGV0IFR4dFR5cGUgPSBmdW5jdGlvbihlbCwgdG9Sb3RhdGUsIHBlcmlvZCkge1xyXG4gIHRoaXMudG9Sb3RhdGUgPSB0b1JvdGF0ZTtcclxuICB0aGlzLmVsID0gZWw7XHJcbiAgdGhpcy5sb29wTnVtID0gMDtcclxuICB0aGlzLnBlcmlvZCA9IHBhcnNlSW50KHBlcmlvZCwgMTApIHx8IDIwMDA7XHJcbiAgdGhpcy50eHQgPSAnV2UgYnVpbGQgJztcclxuICB0aGlzLnRpY2soKTtcclxuICB0aGlzLmlzRGVsZXRpbmcgPSBmYWxzZTtcclxufTtcclxuVHh0VHlwZS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKCkge1xyXG4gIGxldCBpID0gdGhpcy5sb29wTnVtICUgdGhpcy50b1JvdGF0ZS5sZW5ndGg7XHJcblxyXG4gIGxldCBmdWxsVHh0ID0gdGhpcy50b1JvdGF0ZVtpXTtcclxuXHJcbiAgaWYgKHRoaXMuaXNEZWxldGluZykge1xyXG4gICAgdGhpcy50eHQgPSBmdWxsVHh0LnN1YnN0cmluZygwLCB0aGlzLnR4dC5sZW5ndGggLSAxKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy50eHQgPSBmdWxsVHh0LnN1YnN0cmluZygwLCB0aGlzLnR4dC5sZW5ndGggKyAxKTtcclxuICB9XHJcblxyXG4gIHRoaXMuZWwuaW5uZXJIVE1MID0gJ1dlIGJ1aWxkJyArICc8YnI+ICcgKyAnJmVuc3A7JyArICc8c3BhbiBjbGFzcz1cIndyYXBcIj4nK3RoaXMudHh0Kyc8L3NwYW4+JztcclxuXHJcbiAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gIGxldCBkZWx0YSA9IDIwMCAtIE1hdGgucmFuZG9tKCkgKiAxMDA7XHJcblxyXG4gIGlmICh0aGlzLmlzRGVsZXRpbmcpIHsgZGVsdGEgLz0gMjsgfVxyXG5cclxuICBpZiAoIXRoaXMuaXNEZWxldGluZyAmJiB0aGlzLnR4dCA9PT0gZnVsbFR4dCkge1xyXG4gICAgZGVsdGEgPSB0aGlzLnBlcmlvZDtcclxuICAgIHRoaXMuaXNEZWxldGluZyA9IHRydWU7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmlzRGVsZXRpbmcgJiYgdGhpcy50eHQgPT09ICcnKSB7XHJcbiAgICB0aGlzLmlzRGVsZXRpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMubG9vcE51bSsrO1xyXG4gICAgZGVsdGEgPSA1MDA7XHJcbiAgfVxyXG5cclxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgdGhhdC50aWNrKCk7XHJcbiAgfSwgZGVsdGEpO1xyXG59O1xyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzLXR5cGVkLXRleHQnKTtcclxuICB2YXIgdG9Sb3RhdGUgPSBlbGVtZW50WzBdLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XHJcbiAgdmFyIHBlcmlvZCA9IGVsZW1lbnRbMF0uZ2V0QXR0cmlidXRlKCdkYXRhLXBlcmlvZCcpO1xyXG4gIGlmICh0b1JvdGF0ZSkge1xyXG4gICAgbmV3IFR4dFR5cGUoZWxlbWVudFswXSwgSlNPTi5wYXJzZSh0b1JvdGF0ZSksIHBlcmlvZCk7XHJcbiAgfVxyXG59KTtcclxuLy8gUG9wdXAgYW5pbWF0aW9uXHJcbiQoJy5qcy1zaG93LXBvcHVwJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICQoJyNob21lcGFnZS1iZy1hbmltYXRpb24nKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gIGFuaW1lKHtcclxuICAgIHRhcmdldHM6ICcucG9wLXVwJyxcclxuICAgIHRyYW5zbGF0ZVk6IDAsXHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcclxuICAgIGR1cmF0aW9uOiA1MDBcclxuICB9KTtcclxuICBhbmltZSh7XHJcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19maWVsZCcsXHJcbiAgICB0cmFuc2xhdGVZOiAwLFxyXG4gICAgb3BhY2l0eTogMSxcclxuICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgZGVsYXk6IDUwMFxyXG4gIH0pO1xyXG4gIGFuaW1lKHtcclxuICAgIHRhcmdldHM6ICcubGlzdC1mb3JtIC5idG4nLFxyXG4gICAgdHJhbnNsYXRlWTogMCxcclxuICAgIG9wYWNpdHk6IDEsXHJcbiAgICBlYXNpbmc6ICdsaW5lYXInLFxyXG4gICAgZHVyYXRpb246IDUwMCxcclxuICAgIGRlbGF5OiAxMDAwXHJcbiAgfSk7XHJcbn0pO1xyXG4kKCcuanMtcG9wdXAtY2xvc2UnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgJCgnI2hvbWVwYWdlLWJnLWFuaW1hdGlvbicpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gIGFuaW1lKHtcclxuICAgIHRhcmdldHM6ICcucG9wLXVwJyxcclxuICAgIHRyYW5zbGF0ZVk6ICctMTAwJScsXHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcclxuICAgIGR1cmF0aW9uOiA1MDBcclxuICB9KTtcclxuICBhbmltZSh7XHJcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19maWVsZCcsXHJcbiAgICB0cmFuc2xhdGVZOiAtMTUwLFxyXG4gICAgb3BhY2l0eTogMC40LFxyXG4gICAgZWFzaW5nOiAnbGluZWFyJyxcclxuICAgIGR1cmF0aW9uOiA1MDBcclxuICB9KTtcclxuICBhbmltZSh7XHJcbiAgICB0YXJnZXRzOiAnLmxpc3QtZm9ybSAuYnRuJyxcclxuICAgIHRyYW5zbGF0ZVk6IDUwLFxyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICBkdXJhdGlvbjogNTAwXHJcbiAgfSk7XHJcbn0pO1xyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLnBvcC11cCcpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVkoLTEwMCUpJyk7XHJcbiAgJCgnLnBvcC11cCcpLmNzcygnb3BhY2l0eScsICcxJyk7XHJcbiAgJCgnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19maWVsZCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKC0xNTBweCknKTtcclxuICAgICQodGhpcykuY3NzKCdvcGFjaXR5JywgJzAuNCcpO1xyXG4gIH0pO1xyXG4gICQoJy5saXN0LWZvcm0gLmJ0bicpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVkoMTUwcHgpJyk7XHJcbiAgJCgnLmxpc3QtZm9ybSAuYnRuJykuY3NzKCdvcGFjaXR5JywgJzAnKTtcclxufSk7XHJcbi8vIEZpZWxkIGxhYmVsIGFuaW1hdGlvblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19sYWJlbCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKDE0cHgpJyk7XHJcbiAgICAkKHRoaXMpLmNzcygnZm9udC1zaXplJywgJzE2cHgnKVxyXG4gIH0pO1xyXG59KTtcclxuJCgnLmxpc3QtZm9ybSAubGlzdC1mb3JtX19pbnB1dCcpLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuICAkKHRoaXMpLnBhcmVudCgpLmFkZENsYXNzKCdmb2N1c2VkJyk7XHJcbiAgYW5pbWUoe1xyXG4gICAgdGFyZ2V0czogJy5saXN0LWZvcm1fX2ZpZWxkLmZvY3VzZWQgLmxpc3QtZm9ybV9fbGFiZWwnLFxyXG4gICAgdHJhbnNsYXRlWTogJy0xMnB4JyxcclxuICAgIGZvbnRTaXplOiAxMixcclxuICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICBkdXJhdGlvbjogMjAwXHJcbiAgfSk7XHJcbn0pO1xyXG4kKCcubGlzdC1mb3JtIC5saXN0LWZvcm1fX2lucHV0JykuZm9jdXNvdXQoZnVuY3Rpb24gKCkge1xyXG4gIGlmKCQodGhpcykudmFsKCkpIHtcclxuICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ2ZpbGwnKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBhbmltZSh7XHJcbiAgICAgIHRhcmdldHM6ICcubGlzdC1mb3JtX19maWVsZC5mb2N1c2VkIC5saXN0LWZvcm1fX2xhYmVsJyxcclxuICAgICAgdHJhbnNsYXRlWTogJzE0cHgnLFxyXG4gICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgIGVhc2luZzogJ2xpbmVhcicsXHJcbiAgICAgIGR1cmF0aW9uOiAyMDBcclxuICAgIH0pO1xyXG4gICAgaWYoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcygnZmlsbCcpKSB7XHJcbiAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2ZpbGwnKVxyXG4gICAgfVxyXG4gIH1cclxuICAkKHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdmb2N1c2VkJyk7XHJcbn0pO1xyXG4vLyBIb21lcGFnZSBiZyBhbmltYXRpb25cclxudmFyIG1Db250YWluZXI7XHJcbnZhciBtQ2FtZXJhLCBtUmVuZGVyZXI7XHJcbnZhciBtQ29udHJvbHM7XHJcbnZhciBtU2NlbmU7XHJcbnZhciBtUGFydGljbGVDb3VudCA9IDgwMDA7XHJcbnZhciBtUGFydGljbGVTeXN0ZW07XHJcbnZhciBtVGltZSA9IDAuMDtcclxudmFyIG1UaW1lU3RlcCA9ICgxLzI3MCk7XHJcbnZhciBtRHVyYXRpb24gPSAyMDtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgaW5pdCgpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICBpbml0VEhSRUUoKTtcclxuICBpbml0Q29udHJvbHMoKTtcclxuICBpbml0UGFydGljbGVTeXN0ZW0oKTtcclxuXHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemUsIGZhbHNlKTtcclxufVxyXG5mdW5jdGlvbiBpbml0VEhSRUUoKSB7XHJcbiAgbVJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FudGlhbGlhczogdHJ1ZX0pO1xyXG4gIG1SZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gIG1SZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MzA0ZmZlKTtcclxuXHJcbiAgbUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdob21lcGFnZS1iZy1hbmltYXRpb24nKTtcclxuICBtQ29udGFpbmVyLmFwcGVuZENoaWxkKG1SZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgbUNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg2MCwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgNTAwMCk7XHJcbiAgbUNhbWVyYS5wb3NpdGlvbi5zZXQoLTEzMDAsIDAsIDApO1xyXG5cclxuICBtU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuXHJcbiAgdmFyIGxpZ2h0O1xyXG5cclxuICBsaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYpO1xyXG4gIG1TY2VuZS5hZGQobGlnaHQpO1xyXG59XHJcbmZ1bmN0aW9uIGluaXRDb250cm9scygpIHtcclxuICBtQ29udHJvbHMgPSBuZXcgVEhSRUUuT3JiaXRDb250cm9scyhtQ2FtZXJhLCBtUmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcbn1cclxuZnVuY3Rpb24gaW5pdFBhcnRpY2xlU3lzdGVtKCkge1xyXG4gIHZhciBwcmVmYWJHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDQsIDQpO1xyXG4gIHZhciBidWZmZXJHZW9tZXRyeSA9IG5ldyBUSFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkocHJlZmFiR2VvbWV0cnksIG1QYXJ0aWNsZUNvdW50KTtcclxuXHJcbiAgYnVmZmVyR2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuXHJcbiAgLy8gZ2VuZXJhdGUgYWRkaXRpb25hbCBnZW9tZXRyeSBkYXRhXHJcbiAgdmFyIGFPZmZzZXQgPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2FPZmZzZXQnLCAxKTtcclxuICB2YXIgYVN0YXJ0UG9zaXRpb24gPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2FTdGFydFBvc2l0aW9uJywgMyk7XHJcbiAgdmFyIGFDb250cm9sUG9pbnQxID0gYnVmZmVyR2VvbWV0cnkuY3JlYXRlQXR0cmlidXRlKCdhQ29udHJvbFBvaW50MScsIDMpO1xyXG4gIHZhciBhQ29udHJvbFBvaW50MiA9IGJ1ZmZlckdlb21ldHJ5LmNyZWF0ZUF0dHJpYnV0ZSgnYUNvbnRyb2xQb2ludDInLCAzKTtcclxuICB2YXIgYUVuZFBvc2l0aW9uID0gYnVmZmVyR2VvbWV0cnkuY3JlYXRlQXR0cmlidXRlKCdhRW5kUG9zaXRpb24nLCAzKTtcclxuICB2YXIgYUF4aXNBbmdsZSA9IGJ1ZmZlckdlb21ldHJ5LmNyZWF0ZUF0dHJpYnV0ZSgnYUF4aXNBbmdsZScsIDQpO1xyXG4gIHZhciBhQ29sb3IgPSBidWZmZXJHZW9tZXRyeS5jcmVhdGVBdHRyaWJ1dGUoJ2NvbG9yJywgMyk7XHJcblxyXG4gIHZhciBpLCBqLCBvZmZzZXQ7XHJcblxyXG4gIC8vIGJ1ZmZlciB0aW1lIG9mZnNldFxyXG4gIHZhciBkZWxheTtcclxuXHJcbiAgZm9yIChpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IG1QYXJ0aWNsZUNvdW50OyBpKyspIHtcclxuICAgIGRlbGF5ID0gaSAvIG1QYXJ0aWNsZUNvdW50ICogbUR1cmF0aW9uO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhT2Zmc2V0LmFycmF5W29mZnNldCsrXSA9IGRlbGF5O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gYnVmZmVyIHN0YXJ0IHBvc2l0aW9uc1xyXG4gIHZhciB4LCB5LCB6O1xyXG5cclxuICBmb3IgKGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgbVBhcnRpY2xlQ291bnQ7IGkrKykge1xyXG4gICAgeCA9IDA7XHJcbiAgICB5ID0gMTAwMDtcclxuICAgIHogPSAwO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhU3RhcnRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB4O1xyXG4gICAgICBhU3RhcnRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB5O1xyXG4gICAgICBhU3RhcnRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB6O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gYnVmZmVyIGNvbnRyb2wgcG9pbnRzXHJcblxyXG4gIGZvciAoaSA9IDAsIG9mZnNldCA9IDA7IGkgPCBtUGFydGljbGVDb3VudDsgaSsrKSB7XHJcbiAgICB4ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXQoLTQwMCwgNDAwKTtcclxuICAgIHkgPSBUSFJFRS5NYXRoLnJhbmRGbG9hdCg0MDAsIDYwMCk7XHJcbiAgICB6ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXQoLTE4MDAsIC00MDApO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhQ29udHJvbFBvaW50MS5hcnJheVtvZmZzZXQrK10gPSB4O1xyXG4gICAgICBhQ29udHJvbFBvaW50MS5hcnJheVtvZmZzZXQrK10gPSB5O1xyXG4gICAgICBhQ29udHJvbFBvaW50MS5hcnJheVtvZmZzZXQrK10gPSB6O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZm9yIChpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IG1QYXJ0aWNsZUNvdW50OyBpKyspIHtcclxuICAgIHggPSBUSFJFRS5NYXRoLnJhbmRGbG9hdCgtNDAwLCA0MDApO1xyXG4gICAgeSA9IFRIUkVFLk1hdGgucmFuZEZsb2F0KC02MDAsIC00MDApO1xyXG4gICAgeiA9IFRIUkVFLk1hdGgucmFuZEZsb2F0KDQwMCwgMTgwMCk7XHJcblxyXG4gICAgZm9yIChqID0gMDsgaiA8IHByZWZhYkdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgIGFDb250cm9sUG9pbnQyLmFycmF5W29mZnNldCsrXSA9IHg7XHJcbiAgICAgIGFDb250cm9sUG9pbnQyLmFycmF5W29mZnNldCsrXSA9IHk7XHJcbiAgICAgIGFDb250cm9sUG9pbnQyLmFycmF5W29mZnNldCsrXSA9IHo7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBidWZmZXIgZW5kIHBvc2l0aW9uc1xyXG5cclxuICBmb3IgKGkgPSAwLCBvZmZzZXQgPSAwOyBpIDwgbVBhcnRpY2xlQ291bnQ7IGkrKykge1xyXG4gICAgeCA9IDA7XHJcbiAgICB5ID0gLTEwMDA7XHJcbiAgICB6ID0gMDtcclxuXHJcbiAgICBmb3IgKGogPSAwOyBqIDwgcHJlZmFiR2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgYUVuZFBvc2l0aW9uLmFycmF5W29mZnNldCsrXSA9IHg7XHJcbiAgICAgIGFFbmRQb3NpdGlvbi5hcnJheVtvZmZzZXQrK10gPSB5O1xyXG4gICAgICBhRW5kUG9zaXRpb24uYXJyYXlbb2Zmc2V0KytdID0gejtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGJ1ZmZlciBheGlzIGFuZ2xlXHJcbiAgdmFyIGF4aXMgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIHZhciBhbmdsZSA9IDA7XHJcblxyXG4gIGZvciAoaSA9IDAsIG9mZnNldCA9IDA7IGkgPCBtUGFydGljbGVDb3VudDsgaSsrKSB7XHJcbiAgICBheGlzLnggPSBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZCgyKTtcclxuICAgIGF4aXMueSA9IFRIUkVFLk1hdGgucmFuZEZsb2F0U3ByZWFkKDIpO1xyXG4gICAgYXhpcy56ID0gVEhSRUUuTWF0aC5yYW5kRmxvYXRTcHJlYWQoMik7XHJcbiAgICBheGlzLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgIGFuZ2xlID0gTWF0aC5QSSAqIFRIUkVFLk1hdGgucmFuZEludCgxNiwgMzIpO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhQXhpc0FuZ2xlLmFycmF5W29mZnNldCsrXSA9IGF4aXMueDtcclxuICAgICAgYUF4aXNBbmdsZS5hcnJheVtvZmZzZXQrK10gPSBheGlzLnk7XHJcbiAgICAgIGFBeGlzQW5nbGUuYXJyYXlbb2Zmc2V0KytdID0gYXhpcy56O1xyXG4gICAgICBhQXhpc0FuZ2xlLmFycmF5W29mZnNldCsrXSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gYnVmZmVyIGNvbG9yXHJcbiAgdmFyIGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCk7XHJcbiAgdmFyIGgsIHMsIGw7XHJcblxyXG4gIGZvciAoaSA9IDAsIG9mZnNldCA9IDA7IGkgPCBtUGFydGljbGVDb3VudDsgaSsrKSB7XHJcbiAgICBoID0gMDtcclxuICAgIHMgPSAwO1xyXG4gICAgbCA9IDA7XHJcblxyXG4gICAgY29sb3Iuc2V0SFNMKGgsIHMsIGwpO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCBwcmVmYWJHZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhQ29sb3IuYXJyYXlbb2Zmc2V0KytdID0gY29sb3IucjtcclxuICAgICAgYUNvbG9yLmFycmF5W29mZnNldCsrXSA9IGNvbG9yLmc7XHJcbiAgICAgIGFDb2xvci5hcnJheVtvZmZzZXQrK10gPSBjb2xvci5iO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsKFxyXG4gICAgLy8gY3VzdG9tIHBhcmFtZXRlcnMgJiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCBwYXJhbWV0ZXJzXHJcbiAgICB7XHJcbiAgICAgIHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzLFxyXG4gICAgICBzaGFkaW5nOiBUSFJFRS5GbGF0U2hhZGluZyxcclxuICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZSxcclxuICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICB1VGltZToge3R5cGU6ICdmJywgdmFsdWU6IDB9LFxyXG4gICAgICAgIHVEdXJhdGlvbjoge3R5cGU6ICdmJywgdmFsdWU6IG1EdXJhdGlvbn1cclxuICAgICAgfSxcclxuICAgICAgc2hhZGVyRnVuY3Rpb25zOiBbXHJcbiAgICAgICAgVEhSRUUuQkFTLlNoYWRlckNodW5rWydxdWF0ZXJuaW9uX3JvdGF0aW9uJ10sXHJcbiAgICAgICAgVEhSRUUuQkFTLlNoYWRlckNodW5rWydjdWJpY19iZXppZXInXVxyXG4gICAgICBdLFxyXG4gICAgICBzaGFkZXJQYXJhbWV0ZXJzOiBbXHJcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVRpbWU7JyxcclxuICAgICAgICAndW5pZm9ybSBmbG9hdCB1RHVyYXRpb247JyxcclxuICAgICAgICAnYXR0cmlidXRlIGZsb2F0IGFPZmZzZXQ7JyxcclxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYVN0YXJ0UG9zaXRpb247JyxcclxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYUNvbnRyb2xQb2ludDE7JyxcclxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYUNvbnRyb2xQb2ludDI7JyxcclxuICAgICAgICAnYXR0cmlidXRlIHZlYzMgYUVuZFBvc2l0aW9uOycsXHJcbiAgICAgICAgJ2F0dHJpYnV0ZSB2ZWM0IGFBeGlzQW5nbGU7J1xyXG4gICAgICBdLFxyXG4gICAgICBzaGFkZXJWZXJ0ZXhJbml0OiBbXHJcbiAgICAgICAgJ2Zsb2F0IHRQcm9ncmVzcyA9IG1vZCgodVRpbWUgKyBhT2Zmc2V0KSwgdUR1cmF0aW9uKSAvIHVEdXJhdGlvbjsnLFxyXG5cclxuICAgICAgICAnZmxvYXQgYW5nbGUgPSBhQXhpc0FuZ2xlLncgKiB0UHJvZ3Jlc3M7JyxcclxuICAgICAgICAndmVjNCB0UXVhdCA9IHF1YXRGcm9tQXhpc0FuZ2xlKGFBeGlzQW5nbGUueHl6LCBhbmdsZSk7J1xyXG4gICAgICBdLFxyXG4gICAgICBzaGFkZXJUcmFuc2Zvcm1Ob3JtYWw6IFtcclxuICAgICAgICAnb2JqZWN0Tm9ybWFsID0gcm90YXRlVmVjdG9yKHRRdWF0LCBvYmplY3ROb3JtYWwpOydcclxuICAgICAgXSxcclxuICAgICAgc2hhZGVyVHJhbnNmb3JtUG9zaXRpb246IFtcclxuICAgICAgICAndHJhbnNmb3JtZWQgPSByb3RhdGVWZWN0b3IodFF1YXQsIHRyYW5zZm9ybWVkKTsnLFxyXG4gICAgICAgICd0cmFuc2Zvcm1lZCArPSBjdWJpY0JlemllcihhU3RhcnRQb3NpdGlvbiwgYUNvbnRyb2xQb2ludDEsIGFDb250cm9sUG9pbnQyLCBhRW5kUG9zaXRpb24sIHRQcm9ncmVzcyk7J1xyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAgLy8gVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwgdW5pZm9ybXNcclxuICAgIHtcclxuICAgICAgc3BlY3VsYXI6IDB4ZmYwMDAwLFxyXG4gICAgICBzaGluaW5lc3M6IDIwXHJcbiAgICB9XHJcbiAgKTtcclxuICBtUGFydGljbGVTeXN0ZW0gPSBuZXcgVEhSRUUuTWVzaChidWZmZXJHZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gIC8vIGJlY2F1c2UgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgcGFydGljbGUgc3lzdGVtIGRvZXMgbm90IHJlZmxlY3QgaXRzIG9uLXNjcmVlbiBzaXplXHJcbiAgLy8gc2V0IHRoaXMgdG8gZmFsc2UgdG8gcHJldmVudCB0aGUgd2hvbGUgdGhpbmcgZnJvbSBkaXNhcHBlYXJpbmcgb24gY2VydGFpbiBhbmdsZXNcclxuICBtUGFydGljbGVTeXN0ZW0uZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xyXG4gIG1TY2VuZS5hZGQobVBhcnRpY2xlU3lzdGVtKTtcclxufVxyXG5mdW5jdGlvbiB0aWNrKCkge1xyXG4gIHVwZGF0ZSgpO1xyXG4gIHJlbmRlcigpO1xyXG5cclxuICBtVGltZSArPSBtVGltZVN0ZXA7XHJcbiAgbVRpbWUgJT0gbUR1cmF0aW9uO1xyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljayk7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gIG1Db250cm9scy51cGRhdGUoKTtcclxuICBtUGFydGljbGVTeXN0ZW0ubWF0ZXJpYWwudW5pZm9ybXNbJ3VUaW1lJ10udmFsdWUgPSBtVGltZTtcclxufVxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgbVJlbmRlcmVyLnJlbmRlcihtU2NlbmUsIG1DYW1lcmEpO1xyXG59XHJcbmZ1bmN0aW9uIHJlc2l6ZSgpIHtcclxuICBtQ2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gIG1DYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuICBtUmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8gYnVmZmVyIGFuaW1hdGlvbiBzeXN0ZW1cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcblRIUkVFLkJBUyA9IHt9O1xyXG5USFJFRS5CQVMuU2hhZGVyQ2h1bmsgPSB7fTtcclxuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wiYW5pbWF0aW9uX3RpbWVcIl0gPSBcImZsb2F0IHREZWxheSA9IGFBbmltYXRpb24ueDtcXG5mbG9hdCB0RHVyYXRpb24gPSBhQW5pbWF0aW9uLnk7XFxuZmxvYXQgdFRpbWUgPSBjbGFtcCh1VGltZSAtIHREZWxheSwgMC4wLCB0RHVyYXRpb24pO1xcbmZsb2F0IHRQcm9ncmVzcyA9IGVhc2UodFRpbWUsIDAuMCwgMS4wLCB0RHVyYXRpb24pO1xcblwiO1xyXG5USFJFRS5CQVMuU2hhZGVyQ2h1bmtbXCJjdWJpY19iZXppZXJcIl0gPSBcInZlYzMgY3ViaWNCZXppZXIodmVjMyBwMCwgdmVjMyBjMCwgdmVjMyBjMSwgdmVjMyBwMSwgZmxvYXQgdClcXG57XFxuICAgIHZlYzMgdHA7XFxuICAgIGZsb2F0IHRuID0gMS4wIC0gdDtcXG5cXG4gICAgdHAueHl6ID0gdG4gKiB0biAqIHRuICogcDAueHl6ICsgMy4wICogdG4gKiB0biAqIHQgKiBjMC54eXogKyAzLjAgKiB0biAqIHQgKiB0ICogYzEueHl6ICsgdCAqIHQgKiB0ICogcDEueHl6O1xcblxcbiAgICByZXR1cm4gdHA7XFxufVxcblwiO1xyXG5USFJFRS5CQVMuU2hhZGVyQ2h1bmtbXCJlYXNlX2luX2N1YmljXCJdID0gXCJmbG9hdCBlYXNlKGZsb2F0IHQsIGZsb2F0IGIsIGZsb2F0IGMsIGZsb2F0IGQpIHtcXG4gIHJldHVybiBjKih0Lz1kKSp0KnQgKyBiO1xcbn1cXG5cIjtcclxuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wiZWFzZV9pbl9xdWFkXCJdID0gXCJmbG9hdCBlYXNlKGZsb2F0IHQsIGZsb2F0IGIsIGZsb2F0IGMsIGZsb2F0IGQpIHtcXG4gIHJldHVybiBjKih0Lz1kKSp0ICsgYjtcXG59XFxuXCI7XHJcblRIUkVFLkJBUy5TaGFkZXJDaHVua1tcImVhc2Vfb3V0X2N1YmljXCJdID0gXCJmbG9hdCBlYXNlKGZsb2F0IHQsIGZsb2F0IGIsIGZsb2F0IGMsIGZsb2F0IGQpIHtcXG4gIHJldHVybiBjKigodD10L2QgLSAxLjApKnQqdCArIDEuMCkgKyBiO1xcbn1cXG5cIjtcclxuVEhSRUUuQkFTLlNoYWRlckNodW5rW1wicXVhdGVybmlvbl9yb3RhdGlvblwiXSA9IFwidmVjMyByb3RhdGVWZWN0b3IodmVjNCBxLCB2ZWMzIHYpXFxue1xcbiAgICByZXR1cm4gdiArIDIuMCAqIGNyb3NzKHEueHl6LCBjcm9zcyhxLnh5eiwgdikgKyBxLncgKiB2KTtcXG59XFxuXFxudmVjNCBxdWF0RnJvbUF4aXNBbmdsZSh2ZWMzIGF4aXMsIGZsb2F0IGFuZ2xlKVxcbntcXG4gICAgZmxvYXQgaGFsZkFuZ2xlID0gYW5nbGUgKiAwLjU7XFxuICAgIHJldHVybiB2ZWM0KGF4aXMueHl6ICogc2luKGhhbGZBbmdsZSksIGNvcyhoYWxmQW5nbGUpKTtcXG59XFxuXCI7XHJcblxyXG5USFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkgPSBmdW5jdGlvbiAocHJlZmFiLCBjb3VudCkge1xyXG4gIFRIUkVFLkJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG4gIHRoaXMucHJlZmFiR2VvbWV0cnkgPSBwcmVmYWI7XHJcbiAgdGhpcy5wcmVmYWJDb3VudCA9IGNvdW50O1xyXG4gIHRoaXMucHJlZmFiVmVydGV4Q291bnQgPSBwcmVmYWIudmVydGljZXMubGVuZ3RoO1xyXG5cclxuICB0aGlzLmJ1ZmZlckRlZmF1bHRzKCk7XHJcbn07XHJcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRIUkVFLkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUSFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuYnVmZmVyRGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHByZWZhYkZhY2VDb3VudCA9IHRoaXMucHJlZmFiR2VvbWV0cnkuZmFjZXMubGVuZ3RoO1xyXG4gIHZhciBwcmVmYWJJbmRleENvdW50ID0gdGhpcy5wcmVmYWJHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xyXG4gIHZhciBwcmVmYWJWZXJ0ZXhDb3VudCA9IHRoaXMucHJlZmFiVmVydGV4Q291bnQgPSB0aGlzLnByZWZhYkdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDtcclxuICB2YXIgcHJlZmFiSW5kaWNlcyA9IFtdO1xyXG5cclxuICBmb3IgKHZhciBoID0gMDsgaCA8IHByZWZhYkZhY2VDb3VudDsgaCsrKSB7XHJcbiAgICB2YXIgZmFjZSA9IHRoaXMucHJlZmFiR2VvbWV0cnkuZmFjZXNbaF07XHJcbiAgICBwcmVmYWJJbmRpY2VzLnB1c2goZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyk7XHJcbiAgfVxyXG5cclxuICB2YXIgaW5kZXhCdWZmZXIgPSBuZXcgVWludDMyQXJyYXkodGhpcy5wcmVmYWJDb3VudCAqIHByZWZhYkluZGV4Q291bnQpO1xyXG4gIHZhciBwb3NpdGlvbkJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wcmVmYWJDb3VudCAqIHByZWZhYlZlcnRleENvdW50ICogMyk7XHJcblxyXG4gIHRoaXMuc2V0SW5kZXgobmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShpbmRleEJ1ZmZlciwgMSkpO1xyXG4gIHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25CdWZmZXIsIDMpKTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIG9mZnNldCA9IDA7IGkgPCB0aGlzLnByZWZhYkNvdW50OyBpKyspIHtcclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlZmFiVmVydGV4Q291bnQ7IGorKywgb2Zmc2V0ICs9IDMpIHtcclxuICAgICAgdmFyIHByZWZhYlZlcnRleCA9IHRoaXMucHJlZmFiR2VvbWV0cnkudmVydGljZXNbal07XHJcblxyXG4gICAgICBwb3NpdGlvbkJ1ZmZlcltvZmZzZXQgICAgXSA9IHByZWZhYlZlcnRleC54O1xyXG4gICAgICBwb3NpdGlvbkJ1ZmZlcltvZmZzZXQgKyAxXSA9IHByZWZhYlZlcnRleC55O1xyXG4gICAgICBwb3NpdGlvbkJ1ZmZlcltvZmZzZXQgKyAyXSA9IHByZWZhYlZlcnRleC56O1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcHJlZmFiSW5kZXhDb3VudDsgaysrKSB7XHJcbiAgICAgIGluZGV4QnVmZmVyW2kgKiBwcmVmYWJJbmRleENvdW50ICsga10gPSBwcmVmYWJJbmRpY2VzW2tdICsgaSAqIHByZWZhYlZlcnRleENvdW50O1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBiYXNlZCBvbiBCdWZmZXJHZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFsc1xyXG4gKiBjYWxjdWxhdGUgdmVydGV4IG5vcm1hbHMgZm9yIGEgcHJlZmFiLCBhbmQgcmVwZWF0IHRoZSBkYXRhIGluIHRoZSBub3JtYWwgYnVmZmVyXHJcbiAqL1xyXG5USFJFRS5CQVMuUHJlZmFiQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XHJcbiAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XHJcbiAgdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcblxyXG4gIGlmIChhdHRyaWJ1dGVzLm5vcm1hbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucy5sZW5ndGgpLCAzKSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xyXG5cclxuICB2YXIgdkEsIHZCLCB2QyxcclxuXHJcbiAgICBwQSA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXHJcbiAgICBwQiA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXHJcbiAgICBwQyA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXHJcblxyXG4gICAgY2IgPSBuZXcgVEhSRUUuVmVjdG9yMygpLFxyXG4gICAgYWIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuICB2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xyXG4gIHZhciBwcmVmYWJJbmRleENvdW50ID0gdGhpcy5wcmVmYWJHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZhYkluZGV4Q291bnQ7IGkgKz0gMykge1xyXG4gICAgdkEgPSBpbmRpY2VzW2kgKyAwXSAqIDM7XHJcbiAgICB2QiA9IGluZGljZXNbaSArIDFdICogMztcclxuICAgIHZDID0gaW5kaWNlc1tpICsgMl0gKiAzO1xyXG5cclxuICAgIHBBLmZyb21BcnJheShwb3NpdGlvbnMsIHZBKTtcclxuICAgIHBCLmZyb21BcnJheShwb3NpdGlvbnMsIHZCKTtcclxuICAgIHBDLmZyb21BcnJheShwb3NpdGlvbnMsIHZDKTtcclxuXHJcbiAgICBjYi5zdWJWZWN0b3JzKHBDLCBwQik7XHJcbiAgICBhYi5zdWJWZWN0b3JzKHBBLCBwQik7XHJcbiAgICBjYi5jcm9zcyhhYik7XHJcblxyXG4gICAgbm9ybWFsc1t2QV0gKz0gY2IueDtcclxuICAgIG5vcm1hbHNbdkEgKyAxXSArPSBjYi55O1xyXG4gICAgbm9ybWFsc1t2QSArIDJdICs9IGNiLno7XHJcblxyXG4gICAgbm9ybWFsc1t2Ql0gKz0gY2IueDtcclxuICAgIG5vcm1hbHNbdkIgKyAxXSArPSBjYi55O1xyXG4gICAgbm9ybWFsc1t2QiArIDJdICs9IGNiLno7XHJcblxyXG4gICAgbm9ybWFsc1t2Q10gKz0gY2IueDtcclxuICAgIG5vcm1hbHNbdkMgKyAxXSArPSBjYi55O1xyXG4gICAgbm9ybWFsc1t2QyArIDJdICs9IGNiLno7XHJcbiAgfVxyXG5cclxuICBmb3IgKHZhciBqID0gMTsgaiA8IHRoaXMucHJlZmFiQ291bnQ7IGorKykge1xyXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBwcmVmYWJJbmRleENvdW50OyBrKyspIHtcclxuICAgICAgbm9ybWFsc1tqICogcHJlZmFiSW5kZXhDb3VudCArIGtdID0gbm9ybWFsc1trXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMubm9ybWFsaXplTm9ybWFscygpO1xyXG5cclxuICBhdHRyaWJ1dGVzLm5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbn07XHJcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUsIGl0ZW1TaXplKSB7XHJcbiAgdmFyIGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wcmVmYWJDb3VudCAqIHRoaXMucHJlZmFiVmVydGV4Q291bnQgKiBpdGVtU2l6ZSk7XHJcbiAgdmFyIGF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYnVmZmVyLCBpdGVtU2l6ZSk7XHJcblxyXG4gIHRoaXMuYWRkQXR0cmlidXRlKG5hbWUsIGF0dHJpYnV0ZSk7XHJcblxyXG4gIHJldHVybiBhdHRyaWJ1dGU7XHJcbn07XHJcblRIUkVFLkJBUy5QcmVmYWJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuc2V0QXR0cmlidXRlNCA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XHJcbiAgdmFyIG9mZnNldCA9IDA7XHJcbiAgdmFyIGFycmF5ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdLmFycmF5O1xyXG4gIHZhciBpLCBqO1xyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIHYgPSBkYXRhW2ldO1xyXG5cclxuICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnByZWZhYlZlcnRleENvdW50OyBqKyspIHtcclxuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi54O1xyXG4gICAgICBhcnJheVtvZmZzZXQrK10gPSB2Lnk7XHJcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYuejtcclxuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi53O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxufTtcclxuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUzID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcclxuICB2YXIgb2Zmc2V0ID0gMDtcclxuICB2YXIgYXJyYXkgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0uYXJyYXk7XHJcbiAgdmFyIGksIGo7XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgdiA9IGRhdGFbaV07XHJcblxyXG4gICAgZm9yIChqID0gMDsgaiA8IHRoaXMucHJlZmFiVmVydGV4Q291bnQ7IGorKykge1xyXG4gICAgICBhcnJheVtvZmZzZXQrK10gPSB2Lng7XHJcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueTtcclxuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi56O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxufTtcclxuVEhSRUUuQkFTLlByZWZhYkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUyID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEpIHtcclxuICB2YXIgb2Zmc2V0ID0gMDtcclxuICB2YXIgYXJyYXkgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXNbbmFtZV0uYXJyYXk7XHJcbiAgdmFyIGksIGo7XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnByZWZhYkNvdW50OyBpKyspIHtcclxuICAgIHZhciB2ID0gZGF0YVtpXTtcclxuXHJcbiAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5wcmVmYWJWZXJ0ZXhDb3VudDsgaisrKSB7XHJcbiAgICAgIGFycmF5W29mZnNldCsrXSA9IHYueDtcclxuICAgICAgYXJyYXlbb2Zmc2V0KytdID0gdi55O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxufTtcclxuXHJcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwgPSBmdW5jdGlvbihwYXJhbWV0ZXJzKSB7XHJcbiAgVEhSRUUuU2hhZGVyTWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcbiAgdGhpcy5zaGFkZXJGdW5jdGlvbnMgPSBbXTtcclxuICB0aGlzLnNoYWRlclBhcmFtZXRlcnMgPSBbXTtcclxuICB0aGlzLnNoYWRlclZlcnRleEluaXQgPSBbXTtcclxuICB0aGlzLnNoYWRlclRyYW5zZm9ybU5vcm1hbCA9IFtdO1xyXG4gIHRoaXMuc2hhZGVyVHJhbnNmb3JtUG9zaXRpb24gPSBbXTtcclxuXHJcbiAgdGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcbn07XHJcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUSFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWw7XHJcblxyXG4vLyBhYnN0cmFjdFxyXG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuICcnO1xyXG59O1xyXG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0RnVuY3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2hhZGVyRnVuY3Rpb25zLmpvaW4oJ1xcbicpO1xyXG59O1xyXG5USFJFRS5CQVMuQmFzZUFuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0UGFyYW1ldGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNoYWRlclBhcmFtZXRlcnMuam9pbignXFxuJyk7XHJcbn07XHJcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLl9jb25jYXRWZXJ0ZXhJbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2hhZGVyVmVydGV4SW5pdC5qb2luKCdcXG4nKTtcclxufTtcclxuVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUuX2NvbmNhdFRyYW5zZm9ybU5vcm1hbCA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLnNoYWRlclRyYW5zZm9ybU5vcm1hbC5qb2luKCdcXG4nKTtcclxufTtcclxuVEhSRUUuQkFTLkJhc2VBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUuX2NvbmNhdFRyYW5zZm9ybVBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuc2hhZGVyVHJhbnNmb3JtUG9zaXRpb24uam9pbignXFxuJyk7XHJcbn07XHJcblRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLnNldFVuaWZvcm1WYWx1ZXMgPSBmdW5jdGlvbih2YWx1ZXMpIHtcclxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7XHJcbiAgICBpZiAoa2V5IGluIHRoaXMudW5pZm9ybXMpIHtcclxuICAgICAgdmFyIHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zW2tleV07XHJcbiAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1trZXldO1xyXG5cclxuICAgICAgLy8gdG9kbyBhZGQgbWF0cml4IHVuaWZvcm0gdHlwZXNcclxuICAgICAgc3dpdGNoICh1bmlmb3JtLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdjJzogLy8gY29sb3JcclxuICAgICAgICAgIHVuaWZvcm0udmFsdWUuc2V0KHZhbHVlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3YyJzogLy8gdmVjdG9yc1xyXG4gICAgICAgIGNhc2UgJ3YzJzpcclxuICAgICAgICBjYXNlICd2NCc6XHJcbiAgICAgICAgICB1bmlmb3JtLnZhbHVlLmNvcHkodmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZic6IC8vIGZsb2F0XHJcbiAgICAgICAgY2FzZSAndCc6IC8vIHRleHR1cmVcclxuICAgICAgICAgIHVuaWZvcm0udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsID0gZnVuY3Rpb24ocGFyYW1ldGVycywgdW5pZm9ybVZhbHVlcykge1xyXG4gIFRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzKTtcclxuXHJcbiAgdmFyIHBob25nU2hhZGVyID0gVEhSRUUuU2hhZGVyTGliWydwaG9uZyddO1xyXG5cclxuICB0aGlzLnVuaWZvcm1zID0gVEhSRUUuVW5pZm9ybXNVdGlscy5tZXJnZShbcGhvbmdTaGFkZXIudW5pZm9ybXMsIHRoaXMudW5pZm9ybXNdKTtcclxuICB0aGlzLmxpZ2h0cyA9IHRydWU7XHJcbiAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSB0aGlzLl9jb25jYXRWZXJ0ZXhTaGFkZXIoKTtcclxuICB0aGlzLmZyYWdtZW50U2hhZGVyID0gcGhvbmdTaGFkZXIuZnJhZ21lbnRTaGFkZXI7XHJcblxyXG4gIC8vIHRvZG8gYWRkIG1pc3NpbmcgZGVmYXVsdCBkZWZpbmVzXHJcbiAgdW5pZm9ybVZhbHVlcy5tYXAgJiYgKHRoaXMuZGVmaW5lc1snVVNFX01BUCddID0gJycpO1xyXG4gIHVuaWZvcm1WYWx1ZXMubm9ybWFsTWFwICYmICh0aGlzLmRlZmluZXNbJ1VTRV9OT1JNQUxNQVAnXSA9ICcnKTtcclxuXHJcbiAgdGhpcy5zZXRVbmlmb3JtVmFsdWVzKHVuaWZvcm1WYWx1ZXMpO1xyXG59O1xyXG5USFJFRS5CQVMuUGhvbmdBbmltYXRpb25NYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRIUkVFLkJBUy5CYXNlQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuVEhSRUUuQkFTLlBob25nQW5pbWF0aW9uTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVEhSRUUuQkFTLlBob25nQW5pbWF0aW9uTWF0ZXJpYWw7XHJcblRIUkVFLkJBUy5QaG9uZ0FuaW1hdGlvbk1hdGVyaWFsLnByb3RvdHlwZS5fY29uY2F0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gYmFzZWQgb24gVEhSRUUuU2hhZGVyTGliLnBob25nXHJcbiAgcmV0dXJuIFtcclxuICAgIFwiI2RlZmluZSBQSE9OR1wiLFxyXG5cclxuICAgIFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XCIsXHJcblxyXG4gICAgXCIjaWZuZGVmIEZMQVRfU0hBREVEXCIsXHJcblxyXG4gICAgXCJcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1wiLFxyXG5cclxuICAgIFwiI2VuZGlmXCIsXHJcblxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiY29tbW9uXCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInV2X3BhcnNfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInV2Ml9wYXJzX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiZW52bWFwX3BhcnNfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImxpZ2h0c19waG9uZ19wYXJzX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJjb2xvcl9wYXJzX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJtb3JwaHRhcmdldF9wYXJzX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJza2lubmluZ19wYXJzX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibG9nZGVwdGhidWZfcGFyc192ZXJ0ZXhcIiBdLFxyXG5cclxuICAgIHRoaXMuX2NvbmNhdEZ1bmN0aW9ucygpLFxyXG5cclxuICAgIHRoaXMuX2NvbmNhdFBhcmFtZXRlcnMoKSxcclxuXHJcbiAgICBcInZvaWQgbWFpbigpIHtcIixcclxuXHJcbiAgICB0aGlzLl9jb25jYXRWZXJ0ZXhJbml0KCksXHJcblxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwidXZfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInV2Ml92ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwiY29sb3JfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImJlZ2lubm9ybWFsX3ZlcnRleFwiIF0sXHJcblxyXG4gICAgdGhpcy5fY29uY2F0VHJhbnNmb3JtTm9ybWFsKCksXHJcblxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibW9ycGhub3JtYWxfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcInNraW5iYXNlX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJza2lubm9ybWFsX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkZWZhdWx0bm9ybWFsX3ZlcnRleFwiIF0sXHJcblxyXG4gICAgXCIjaWZuZGVmIEZMQVRfU0hBREVEXCIsIC8vIE5vcm1hbCBjb21wdXRlZCB3aXRoIGRlcml2YXRpdmVzIHdoZW4gRkxBVF9TSEFERURcclxuXHJcbiAgICBcIlx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcIixcclxuXHJcbiAgICBcIiNlbmRpZlwiLFxyXG5cclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImJlZ2luX3ZlcnRleFwiIF0sXHJcblxyXG4gICAgdGhpcy5fY29uY2F0VHJhbnNmb3JtUG9zaXRpb24oKSxcclxuXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJkaXNwbGFjZW1lbnRtYXBfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcIm1vcnBodGFyZ2V0X3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJza2lubmluZ192ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwicHJvamVjdF92ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibG9nZGVwdGhidWZfdmVydGV4XCIgXSxcclxuXHJcbiAgICBcIlx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XCIsXHJcblxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwid29ybGRwb3NfdmVydGV4XCIgXSxcclxuICAgIFRIUkVFLlNoYWRlckNodW5rWyBcImVudm1hcF92ZXJ0ZXhcIiBdLFxyXG4gICAgVEhSRUUuU2hhZGVyQ2h1bmtbIFwibGlnaHRzX3Bob25nX3ZlcnRleFwiIF0sXHJcbiAgICBUSFJFRS5TaGFkZXJDaHVua1sgXCJzaGFkb3dtYXBfdmVydGV4XCIgXSxcclxuXHJcbiAgICBcIn1cIlxyXG5cclxuICBdLmpvaW4oIFwiXFxuXCIgKTtcclxufTsiXSwiZmlsZSI6ImFwcC5taW4uanMifQ==
