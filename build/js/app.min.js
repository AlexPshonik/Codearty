var mContainer,mCamera,mRenderer,mControls,mScene;$(".js-show-popup").on("click",function(){$("#homepage-bg-animation").css("display","none"),anime({targets:".pop-up",translateY:0,opacity:1,easing:"linear",duration:350}),anime({targets:".pop-up__bg",opacity:1,easing:"linear",duration:300,delay:500}),anime({targets:[".pop-up__title",".pop-up__subtitle"],opacity:1,easing:"linear",duration:200,delay:800}),anime({targets:".list-form .list-form__field",translateY:0,opacity:1,easing:"linear",duration:400,delay:700}),anime({targets:".list-form .btn",opacity:1,easing:"linear",duration:400,delay:1100})}),$(".js-popup-close").on("click",function(){$("#homepage-bg-animation").css("display","block"),anime({targets:".pop-up",translateY:"100%",opacity:0,easing:"linear",delay:600,duration:200}),anime({targets:[".pop-up__title",".pop-up__subtitle"],opacity:0,easing:"linear",duration:200}),anime({targets:".list-form .list-form__field",opacity:0,easing:"linear",duration:300}),anime({targets:".list-form .btn",opacity:0,easing:"linear",duration:300})}),$(document).ready(function(){$(".pop-up").css("transform","translateY(100%)"),$(".pop-up").css("opacity","1"),$([".pop-up__title",".pop-up__subtitle",".list-form .list-form__field",".list-form .btn"].join(", ")).css("opacity","0")}),$(document).ready(function(){$(".list-form .list-form__label").each(function(){$(this).css("transform","translateY(12px)"),$(this).css("font-size","14px")})}),$(".list-form .list-form__input").focus(function(){$(this).parent().addClass("focused"),anime({targets:".list-form__field.focused .list-form__label",translateY:"-12px",fontSize:12,easing:"linear",duration:200})}),$(".list-form .list-form__input").focusout(function(){$(this).val()?$(this).parent().addClass("fill"):(anime({targets:".list-form__field.focused .list-form__label",translateY:"14px",fontSize:16,easing:"linear",duration:200}),$(this).parent().hasClass("fill")&&$(this).parent().removeClass("fill")),$(this).parent().removeClass("focused")});var mParticleSystem,mParticleCount=8e3,mTime=0,mTimeStep=1/270,mDuration=20;function init(){initTHREE(),initControls(),initParticleSystem(),requestAnimationFrame(tick),window.addEventListener("resize",resize,!1)}function initTHREE(){var e;(mRenderer=new THREE.WebGLRenderer({antialias:!0})).setSize($(".wrapper").width(),$(".wrapper").height()),mRenderer.setClearColor(3166206),(mContainer=document.getElementById("homepage-bg-animation")).appendChild(mRenderer.domElement),(mCamera=new THREE.PerspectiveCamera(60,$(".wrapper").width()/$(".wrapper").height(),.1,5e3)).position.set(-1300,0,0),mScene=new THREE.Scene,e=new THREE.AmbientLight(16777215),mScene.add(e)}function initControls(){(mControls=new THREE.OrbitControls(mCamera,mRenderer.domElement)).enabled=!1}function initParticleSystem(){var e=new THREE.PlaneGeometry(4,4),t=new THREE.BAS.PrefabBufferGeometry(e,mParticleCount);t.computeVertexNormals();var r,a,n,o,i,s,u,l=t.createAttribute("aOffset",1),m=t.createAttribute("aStartPosition",3),f=t.createAttribute("aControlPoint1",3),c=t.createAttribute("aControlPoint2",3),h=t.createAttribute("aEndPosition",3),E=t.createAttribute("aAxisAngle",4),p=t.createAttribute("color",3);for(r=0,n=0;r<mParticleCount;r++)for(o=r/mParticleCount*mDuration,a=0;a<e.vertices.length;a++)l.array[n++]=o;for(r=0,n=0;r<mParticleCount;r++)for(i=0,s=1e3,u=0,a=0;a<e.vertices.length;a++)m.array[n++]=i,m.array[n++]=s,m.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(400,600),u=THREE.Math.randFloat(-1800,-400),a=0;a<e.vertices.length;a++)f.array[n++]=i,f.array[n++]=s,f.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=THREE.Math.randFloat(-400,400),s=THREE.Math.randFloat(-600,-400),u=THREE.Math.randFloat(400,1800),a=0;a<e.vertices.length;a++)c.array[n++]=i,c.array[n++]=s,c.array[n++]=u;for(r=0,n=0;r<mParticleCount;r++)for(i=0,s=-1e3,u=0,a=0;a<e.vertices.length;a++)h.array[n++]=i,h.array[n++]=s,h.array[n++]=u;var d=new THREE.Vector3,y=0;for(r=0,n=0;r<mParticleCount;r++)for(d.x=THREE.Math.randFloatSpread(2),d.y=THREE.Math.randFloatSpread(2),d.z=THREE.Math.randFloatSpread(2),d.normalize(),y=Math.PI*THREE.Math.randInt(16,32),a=0;a<e.vertices.length;a++)E.array[n++]=d.x,E.array[n++]=d.y,E.array[n++]=d.z,E.array[n++]=y;var T=new THREE.Color;for(r=0,n=0;r<mParticleCount;r++)for(0,0,0,T.setHSL(0,0,0),a=0;a<e.vertices.length;a++)p.array[n++]=T.r,p.array[n++]=T.g,p.array[n++]=T.b;var v=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.FlatShading,side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0},uDuration:{type:"f",value:mDuration}},shaderFunctions:[THREE.BAS.ShaderChunk.quaternion_rotation,THREE.BAS.ShaderChunk.cubic_bezier],shaderParameters:["uniform float uTime;","uniform float uDuration;","attribute float aOffset;","attribute vec3 aStartPosition;","attribute vec3 aControlPoint1;","attribute vec3 aControlPoint2;","attribute vec3 aEndPosition;","attribute vec4 aAxisAngle;"],shaderVertexInit:["float tProgress = mod((uTime + aOffset), uDuration) / uDuration;","float angle = aAxisAngle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);"],shaderTransformNormal:["objectNormal = rotateVector(tQuat, objectNormal);"],shaderTransformPosition:["transformed = rotateVector(tQuat, transformed);","transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);"]},{specular:16711680,shininess:20});(mParticleSystem=new THREE.Mesh(t,v)).frustumCulled=!1,mScene.add(mParticleSystem)}function tick(){update(),render(),mTime+=mTimeStep,mTime%=mDuration,requestAnimationFrame(tick)}function update(){mControls.update(),mParticleSystem.material.uniforms.uTime.value=mTime}function render(){mRenderer.render(mScene,mCamera)}function resize(){let e=$(".wrapper").width(),t=$(".wrapper").height();mCamera.aspect=e/t,mCamera.updateProjectionMatrix(),mRenderer.setSize(e,t)}window.onload=function(){init()},THREE.BAS={},THREE.BAS.ShaderChunk={},THREE.BAS.ShaderChunk.animation_time="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n",THREE.BAS.ShaderChunk.cubic_bezier="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n",THREE.BAS.ShaderChunk.ease_in_cubic="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_quad="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_out_cubic="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n",THREE.BAS.ShaderChunk.quaternion_rotation="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n",THREE.BAS.PrefabBufferGeometry=function(e,t){THREE.BufferGeometry.call(this),this.prefabGeometry=e,this.prefabCount=t,this.prefabVertexCount=e.vertices.length,this.bufferDefaults()},THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry,THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){for(var e=this.prefabGeometry.faces.length,t=3*this.prefabGeometry.faces.length,r=this.prefabVertexCount=this.prefabGeometry.vertices.length,a=[],n=0;n<e;n++){var o=this.prefabGeometry.faces[n];a.push(o.a,o.b,o.c)}var i=new Uint32Array(this.prefabCount*t),s=new Float32Array(this.prefabCount*r*3);this.setIndex(new THREE.BufferAttribute(i,1)),this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var u=0,l=0;u<this.prefabCount;u++){for(var m=0;m<r;m++,l+=3){var f=this.prefabGeometry.vertices[m];s[l]=f.x,s[l+1]=f.y,s[l+2]=f.z}for(var c=0;c<t;c++)i[u*t+c]=a[c]+u*r}},THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var e=this.index,t=this.attributes,r=t.position.array;void 0===t.normal&&this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3));for(var a,n,o,i=t.normal.array,s=new THREE.Vector3,u=new THREE.Vector3,l=new THREE.Vector3,m=new THREE.Vector3,f=new THREE.Vector3,c=e.array,h=3*this.prefabGeometry.faces.length,E=0;E<h;E+=3)a=3*c[E+0],n=3*c[E+1],o=3*c[E+2],s.fromArray(r,a),u.fromArray(r,n),l.fromArray(r,o),m.subVectors(l,u),f.subVectors(s,u),m.cross(f),i[a]+=m.x,i[a+1]+=m.y,i[a+2]+=m.z,i[n]+=m.x,i[n+1]+=m.y,i[n+2]+=m.z,i[o]+=m.x,i[o+1]+=m.y,i[o+2]+=m.z;for(var p=1;p<this.prefabCount;p++)for(var d=0;d<h;d++)i[p*h+d]=i[d];this.normalizeNormals(),t.normal.needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(e,t){var r=new Float32Array(this.prefabCount*this.prefabVertexCount*t),a=new THREE.BufferAttribute(r,t);return this.addAttribute(e,a),a},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(e,t){var r,a,n=0,o=this.geometry.attributes[e].array;for(r=0;r<t.length;r++){var i=t[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z,o[n++]=i.w}this.geometry.attributes[e].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(e,t){var r,a,n=0,o=this.geometry.attributes[e].array;for(r=0;r<t.length;r++){var i=t[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z}this.geometry.attributes[e].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(e,t){var r,a,n=0,o=this.geometry.attributes[e].array;for(r=0;r<this.prefabCount;r++){var i=t[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y}this.geometry.attributes[e].needsUpdate=!0},THREE.BAS.BaseAnimationMaterial=function(e){THREE.ShaderMaterial.call(this),this.shaderFunctions=[],this.shaderParameters=[],this.shaderVertexInit=[],this.shaderTransformNormal=[],this.shaderTransformPosition=[],this.setValues(e)},THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial,THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""},THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shaderFunctions.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shaderParameters.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shaderVertexInit.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shaderTransformNormal.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shaderTransformPosition.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(e){for(var t in e)if(t in this.uniforms){var r=this.uniforms[t],a=e[t];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":r.value=a}}},THREE.BAS.PhongAnimationMaterial=function(e,t){THREE.BAS.BaseAnimationMaterial.call(this,e);var r=THREE.ShaderLib.phong;this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]),this.lights=!0,this.vertexShader=this._concatVertexShader(),this.fragmentShader=r.fragmentShader,t.map&&(this.defines.USE_MAP=""),t.normalMap&&(this.defines.USE_NORMALMAP=""),this.setUniformValues(t)},THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype),THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial,THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,this._concatTransformNormal(),THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,this._concatTransformPosition(),THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
